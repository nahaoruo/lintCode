{"a-b-problem": {"id": 1, "unique_name": "a-b-problem", "user_status": null, "title": "A + B Problem", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 46, "description": "Write a function that add two numbers A and B.", "notice": "There is no need to read data from standard input stream. Both parameters are given in function `aplusb`, you job is to calculate the sum and return it.", "clarification": "Are a and b both `32-bit` integers?\r\n\r\n- Yes.\r\n\r\nCan I use bit operation?\r\n\r\n- Sure you can.", "example": "Given `a=1` and `b=2` return `3`.", "challenge": "Of course you can just return a + b to get accepted. But Can you challenge not do it like that?(You should not use `+` or any arithmetic operators.)", "tags": [{"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 766, "title": "Leap Year", "unique_name": "leap-year", "level": 1, "accepted_rate": 62}, {"id": 765, "title": "Valid Triangle", "unique_name": "valid-triangle", "level": 1, "accepted_rate": 66}, {"id": 658, "title": "Swap Without Extra Variable (Only C++)", "unique_name": "swap-without-extra-variable-only-c", "level": 1, "accepted_rate": 65}], "comment_count": 0, "testcase_sample": "1\n2", "total_accepted": 41566, "total_submissions": 89739, "contest": "", "has_followed_by": false}, "trailing-zeros": {"id": 2, "unique_name": "trailing-zeros", "user_status": null, "title": "Trailing Zeros", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 23, "description": "<p>Write an algorithm which computes the number of trailing zeros in n factorial.</p>\r\n", "notice": "", "clarification": "", "example": "<p><span style=\"color:#B22222;\"><strong>11! = 39916800</strong></span>, so the out should be 2</p>\r\n", "challenge": "<p>O(log N) time</p>\r\n", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1312, "title": "Number of Digit One", "unique_name": "number-of-digit-one", "level": 3, "accepted_rate": 58}], "comment_count": 0, "testcase_sample": "11\n\n", "total_accepted": 22134, "total_submissions": 93749, "contest": "", "has_followed_by": false}, "digit-counts": {"id": 3, "unique_name": "digit-counts", "user_status": null, "title": "Digit Counts", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Count the number of *k*'s between *0* and *n*. *k* can be *0* - *9*.\r\n", "notice": "", "clarification": "", "example": "if n = `12`, k = `1` in\r\n\r\n```\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n```\r\n\r\nwe have FIVE 1's (1, 10, 11, 12)\r\n\r\n", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}], "related_problems": [{"id": 46, "title": "Majority Element", "unique_name": "majority-element", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "1\n1", "total_accepted": 14794, "total_submissions": 54924, "contest": "", "has_followed_by": false}, "ugly-number-ii": {"id": 4, "unique_name": "ugly-number-ii", "user_status": null, "title": "Ugly Number II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Ugly number is a number that only have factors `2`, `3` and `5`. \r\n\r\nDesign an algorithm to find the *n*th ugly number. The first 10 ugly numbers are `1, 2, 3, 4, 5, 6, 8, 9, 10, 12...`", "notice": "Note that `1` is typically treated as an ugly number.", "clarification": "", "example": "If `n=9`, return `10`.", "challenge": "O(_n_ log _n_) or O(_n_) time.", "tags": [{"id": 30, "name": "Priority Queue", "cn_name": "Priority Queue", "type": 21, "unique_name": "priority-queue", "alias": "", "problem_count": 13}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 791, "title": "Merge Number", "unique_name": "merge-number", "level": 2, "accepted_rate": 39}, {"id": 518, "title": "Super Ugly Number", "unique_name": "super-ugly-number", "level": 2, "accepted_rate": 28}, {"id": 513, "title": "Perfect Squares", "unique_name": "perfect-squares", "level": 2, "accepted_rate": 34}, {"id": 488, "title": "Happy Number", "unique_name": "happy-number", "level": 1, "accepted_rate": 33}, {"id": 147, "title": "Narcissistic Number", "unique_name": "narcissistic-number", "level": 0, "accepted_rate": 24}, {"id": 104, "title": "Merge K Sorted Lists ", "unique_name": "merge-k-sorted-lists", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "9\n", "total_accepted": 18812, "total_submissions": 77248, "contest": "", "has_followed_by": false}, "kth-largest-element": {"id": 5, "unique_name": "kth-largest-element", "user_status": null, "title": "Kth Largest Element", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Find K-th largest element in an array.", "notice": "You can swap elements in the array", "clarification": "", "example": "In array `[9,3,2,4,8]`, the 3rd largest element is `4`.\r\n\r\nIn array `[1,2,3,4,5]`, the 1st largest element is `5`, 2nd largest element is `4`, 3rd largest element is `3` and etc.", "challenge": "O(n) time, O(1) extra memory.", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 21, "name": "Quick Sort", "cn_name": "Quick Sort", "type": 12, "unique_name": "quick-sort", "alias": "", "problem_count": 8}], "related_problems": [{"id": 606, "title": "Kth Largest Element II", "unique_name": "kth-largest-element-ii", "level": 2, "accepted_rate": 54}, {"id": 507, "title": "Wiggle Sort II", "unique_name": "wiggle-sort-ii", "level": 2, "accepted_rate": 25}, {"id": 461, "title": "Kth Smallest Numbers in Unsorted Array", "unique_name": "kth-smallest-numbers-in-unsorted-array", "level": 2, "accepted_rate": 36}, {"id": 401, "title": "Kth Smallest Number in Sorted Matrix", "unique_name": "kth-smallest-number-in-sorted-matrix", "level": 2, "accepted_rate": 25}, {"id": 80, "title": "Median", "unique_name": "median", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "3\n[9,3,2,4,8]", "total_accepted": 28038, "total_submissions": 103843, "contest": "", "has_followed_by": false}, "merge-two-sorted-arrays": {"id": 6, "unique_name": "merge-two-sorted-arrays", "user_status": null, "title": "Merge Two Sorted Arrays", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Merge two given sorted integer array *A* and *B* into a new sorted integer array.\r\n", "notice": "", "clarification": "", "example": "A=`[1,2,3,4]`\r\n\r\nB=`[2,4,5,6]`\r\n\r\nreturn `[1,2,2,3,4,4,5,6]`\r\n", "challenge": "How can you optimize your algorithm if one array is very large and the other is very small?\r\n", "tags": [{"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 839, "title": "Merge Two Sorted Interval Lists", "unique_name": "merge-two-sorted-interval-lists", "level": 1, "accepted_rate": 33}, {"id": 548, "title": "Intersection of Two Arrays II", "unique_name": "intersection-of-two-arrays-ii", "level": 1, "accepted_rate": 24}, {"id": 547, "title": "Intersection of Two Arrays", "unique_name": "intersection-of-two-arrays", "level": 1, "accepted_rate": 25}, {"id": 165, "title": "Merge Two Sorted Lists", "unique_name": "merge-two-sorted-lists", "level": 1, "accepted_rate": 39}, {"id": 104, "title": "Merge K Sorted Lists ", "unique_name": "merge-k-sorted-lists", "level": 2, "accepted_rate": 30}, {"id": 64, "title": "Merge Sorted Array", "unique_name": "merge-sorted-array", "level": 1, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[1]\n[1]\n", "total_accepted": 22038, "total_submissions": 60231, "contest": "", "has_followed_by": false}, "serialize-and-deserialize-binary-tree": {"id": 7, "unique_name": "serialize-and-deserialize-binary-tree", "user_status": null, "title": "Serialize and Deserialize Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Design an algorithm and write code to serialize and deserialize a binary tree. Writing the tree to a file is called 'serialization' and reading back from the file to reconstruct the exact same binary tree is 'deserialization'.", "notice": "There is no limit of how you deserialize or serialize a binary tree, LintCode will take your output of `serialize` as the input of `deserialize`, it won't check the result of serialize.", "clarification": "", "example": "An example of testdata: Binary tree `{3,9,20,#,#,15,7}`,  denote the following structure:\r\n\r\n\t  3\r\n\t / \\\r\n\t9  20\r\n\t  /  \\\r\n\t 15   7\r\n\r\nOur data serialization use bfs traversal. This is just for when you got wrong answer and want to debug the input.\r\n\r\nYou can use other method to do serializaiton and deserialization.", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 659, "title": "Encode and Decode Strings", "unique_name": "encode-and-decode-strings", "level": 2, "accepted_rate": 43}, {"id": 527, "title": "Trie Serialization", "unique_name": "trie-serialization", "level": 3, "accepted_rate": 41}, {"id": 232, "title": "Tiny Url", "unique_name": "tiny-url", "level": 2, "accepted_rate": 33}, {"id": 11, "title": "Search Range in Binary Search Tree", "unique_name": "search-range-in-binary-search-tree", "level": 2, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "{1,#,2}\n", "total_accepted": 21703, "total_submissions": 92349, "contest": "", "has_followed_by": false}, "rotate-string": {"id": 8, "unique_name": "rotate-string", "user_status": null, "title": "Rotate String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 20, "description": "Given a string and an offset, rotate string by offset. (rotate from left to right)\r\n", "notice": "", "clarification": "", "example": "Given `\"abcdefg\"`.\r\n\r\n    offset=0 => \"abcdefg\"\r\n    offset=1 => \"gabcdef\"\r\n    offset=2 => \"fgabcde\"\r\n    offset=3 => \"efgabcd\"", "challenge": "Rotate in-place with O(1) extra memory.", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 671, "title": "Rotate Words", "unique_name": "rotate-words", "level": 1, "accepted_rate": 16}, {"id": 216, "title": "Substring Rotation", "unique_name": "substring-rotation", "level": 1, "accepted_rate": 28}, {"id": 170, "title": "Rotate List", "unique_name": "rotate-list", "level": 2, "accepted_rate": 25}, {"id": 161, "title": "Rotate Image ", "unique_name": "rotate-image", "level": 2, "accepted_rate": 36}, {"id": 39, "title": "Recover Rotated Sorted Array", "unique_name": "recover-rotated-sorted-array", "level": 1, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "\"abcdefg\"\n3\n", "total_accepted": 15951, "total_submissions": 78147, "contest": "", "has_followed_by": false}, "fizz-buzz": {"id": 9, "unique_name": "fizz-buzz", "user_status": null, "title": "Fizz Buzz", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 60, "description": "Given number *n*. Print number from 1 to *n*. But:\r\n\r\n- when number is divided by `3`, print `\"fizz\"`.\r\n- when number is divided by `5`, print `\"buzz\"`.\r\n- when number is divided by both `3` and `5`, print `\"fizz buzz\"`.\r\n", "notice": "", "clarification": "", "example": "If *n* = `15`, you should return:\r\n\r\n```\r\n[\r\n  \"1\", \"2\", \"fizz\",\r\n  \"4\", \"buzz\", \"fizz\",\r\n  \"7\", \"8\", \"fizz\",\r\n  \"buzz\", \"11\", \"fizz\",\r\n  \"13\", \"14\", \"fizz buzz\"\r\n]\r\n```", "challenge": "Can you do it with only one `if` statement?", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}], "related_problems": [{"id": 766, "title": "Leap Year", "unique_name": "leap-year", "level": 1, "accepted_rate": 62}, {"id": 765, "title": "Valid Triangle", "unique_name": "valid-triangle", "level": 1, "accepted_rate": 66}], "comment_count": 0, "testcase_sample": "15\n\n", "total_accepted": 49531, "total_submissions": 81587, "contest": "", "has_followed_by": false}, "string-permutation-ii": {"id": 10, "title": "String Permutation II", "unique_name": "string-permutation-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 5, "title": "Algorithm Final Test 23", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-10-21T15:00:00Z"}], "no_permission": true}, "search-range-in-binary-search-tree": {"id": 11, "unique_name": "search-range-in-binary-search-tree", "user_status": null, "title": "Search Range in Binary Search Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "Given a binary search tree and a range `[k1, k2]`, return all elements in the given range.", "notice": "", "clarification": "", "example": "If k1 = `10` and k2 = `22`, then your function should return `[12, 20, 22]`.\r\n\r\n        20\r\n       /  \\\r\n      8   22\r\n     / \\\r\n    4   12\r\n\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}], "related_problems": [{"id": 665, "title": "Range Sum Query 2D - Immutable", "unique_name": "range-sum-query-2d-immutable", "level": 2, "accepted_rate": 29}, {"id": 14, "title": "First Position of Target", "unique_name": "first-position-of-target", "level": 1, "accepted_rate": 33}, {"id": 7, "title": "Serialize and Deserialize Binary Tree", "unique_name": "serialize-and-deserialize-binary-tree", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "{}\n1\n10\n", "total_accepted": 17978, "total_submissions": 47883, "contest": "", "has_followed_by": false}, "min-stack": {"id": 12, "unique_name": "min-stack", "user_status": null, "title": "Min Stack", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Implement a stack with min() function, which will return the smallest number in the stack.\r\n\r\nIt should support push, pop and min operation all in O(1) cost.", "notice": "min operation will never be called if there is no number in the stack.", "clarification": "", "example": "    push(1)\r\n    pop()   // return 1\r\n    push(2)\r\n    push(3)\r\n    min()   // return 2\r\n    push(1)\r\n    min()   // return 1", "challenge": "", "tags": [{"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}], "related_problems": [{"id": 636, "title": "132 Pattern", "unique_name": "132-pattern", "level": 2, "accepted_rate": 21}, {"id": 126, "title": "Max Tree", "unique_name": "max-tree", "level": 3, "accepted_rate": 34}, {"id": 40, "title": "Implement Queue by Two Stacks", "unique_name": "implement-queue-by-two-stacks", "level": 2, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "push(1)\npop()\npush(2)\npush(3)\nmin()\npush(1)\nmin()\n", "total_accepted": 19008, "total_submissions": 56664, "contest": "", "has_followed_by": false}, "implement-strstr": {"id": 13, "unique_name": "implement-strstr", "user_status": null, "title": "Implement strStr()", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 19, "description": "For a given source string and a target string, you should output the **first** index(from 0) of target string in source string.\r\n\r\nIf target does not exist in source, just return `-1`.", "notice": "", "clarification": "Do I need to implement KMP Algorithm in a real interview?\r\n\r\n- Not necessary. When you meet this problem in a real interview, the interviewer may just want to test your basic implementation ability. But make sure you confirm with the interviewer first.", "example": "If source = `\"source\"` and target = `\"target\"`, return `-1`.\r\n\r\nIf source = `\"abcdabcdefg\"` and target = `\"bcd\"`, return `1`.", "challenge": "O(n<sup>2</sup>) is acceptable. Can you implement an O(n) algorithm? (hint: *KMP*)\r\n", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}], "related_problems": [{"id": 594, "title": "strStr II", "unique_name": "strstr-ii", "level": 3, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[\"source\", \"target\"]\n", "total_accepted": 49732, "total_submissions": 261552, "contest": "", "has_followed_by": false}, "first-position-of-target": {"id": 14, "unique_name": "first-position-of-target", "user_status": null, "title": "First Position of Target", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 33, "description": "For a given sorted array (ascending order) and a `target` number, find the first index of this number in `O(log n)` time complexity.\r\n\r\nIf the target number does not exist in the array, return `-1`.", "notice": "", "clarification": "", "example": "If the array is `[1, 2, 3, 3, 4, 5, 10]`, for given target `3`, return `2`.", "challenge": "If the count of numbers is bigger than 2^32, can your code work properly?\r\n", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 459, "title": "Closest Number in Sorted Array", "unique_name": "closest-number-in-sorted-array", "level": 1, "accepted_rate": 36}, {"id": 458, "title": "Last Position of Target", "unique_name": "last-position-of-target", "level": 1, "accepted_rate": 37}, {"id": 457, "title": "\bClassical Binary Search", "unique_name": "classical-binary-search", "level": 1, "accepted_rate": 38}, {"id": 447, "title": "Search in a Big Sorted Array", "unique_name": "search-in-a-big-sorted-array", "level": 2, "accepted_rate": 32}, {"id": 163, "title": "Unique Binary Search Trees ", "unique_name": "unique-binary-search-trees", "level": 2, "accepted_rate": 36}, {"id": 141, "title": "Sqrt(x)", "unique_name": "sqrtx", "level": 1, "accepted_rate": 26}, {"id": 11, "title": "Search Range in Binary Search Tree", "unique_name": "search-range-in-binary-search-tree", "level": 2, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[1,4,4,5,7,7,8,9,9,10]\n1", "total_accepted": 36520, "total_submissions": 109792, "contest": "", "has_followed_by": false}, "permutations": {"id": 15, "unique_name": "permutations", "user_status": null, "title": "Permutations", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given a list of numbers, return all possible permutations.", "notice": "You can assume that there is no duplicate numbers in the list.", "clarification": "", "example": "For nums = `[1,2,3]`, the permutations are:\r\n\r\n\t[\r\n\t  [1,2,3],\r\n\t  [1,3,2],\r\n\t  [2,1,3],\r\n\t  [2,3,1],\r\n\t  [3,1,2],\r\n\t  [3,2,1]\r\n\t]", "challenge": "Do it without recursion.\r\n", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 935, "title": "Cartesian Product", "unique_name": "cartesian-product", "level": 2, "accepted_rate": 61}, {"id": 371, "title": "Print Numbers by Recursion", "unique_name": "print-numbers-by-recursion", "level": 2, "accepted_rate": 27}, {"id": 388, "title": "Permutation Sequence", "unique_name": "permutation-sequence", "level": 2, "accepted_rate": 29}, {"id": 16, "title": "Permutations II", "unique_name": "permutations-ii", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 27961, "total_submissions": 94642, "contest": "", "has_followed_by": false}, "permutations-ii": {"id": 16, "unique_name": "permutations-ii", "user_status": null, "title": "Permutations II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Given a list of numbers with duplicate number in it. Find all **unique** permutations.", "notice": "", "clarification": "", "example": "For numbers `[1,2,2]` the unique permutations are:\r\n\r\n```\r\n[\r\n  [1,2,2],\r\n  [2,1,2],\r\n  [2,2,1]\r\n]\r\n```", "challenge": "Using recursion to do it is acceptable. If you can do it without recursion, that would be great!", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 917, "title": "Palindrome Permutation II", "unique_name": "palindrome-permutation-ii", "level": 2, "accepted_rate": 32}, {"id": 190, "title": "Next Permutation II", "unique_name": "next-permutation-ii", "level": 2, "accepted_rate": 35}, {"id": 388, "title": "Permutation Sequence", "unique_name": "permutation-sequence", "level": 2, "accepted_rate": 29}, {"id": 52, "title": "Next Permutation", "unique_name": "next-permutation", "level": 2, "accepted_rate": 26}, {"id": 15, "title": "Permutations", "unique_name": "permutations", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 22450, "total_submissions": 81495, "contest": "", "has_followed_by": false}, "subsets": {"id": 17, "unique_name": "subsets", "user_status": null, "title": "Subsets", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Given a set of distinct integers, return all possible subsets.", "notice": "* Elements in a subset must be in *non-descending* order.\r\n* The solution set must not contain duplicate subsets.", "clarification": "", "example": "If S = `[1,2,3]`, a solution is:\r\n\r\n    [\r\n      [3],\r\n      [1],\r\n      [2],\r\n      [1,2,3],\r\n      [1,3],\r\n      [2,3],\r\n      [1,2],\r\n      []\r\n    ]", "challenge": "Can you do it in both recursively and iteratively?", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 104, "name": "Coupang", "cn_name": "Coupang", "type": 3, "unique_name": "coupang", "alias": "", "problem_count": 8}], "related_problems": [{"id": 1210, "title": "Increasing Subsequences", "unique_name": "increasing-subsequences", "level": 2, "accepted_rate": 40}, {"id": 935, "title": "Cartesian Product", "unique_name": "cartesian-product", "level": 2, "accepted_rate": 61}, {"id": 761, "title": "Smallest Subset", "unique_name": "smallest-subset", "level": 2, "accepted_rate": 51}, {"id": 730, "title": "Sum of All Subsets", "unique_name": "sum-of-all-subsets", "level": 1, "accepted_rate": 19}, {"id": 680, "title": "Split String", "unique_name": "split-string", "level": 1, "accepted_rate": 29}, {"id": 426, "title": "Restore IP Addresses", "unique_name": "restore-ip-addresses", "level": 2, "accepted_rate": 25}, {"id": 18, "title": "Subsets II", "unique_name": "subsets-ii", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[0]\n", "total_accepted": 33208, "total_submissions": 122474, "contest": "", "has_followed_by": false}, "subsets-ii": {"id": 18, "unique_name": "subsets-ii", "user_status": null, "title": "Subsets II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Given a collection of integers that might contain duplicates, *nums*, return all possible subsets (the power set).\r\n", "notice": "* Each element in a subset must be in *non-descending* order.\r\n* The ordering between two subsets is free.\r\n* The solution set must not contain duplicate subsets.", "clarification": "", "example": "Input: `[1,2,2]`\r\nOutput:\r\n```\r\n[\r\n  [2],\r\n  [1],\r\n  [1,2,2],\r\n  [2,2],\r\n  [1,2],\r\n  []\r\n]\r\n```", "challenge": "Can you do it in both recursively and iteratively?", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 1210, "title": "Increasing Subsequences", "unique_name": "increasing-subsequences", "level": 2, "accepted_rate": 40}, {"id": 730, "title": "Sum of All Subsets", "unique_name": "sum-of-all-subsets", "level": 1, "accepted_rate": 19}, {"id": 680, "title": "Split String", "unique_name": "split-string", "level": 1, "accepted_rate": 29}, {"id": 17, "title": "Subsets", "unique_name": "subsets", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[0]\n", "total_accepted": 23589, "total_submissions": 85904, "contest": "", "has_followed_by": false}, "dices-sum": {"id": 20, "unique_name": "dices-sum", "user_status": null, "title": "Dices Sum", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "Throw *n* dices, the sum of the dices' faces is *S*. Given *n*, find the all possible value of *S* along with its probability. ", "notice": "You do not care about the accuracy of the result, we will help you to output results.", "clarification": "", "example": "Given `n = 1`, return `[ [1, 0.17], [2, 0.17], [3, 0.17], [4, 0.17], [5, 0.17], [6, 0.17]]`.", "challenge": "", "tags": [{"id": 52, "name": "Probability", "cn_name": "Probability", "type": 14, "unique_name": "probability", "alias": "", "problem_count": 1}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "1\n", "total_accepted": 2570, "total_submissions": 10947, "contest": "", "has_followed_by": false}, "flatten-list": {"id": 22, "unique_name": "flatten-list", "user_status": null, "title": "Flatten List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "Given a list, each element in the list can be a list or integer. flatten it into a simply list with integers.", "notice": "If the element in the given list is a list, it can contain list too.", "clarification": "", "example": "Given `[1,2,[1,2]]`, return `[1,2,1,2]`.\r\n\r\nGiven `[4,[3,[2,[1]]]]`, return `[4,3,2,1]`.", "challenge": "Do it in non-recursive. ", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 53, "name": "Non Recursion", "cn_name": "Non Recursion", "type": 13, "unique_name": "non-recursion", "alias": "", "problem_count": 5}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 601, "title": "Flatten 2D Vector", "unique_name": "flatten-2d-vector", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "[[1,1],2,[1,1]]\n", "total_accepted": 7040, "total_submissions": 23112, "contest": "", "has_followed_by": false}, "lfu-cache": {"id": 24, "unique_name": "lfu-cache", "user_status": null, "title": "LFU Cache", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 18, "description": "LFU (Least Frequently Used) is a famous cache eviction algorithm.\r\n\r\nFor a cache with capacity *k*, if the cache is full and need to evict a key in it, the key with the lease frequently used will be kicked out.\r\n\r\nImplement `set` and `get` method for LFU cache.", "notice": "", "clarification": "", "example": "Given `capacity=3`\r\n\r\n```\r\nset(2,2)\r\nset(1,1)\r\nget(2)\r\n>> 2\r\nget(1)\r\n>> 1\r\nget(2)\r\n>> 2\r\nset(3,3)\r\nset(4,4)\r\nget(3)\r\n>> -1\r\nget(2)\r\n>> 2\r\nget(1)\r\n>> 1\r\nget(4)\r\n>> 4\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 538, "title": "Memcache", "unique_name": "memcache", "level": 2, "accepted_rate": 32}, {"id": 134, "title": "LRU Cache ", "unique_name": "lru-cache", "level": 3, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "LFUCache(3)\nset(2, 2)\nset(1, 1)\nget(2)\nget(1)\nget(2)\nset(3, 3)\nset(4, 4)\nget(3)\nget(2)\nget(1)\nget(4)\n", "total_accepted": 2716, "total_submissions": 14896, "contest": "", "has_followed_by": false}, "search-a-2d-matrix": {"id": 28, "unique_name": "search-a-2d-matrix", "user_status": null, "title": "Search a 2D Matrix ", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Write an efficient algorithm that searches for a value in an _m_ x _n_ matrix.\r\n\r\nThis matrix has the following properties:\r\n\r\n- Integers in each row are sorted from left to right.\r\n- The first integer of each row is greater than the last integer of the previous row.\r\n\r\n", "notice": "", "clarification": "", "example": "Consider the following matrix:\r\n\r\n\t[\r\n\t    [1, 3, 5, 7],\r\n\t    [10, 11, 16, 20],\r\n\t    [23, 30, 34, 50]\r\n\t]\r\n\r\nGiven `target = 3`, return `true`.", "challenge": "O(log(n) + log(m)) time", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}], "related_problems": [{"id": 832, "title": "Count Negative Number", "unique_name": "count-negative-number", "level": 2, "accepted_rate": 26}, {"id": 62, "title": "Search in Rotated Sorted Array", "unique_name": "search-in-rotated-sorted-array", "level": 2, "accepted_rate": 30}, {"id": 38, "title": "Search a 2D Matrix II", "unique_name": "search-a-2d-matrix-ii", "level": 2, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[[5]]\n2", "total_accepted": 31319, "total_submissions": 107953, "contest": "", "has_followed_by": false}, "interleaving-string": {"id": 29, "unique_name": "interleaving-string", "user_status": null, "title": "Interleaving String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Given three strings: *s1*, *s2*, *s3*, determine whether *s3* is formed by the interleaving of *s1* and *s2*.\r\n\r\n", "notice": "", "clarification": "", "example": "For s1 = `\"aabcc\"`, s2 = `\"dbbca\"`\r\n\r\n- When s3 = `\"aadbbcbcac\"`, return `true`.\r\n- When s3 = `\"aadbbbaccc\"`, return `false`.", "challenge": "O(n<sup>2</sup>) time or better", "tags": [{"id": 15, "name": "Longest Common Subsequence", "cn_name": "Longest Common Subsequence", "type": 11, "unique_name": "longest-common-subsequence", "alias": "", "problem_count": 2}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 118, "title": "Distinct Subsequences ", "unique_name": "distinct-subsequences", "level": 2, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "\"\"\n\"\"\n\"1\"", "total_accepted": 14015, "total_submissions": 52227, "contest": "", "has_followed_by": false}, "insert-interval": {"id": 30, "unique_name": "insert-interval", "user_status": null, "title": "Insert Interval", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 23, "description": "Given a non-overlapping interval list which is sorted by start point.\r\n\r\nInsert a new interval into it, make sure the list is still in order and `non-overlapping` (merge intervals if necessary).\r\n", "notice": "", "clarification": "", "example": "Insert `(2, 5)` into `[(1,2), (5,9)]`, we get [(1,9)].\r\n\r\nInsert `(3, 4)` into `[(1,2), (5,9)]`, we get `[(1,2), (3,4), (5,9)]`.", "challenge": "", "tags": [{"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1074, "title": "Range Module", "unique_name": "range-module", "level": 3, "accepted_rate": 47}, {"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[]\n(5,7)\n", "total_accepted": 10582, "total_submissions": 44999, "contest": "", "has_followed_by": false}, "partition-array": {"id": 31, "unique_name": "partition-array", "user_status": null, "title": "Partition Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given an array `nums` of integers and an int `k`, partition the array (i.e move the elements in \"nums\") such that:\r\n\r\n- All elements < *k* are moved to the *left*\r\n- All elements >= *k* are moved to the *right*\r\n\r\nReturn the partitioning index, i.e the first index *i* nums[*i*] >= *k*.", "notice": "You should do really partition in array *nums* instead of just counting the numbers of integers smaller than k.\r\n\r\nIf all elements in *nums* are smaller than *k*, then return *nums.length*", "clarification": "", "example": "If nums = `[3,2,2,1]` and `k=2`, a valid answer is `1`.", "challenge": "Can you partition the array in-place and in O(n)?", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 769, "title": "Spiral Array", "unique_name": "spiral-array", "level": 1, "accepted_rate": 34}, {"id": 761, "title": "Smallest Subset", "unique_name": "smallest-subset", "level": 2, "accepted_rate": 51}, {"id": 625, "title": "Partition Array II", "unique_name": "partition-array-ii", "level": 2, "accepted_rate": 51}, {"id": 373, "title": "Partition Array by Odd and Even", "unique_name": "partition-array-by-odd-and-even", "level": 1, "accepted_rate": 42}, {"id": 144, "title": "Interleaving Positive and Negative Numbers", "unique_name": "interleaving-positive-and-negative-numbers", "level": 2, "accepted_rate": 23}, {"id": 96, "title": "Partition List", "unique_name": "partition-list", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[]\n9\n", "total_accepted": 27545, "total_submissions": 87565, "contest": "", "has_followed_by": false}, "minimum-window-substring": {"id": 32, "unique_name": "minimum-window-substring", "user_status": null, "title": "Minimum Window Substring ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a string source and a string target, find the minimum window in source which will contain all the characters in target.", "notice": "If there is no such window in source that covers all characters in target, return the emtpy string `\"\"`.\nIf there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in source.\nThe target string may contain duplicate characters, the minimum window should cover all characters including the duplicate characters in target.", "clarification": "Should the characters in minimum window has the same order in target?\n- Not necessary.", "example": "For source = `\"ADOBECODEBANC\"`, target = `\"ABC\"`, the minimum window is `\"BANC\"`", "challenge": "Can you do it in time complexity O(n) ?", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 1362, "title": "Substring with Concatenation of All Words", "unique_name": "substring-with-concatenation-of-all-words", "level": 3, "accepted_rate": 52}, {"id": 1169, "title": "Permutation in String", "unique_name": "permutation-in-string", "level": 2, "accepted_rate": 51}, {"id": 1117, "title": "Smallest Range", "unique_name": "smallest-range", "level": 3, "accepted_rate": 31}, {"id": 857, "title": "Minimum Window Subsequence", "unique_name": "minimum-window-subsequence", "level": 3, "accepted_rate": 38}, {"id": 604, "title": "Window Sum", "unique_name": "window-sum", "level": 1, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "\"\"\n\"\"", "total_accepted": 11223, "total_submissions": 46196, "contest": "", "has_followed_by": false}, "n-queens": {"id": 33, "unique_name": "n-queens", "user_status": null, "title": "N-Queens", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "The n-queens puzzle is the problem of placing n queens on an `n\u00c3\u2014n` chessboard such that no two queens attack each other.\r\n\r\nGiven an integer `n`, return all distinct solutions to the n-queens puzzle.\r\n\r\nEach solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space respectively.", "notice": "", "clarification": "", "example": "There exist two distinct solutions to the 4-queens puzzle:\r\n```\r\n[\r\n  // Solution 1\r\n  [\".Q..\",\r\n   \"...Q\",\r\n   \"Q...\",\r\n   \"..Q.\"\r\n  ],\r\n  // Solution 2\r\n  [\"..Q.\",\r\n   \"Q...\",\r\n   \"...Q\",\r\n   \".Q..\"\r\n  ]\r\n]\r\n```", "challenge": "<p>Can you do it without recursion?</p>\r\n", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 802, "title": "Sudoku Solver", "unique_name": "sudoku-solver", "level": 3, "accepted_rate": 29}, {"id": 778, "title": "Pacific Atlantic Water Flow", "unique_name": "pacific-atlantic-water-flow", "level": 2, "accepted_rate": 29}, {"id": 152, "title": "Combinations ", "unique_name": "combinations", "level": 2, "accepted_rate": 34}, {"id": 34, "title": "N-Queens II", "unique_name": "n-queens-ii", "level": 2, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "1\n", "total_accepted": 11227, "total_submissions": 41903, "contest": "", "has_followed_by": false}, "n-queens-ii": {"id": 34, "unique_name": "n-queens-ii", "user_status": null, "title": "N-Queens II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Follow up for N-Queens problem.\r\n\r\nNow, instead outputting board configurations, return the total number of distinct solutions.", "notice": "", "clarification": "", "example": "For n=4, there are 2 distinct solutions.", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}], "related_problems": [{"id": 152, "title": "Combinations ", "unique_name": "combinations", "level": 2, "accepted_rate": 34}, {"id": 33, "title": "N-Queens", "unique_name": "n-queens", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "1\n", "total_accepted": 7039, "total_submissions": 16397, "contest": "", "has_followed_by": false}, "reverse-linked-list": {"id": 35, "unique_name": "reverse-linked-list", "user_status": null, "title": "Reverse Linked List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 40, "description": "Reverse a linked list.\r\n\r\n", "notice": "", "clarification": "", "example": "For linked list `1->2->3`, the reversed linked list is `3->2->1`\r\n\r\n", "challenge": "Reverse it in-place and in one-pass", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}], "related_problems": [{"id": 767, "title": "Reverse Array", "unique_name": "reverse-array", "level": 1, "accepted_rate": 52}, {"id": 221, "title": "Add Two Numbers II", "unique_name": "add-two-numbers-ii", "level": 2, "accepted_rate": 25}, {"id": 649, "title": "Binary Tree Upside Down", "unique_name": "binary-tree-upside-down", "level": 2, "accepted_rate": 42}, {"id": 223, "title": "Palindrome Linked List", "unique_name": "palindrome-linked-list", "level": 2, "accepted_rate": 29}, {"id": 450, "title": "Reverse Nodes in k-Group", "unique_name": "reverse-nodes-in-k-group", "level": 3, "accepted_rate": 35}, {"id": 53, "title": "Reverse Words in a String", "unique_name": "reverse-words-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 36, "title": "Reverse Linked List II", "unique_name": "reverse-linked-list-ii", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "null", "total_accepted": 31250, "total_submissions": 77320, "contest": "", "has_followed_by": false}, "reverse-linked-list-ii": {"id": 36, "unique_name": "reverse-linked-list-ii", "user_status": null, "title": "Reverse Linked List II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Reverse a linked list from position m to n.", "notice": "Given m, n satisfy the following condition: 1 \u2264 m \u2264 n \u2264 length of list.", "clarification": "", "example": "Given `1->2->3->4->5->NULL`, m = `2` and n = `4`, return `1->4->3->2->5->NULL`.", "challenge": "<p>Reverse it in-place and in one-pass</p>\r\n", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 450, "title": "Reverse Nodes in k-Group", "unique_name": "reverse-nodes-in-k-group", "level": 3, "accepted_rate": 35}, {"id": 53, "title": "Reverse Words in a String", "unique_name": "reverse-words-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "3760->2881->7595->3904->5069->4421->8560->8879->8488->5040->5792->56->1007->2270->3403->6062->null\n2\n7\n\n", "total_accepted": 16147, "total_submissions": 52579, "contest": "", "has_followed_by": false}, "reverse-3-digit-integer": {"id": 37, "unique_name": "reverse-3-digit-integer", "user_status": null, "title": "Reverse 3-digit Integer", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 48, "description": "Reverse a 3-digit integer.", "notice": "You may assume the given number is larger or equal to 100 but smaller than 1000.", "clarification": "", "example": "Reverse `123` you will get `321`.\r\n\r\nReverse `900` you will get `9`.", "challenge": "", "tags": [{"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}], "related_problems": [{"id": 767, "title": "Reverse Array", "unique_name": "reverse-array", "level": 1, "accepted_rate": 52}, {"id": 413, "title": "Reverse Integer", "unique_name": "reverse-integer", "level": 1, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "123\n", "total_accepted": 9492, "total_submissions": 19616, "contest": "", "has_followed_by": false}, "search-a-2d-matrix-ii": {"id": 38, "unique_name": "search-a-2d-matrix-ii", "user_status": null, "title": "Search a 2D Matrix II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.\r\n\r\nThis matrix has the following properties:\r\n\r\n* Integers in each row are sorted from left to right.\r\n* Integers in each column are sorted from up to bottom.\r\n* No duplicate integers in each row or column.\r\n\r\n", "notice": "", "clarification": "", "example": "Consider the following matrix:\r\n\r\n    [\r\n      [1, 3, 5, 7],\r\n      [2, 4, 7, 8],\r\n      [3, 5, 9, 10]\r\n    ]\r\n\r\nGiven target = `3`, return `2`.", "challenge": "O(m+n) time and O(1) extra space", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 61, "name": "Sorted Matrix", "cn_name": "Sorted Matrix", "type": 1, "unique_name": "sorted-matrix", "alias": "", "problem_count": 2}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 832, "title": "Count Negative Number", "unique_name": "count-negative-number", "level": 2, "accepted_rate": 26}, {"id": 465, "title": "Kth Smallest Sum In Two Sorted Arrays", "unique_name": "kth-smallest-sum-in-two-sorted-arrays", "level": 3, "accepted_rate": 28}, {"id": 28, "title": "Search a 2D Matrix ", "unique_name": "search-a-2d-matrix", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[[3,4]]\n3\n", "total_accepted": 16383, "total_submissions": 43856, "contest": "", "has_followed_by": false}, "recover-rotated-sorted-array": {"id": 39, "unique_name": "recover-rotated-sorted-array", "user_status": null, "title": "Recover Rotated Sorted Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 28, "description": "Given a **rotated** sorted array, recover it to sorted array in-place.", "notice": "", "clarification": "What is rotated array?\r\n\r\n- For example, the orginal array is [1,2,3,4], The rotated array of it can be [1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]\r\n\r\n", "example": "`[4, 5, 1, 2, 3]` -> `[1, 2, 3, 4, 5]`", "challenge": "In-place, O(*1*) extra space and O(*n*) time.", "tags": [{"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 148, "title": "Sort Colors", "unique_name": "sort-colors", "level": 2, "accepted_rate": 37}, {"id": 8, "title": "Rotate String", "unique_name": "rotate-string", "level": 1, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[4, 5, 1, 2, 3]\n\n", "total_accepted": 12808, "total_submissions": 45624, "contest": "", "has_followed_by": false}, "implement-queue-by-two-stacks": {"id": 40, "unique_name": "implement-queue-by-two-stacks", "user_status": null, "title": "Implement Queue by Two Stacks", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "As the title described, you should only use two stacks to implement a queue's actions.\r\n\r\nThe queue should support `push(element)`, `pop()` and `top()` where pop is pop the first(a.k.a front) element in the queue.\r\n\r\nBoth pop and top methods should return the value of first element.", "notice": "", "clarification": "", "example": "    push(1)\r\n    pop()     // return 1\r\n    push(2)\r\n    push(3)\r\n    top()     // return 2\r\n    pop()     // return 2", "challenge": "implement it by two stacks, do not use any other data structure and push, pop and top should be O(1) by *AVERAGE*.\r\n\r\n", "tags": [{"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 955, "title": "Implement Queue by Circular Array", "unique_name": "implement-queue-by-circular-array", "level": 2, "accepted_rate": 43}, {"id": 546, "title": "Implement Queue by Interface", "unique_name": "implement-queue-by-interface", "level": 1, "accepted_rate": 30}, {"id": 493, "title": "Implement Queue by Linked List II", "unique_name": "implement-queue-by-linked-list-ii", "level": 1, "accepted_rate": 31}, {"id": 492, "title": "Implement Queue by Linked List", "unique_name": "implement-queue-by-linked-list", "level": 1, "accepted_rate": 36}, {"id": 12, "title": "Min Stack", "unique_name": "min-stack", "level": 2, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "push(1)\npop()\npush(2)\npush(3)\ntop()\npop()\n", "total_accepted": 16054, "total_submissions": 37897, "contest": "", "has_followed_by": false}, "maximum-subarray": {"id": 41, "unique_name": "maximum-subarray", "user_status": null, "title": "Maximum Subarray", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 39, "description": "Given an array of integers, find a contiguous subarray which has the largest sum.\r\n", "notice": "The subarray should contain at least one number.\r\n", "clarification": "", "example": "Given the array `[\u22122,2,\u22123,4,\u22121,2,1,\u22125,3]`, the contiguous subarray `[4,\u22121,2,1]` has the largest sum = `6`.\r\n\r\n", "challenge": "Can you do it in time complexity O(n)?\r\n", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 944, "title": "Maximum Submatrix", "unique_name": "maximum-submatrix", "level": 2, "accepted_rate": 37}, {"id": 621, "title": "Maximum Subarray V", "unique_name": "maximum-subarray-v", "level": 3, "accepted_rate": 29}, {"id": 620, "title": "Maximum Subarray IV", "unique_name": "maximum-subarray-iv", "level": 2, "accepted_rate": 36}, {"id": 617, "title": "Maximum Average Subarray II", "unique_name": "maximum-average-subarray-ii", "level": 2, "accepted_rate": 19}, {"id": 402, "title": "Continuous Subarray Sum", "unique_name": "continuous-subarray-sum", "level": 2, "accepted_rate": 26}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[-2,2,-3,4,-1,2,1,-5,3]\n\n\n", "total_accepted": 31884, "total_submissions": 81255, "contest": "", "has_followed_by": false}, "maximum-subarray-ii": {"id": 42, "unique_name": "maximum-subarray-ii", "user_status": null, "title": "Maximum Subarray II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Given an array of integers, find two non-overlapping subarrays which have the largest sum.\r\nThe number in each subarray should be contiguous.\r\nReturn the largest sum.", "notice": "The subarray should contain at least one number\r\n", "clarification": "", "example": "For given `[1, 3, -1, 2, -1, 2]`, the two subarrays are `[1, 3]` and `[2, -1, 2]` or `[1, 3, -1, 2]` and `[2]`, they both have the largest sum `7`.", "challenge": "Can you do it in time complexity O(*n*) ?", "tags": [{"id": 19, "name": "Forward-Backward Traversal", "cn_name": "Forward-Backward Traversal", "type": 1, "unique_name": "forward-backward-traversal", "alias": "", "problem_count": 5}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 621, "title": "Maximum Subarray V", "unique_name": "maximum-subarray-v", "level": 3, "accepted_rate": 29}, {"id": 620, "title": "Maximum Subarray IV", "unique_name": "maximum-subarray-iv", "level": 2, "accepted_rate": 36}, {"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[1,3,-1,2,-1,2]\n", "total_accepted": 11156, "total_submissions": 42586, "contest": "", "has_followed_by": false}, "maximum-subarray-iii": {"id": 43, "unique_name": "maximum-subarray-iii", "user_status": null, "title": "Maximum Subarray III", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 25, "description": "Given an array of integers and a number _k_, find k `non-overlapping` subarrays which have the largest sum.\r\n\r\nThe number in each subarray should be **contiguous**.\r\n\r\nReturn the largest sum.", "notice": "The subarray should contain at least one number", "clarification": "", "example": "Given `[-1,4,-2,3,-2,3]`, `k=2`, return `8`", "challenge": "", "tags": [{"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 621, "title": "Maximum Subarray V", "unique_name": "maximum-subarray-v", "level": 3, "accepted_rate": 29}, {"id": 620, "title": "Maximum Subarray IV", "unique_name": "maximum-subarray-iv", "level": 2, "accepted_rate": 36}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 150, "title": "Best Time to Buy and Sell Stock II ", "unique_name": "best-time-to-buy-and-sell-stock-ii", "level": 2, "accepted_rate": 50}, {"id": 149, "title": "Best Time to Buy and Sell Stock", "unique_name": "best-time-to-buy-and-sell-stock", "level": 2, "accepted_rate": 41}, {"id": 45, "title": "Maximum Subarray Difference", "unique_name": "maximum-subarray-difference", "level": 2, "accepted_rate": 25}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}, {"id": 42, "title": "Maximum Subarray II", "unique_name": "maximum-subarray-ii", "level": 2, "accepted_rate": 26}, {"id": 41, "title": "Maximum Subarray", "unique_name": "maximum-subarray", "level": 1, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[1,2,3]\n1\n\n", "total_accepted": 7729, "total_submissions": 29729, "contest": "", "has_followed_by": false}, "minimum-subarray": {"id": 44, "unique_name": "minimum-subarray", "user_status": null, "title": "Minimum Subarray", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Given an array of integers, find the subarray with smallest sum.\r\n\r\nReturn the sum of the subarray.", "notice": "The subarray should contain one integer at least.", "clarification": "", "example": "For `[1, -1, -2, 1]`, return `-3`.", "challenge": "", "tags": [{"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[1,-1,-2,1]\n\n", "total_accepted": 13273, "total_submissions": 34660, "contest": "", "has_followed_by": false}, "maximum-subarray-difference": {"id": 45, "unique_name": "maximum-subarray-difference", "user_status": null, "title": "Maximum Subarray Difference", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given an array with integers.\r\n\r\nFind two *non-overlapping* subarrays *A* and *B*, which `|SUM(A) - SUM(B)|` is the largest.\r\n\r\nReturn the largest difference.", "notice": "The subarray should contain at least one number", "clarification": "", "example": "For `[1, 2, -3, 1]`, return `6`.", "challenge": "O(n) time and O(n) space.", "tags": [{"id": 19, "name": "Forward-Backward Traversal", "cn_name": "Forward-Backward Traversal", "type": 1, "unique_name": "forward-backward-traversal", "alias": "", "problem_count": 5}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[1,2,-3,1]\n\n", "total_accepted": 7227, "total_submissions": 28784, "contest": "", "has_followed_by": false}, "majority-element": {"id": 46, "unique_name": "majority-element", "user_status": null, "title": "Majority Element", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 43, "description": "Given an array of integers, the majority number is the number that occurs `more than half` of the size of the array. Find it.", "notice": "You may assume that the array is non-empty and the majority number always exist in the array.", "clarification": "", "example": "Given `[1, 1, 1, 1, 2, 2, 2]`, return `1`", "challenge": "O(_n_) time and O(_1_) extra space", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 84, "title": "Single Number III", "unique_name": "single-number-iii", "level": 2, "accepted_rate": 37}, {"id": 83, "title": "Single Number II", "unique_name": "single-number-ii", "level": 2, "accepted_rate": 40}, {"id": 82, "title": "Single Number", "unique_name": "single-number", "level": 1, "accepted_rate": 47}, {"id": 48, "title": "Majority Number III", "unique_name": "majority-number-iii", "level": 2, "accepted_rate": 31}, {"id": 47, "title": "Majority Element II", "unique_name": "majority-element-ii", "level": 2, "accepted_rate": 32}, {"id": 3, "title": "Digit Counts", "unique_name": "digit-counts", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,1,1,1,2,2,2]\n\n", "total_accepted": 18262, "total_submissions": 41508, "contest": "", "has_followed_by": false}, "majority-element-ii": {"id": 47, "unique_name": "majority-element-ii", "user_status": null, "title": "Majority Element II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given an array of integers, the majority number is the number that occurs `more than 1/3` of the size of the array.\r\n\r\nFind it.", "notice": "There is only one majority number in the array.", "clarification": "", "example": "Given `[1, 2, 1, 2, 1, 3, 3]`, return `1`.", "challenge": "O(_n_) time and O(_1_) extra space.", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 84, "title": "Single Number III", "unique_name": "single-number-iii", "level": 2, "accepted_rate": 37}, {"id": 83, "title": "Single Number II", "unique_name": "single-number-ii", "level": 2, "accepted_rate": 40}, {"id": 82, "title": "Single Number", "unique_name": "single-number", "level": 1, "accepted_rate": 47}, {"id": 48, "title": "Majority Number III", "unique_name": "majority-number-iii", "level": 2, "accepted_rate": 31}, {"id": 47, "title": "Majority Element II", "unique_name": "majority-element-ii", "level": 2, "accepted_rate": 32}, {"id": 46, "title": "Majority Element", "unique_name": "majority-element", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[99,2,99,2,99,3,3]\n\n", "total_accepted": 8061, "total_submissions": 24877, "contest": "", "has_followed_by": false}, "majority-number-iii": {"id": 48, "unique_name": "majority-number-iii", "user_status": null, "title": "Majority Number III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given an array of integers and a number k, the majority number is the number that occurs `more than 1/k` of the size of the array. \r\n\r\nFind it.", "notice": "There is only one majority number in the array.", "clarification": "", "example": "Given `[3,1,2,3,2,3,3,4,4,4]` and `k=3`, return `3`.", "challenge": "<p>O(n) time and O(k) extra space</p>\r\n", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 84, "title": "Single Number III", "unique_name": "single-number-iii", "level": 2, "accepted_rate": 37}, {"id": 83, "title": "Single Number II", "unique_name": "single-number-ii", "level": 2, "accepted_rate": 40}, {"id": 82, "title": "Single Number", "unique_name": "single-number", "level": 1, "accepted_rate": 47}, {"id": 48, "title": "Majority Number III", "unique_name": "majority-number-iii", "level": 2, "accepted_rate": 31}, {"id": 47, "title": "Majority Element II", "unique_name": "majority-element-ii", "level": 2, "accepted_rate": 32}, {"id": 46, "title": "Majority Element", "unique_name": "majority-element", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[3,1,2,3,2,3,3,4,4,4]\n3\n\n", "total_accepted": 8068, "total_submissions": 25947, "contest": "", "has_followed_by": false}, "sort-letters-by-case": {"id": 49, "unique_name": "sort-letters-by-case", "user_status": null, "title": "Sort Letters by Case", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given a string which contains only letters. Sort it by lower case first and upper case second.", "notice": "It's *NOT* necessary to keep the original order of lower-case letters and upper case letters.", "clarification": "", "example": "For `\"abAcD\"`, a reasonable answer is `\"acbAD\"`", "challenge": "Do it in one-pass and in-place.", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [], "comment_count": 0, "testcase_sample": "\n\n", "total_accepted": 9680, "total_submissions": 24585, "contest": "", "has_followed_by": false}, "product-of-array-exclude-itself": {"id": 50, "unique_name": "product-of-array-exclude-itself", "user_status": null, "title": "Product of Array Exclude Itself", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 28, "description": "Given an integers array A.\r\n\r\nDefine B[i] = A[0] * ... * A[i-1] * A[i+1] * ... * A[n-1], calculate B **WITHOUT** divide operation.", "notice": "", "clarification": "", "example": "For A = `[1, 2, 3]`, return `[6, 3, 2]`.\r\n", "challenge": "", "tags": [{"id": 19, "name": "Forward-Backward Traversal", "cn_name": "Forward-Backward Traversal", "type": 1, "unique_name": "forward-backward-traversal", "alias": "", "problem_count": 5}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 1119, "title": "Maximum Product of Three Numbers", "unique_name": "maximum-product-of-three-numbers", "level": 1, "accepted_rate": 46}, {"id": 516, "title": "Paint House II", "unique_name": "paint-house-ii", "level": 3, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[0]\n\n", "total_accepted": 11353, "total_submissions": 39819, "contest": "", "has_followed_by": false}, "previous-permutation": {"id": 51, "unique_name": "previous-permutation", "user_status": null, "title": "Previous Permutation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given a list of integers, which denote a permutation.\r\n\r\nFind the previous permutation in ascending order.", "notice": "The list may contains duplicate integers.", "clarification": "", "example": "For `[1,3,2,3]`, the previous permutation is `[1,2,3,3]`\r\n\r\nFor `[1,2,3,4]`, the previous permutation is `[4,3,2,1]`", "challenge": "", "tags": [{"id": 20, "name": "Permutation", "cn_name": "Permutation", "type": 13, "unique_name": "permutation", "alias": "", "problem_count": 8}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 388, "title": "Permutation Sequence", "unique_name": "permutation-sequence", "level": 2, "accepted_rate": 29}, {"id": 197, "title": "Permutation Index", "unique_name": "permutation-index", "level": 1, "accepted_rate": 31}, {"id": 52, "title": "Next Permutation", "unique_name": "next-permutation", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1]\n\n", "total_accepted": 5423, "total_submissions": 19283, "contest": "", "has_followed_by": false}, "next-permutation": {"id": 52, "unique_name": "next-permutation", "user_status": null, "title": "Next Permutation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Given a list of integers, which denote a permutation.\r\n\r\nFind the next permutation in ascending order.\r\n", "notice": "The list may contains duplicate integers.", "clarification": "", "example": "For `[1,3,2,3]`, the next permutation is `[1,3,3,2]`\r\n\r\nFor `[4,3,2,1]`, the next permutation is `[1,2,3,4]`", "challenge": "", "tags": [{"id": 20, "name": "Permutation", "cn_name": "Permutation", "type": 13, "unique_name": "permutation", "alias": "", "problem_count": 8}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 917, "title": "Palindrome Permutation II", "unique_name": "palindrome-permutation-ii", "level": 2, "accepted_rate": 32}, {"id": 388, "title": "Permutation Sequence", "unique_name": "permutation-sequence", "level": 2, "accepted_rate": 29}, {"id": 51, "title": "Previous Permutation", "unique_name": "previous-permutation", "level": 2, "accepted_rate": 28}, {"id": 16, "title": "Permutations II", "unique_name": "permutations-ii", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[1]\n\n", "total_accepted": 9460, "total_submissions": 35816, "contest": "", "has_followed_by": false}, "reverse-words-in-a-string": {"id": 53, "unique_name": "reverse-words-in-a-string", "user_status": null, "title": "Reverse Words in a String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given an input string, reverse the string word by word.</p>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">For example,<br style=\"box-sizing: border-box;\" />\r\nGiven s = &quot;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">the sky is blue</code>&quot;,<br style=\"box-sizing: border-box;\" />\r\nreturn &quot;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">blue is sky the</code>&quot;.</p>\r\n", "notice": "", "clarification": "<ul>\r\n\t<li style=\"box-sizing: border-box; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">What constitutes a word?<br style=\"box-sizing: border-box;\" />\r\n\tA sequence of non-space characters constitutes a word.</li>\r\n\t<li style=\"box-sizing: border-box; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Could the input string contain leading or trailing spaces?<br style=\"box-sizing: border-box;\" />\r\n\tYes. However, your reversed string should not contain leading or trailing spaces.</li>\r\n\t<li style=\"box-sizing: border-box; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">How about multiple spaces between two words?<br style=\"box-sizing: border-box;\" />\r\n\tReduce them to a single space in the reversed string.</li>\r\n</ul>\r\n", "example": "", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1282, "title": "Reverse Vowels of a String", "unique_name": "reverse-vowels-of-a-string", "level": 1, "accepted_rate": 46}, {"id": 927, "title": "Reverse Words in a String II", "unique_name": "reverse-words-in-a-string-ii", "level": 2, "accepted_rate": 64}, {"id": 767, "title": "Reverse Array", "unique_name": "reverse-array", "level": 1, "accepted_rate": 52}, {"id": 36, "title": "Reverse Linked List II", "unique_name": "reverse-linked-list-ii", "level": 2, "accepted_rate": 30}, {"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "\"\"\n", "total_accepted": 15930, "total_submissions": 61908, "contest": "", "has_followed_by": false}, "string-to-integer-atoi": {"id": 54, "unique_name": "string-to-integer-atoi", "user_status": null, "title": "String to Integer (atoi)", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 14, "description": "Implement function `atoi` to convert a string to an integer.\r\n\r\nIf no valid conversion could be performed, a _zero_ value is returned. \r\n\r\nIf the correct value is out of the range of representable values, _INT_MAX_ (2147483647) or _INT_MIN_ (-2147483648) is returned.", "notice": "", "clarification": "", "example": "```\r\n\"10\" => 10\r\n\"-1\" => -1\r\n\"123123123123123\" => 2147483647\r\n\"1.0\" => 1\r\n```", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 241, "title": "String to Integer", "unique_name": "string-to-integer", "level": 0, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"10\"\n", "total_accepted": 8332, "total_submissions": 55614, "contest": "", "has_followed_by": false}, "compare-strings": {"id": 55, "unique_name": "compare-strings", "user_status": null, "title": "Compare Strings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 27, "description": "Compare two strings A and B, determine whether A contains all of the characters in B.\r\n\r\nThe characters in string A and B are all **Upper Case** letters.", "notice": "The characters of B in A are not necessary continuous or ordered. ", "clarification": "", "example": "For `A = \"ABCD\"`, `B = \"ACD\"`, return `true`.\r\n\r\nFor `A = \"ABCD\"`, `B = \"AABC\"`, return `false`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 158, "title": "Valid Anagram", "unique_name": "valid-anagram", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "\"A\"\n\"\"", "total_accepted": 19110, "total_submissions": 68285, "contest": "", "has_followed_by": false}, "two-sum": {"id": 56, "unique_name": "two-sum", "user_status": null, "title": "Two Sum", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Given an array of integers, find two numbers such that they add up to a specific target number.\r\n\r\nThe function `twoSum` should return *indices* of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are zero-based.", "notice": "You may assume that each input would have exactly one solution", "clarification": "", "example": "numbers=`[2, 7, 11, 15]`, target=`9`\r\n\r\nreturn `[0, 1]`", "challenge": "Either of the following solutions are acceptable:\r\n\r\n- O(n) Space, O(nlogn) Time\r\n- O(n) Space, O(n) Time", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}], "related_problems": [{"id": 689, "title": "Two Sum IV - Input is a BST", "unique_name": "two-sum-iv-input-is-a-bst", "level": 2, "accepted_rate": 31}, {"id": 608, "title": "Two Sum II - Input array is sorted ", "unique_name": "two-sum-ii-input-array-is-sorted", "level": 2, "accepted_rate": 49}, {"id": 610, "title": "Two Sum - Difference equals to target ", "unique_name": "two-sum-difference-equals-to-target", "level": 2, "accepted_rate": 26}, {"id": 609, "title": "Two Sum - Less than or equal to target", "unique_name": "two-sum-less-than-or-equal-to-target", "level": 2, "accepted_rate": 41}, {"id": 607, "title": "Two Sum III - Data structure design", "unique_name": "two-sum-iii-data-structure-design", "level": 1, "accepted_rate": 35}, {"id": 587, "title": "Two Sum - Unique pairs", "unique_name": "two-sum-unique-pairs", "level": 2, "accepted_rate": 35}, {"id": 533, "title": "Two Sum - Closest to target", "unique_name": "two-sum-closest-to-target", "level": 2, "accepted_rate": 44}, {"id": 443, "title": "Two Sum - Greater than target", "unique_name": "two-sum-greater-than-target", "level": 2, "accepted_rate": 39}, {"id": 382, "title": "Triangle Count", "unique_name": "triangle-count", "level": 2, "accepted_rate": 33}, {"id": 59, "title": "3Sum Closest", "unique_name": "3sum-closest", "level": 2, "accepted_rate": 32}, {"id": 58, "title": "4Sum", "unique_name": "4sum", "level": 2, "accepted_rate": 22}, {"id": 57, "title": "3Sum", "unique_name": "3sum", "level": 2, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "[2,7,11,15]\n9\n\n", "total_accepted": 31391, "total_submissions": 105723, "contest": "", "has_followed_by": false}, "3sum": {"id": 57, "unique_name": "3sum", "user_status": null, "title": "3Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 21, "description": "Given an array *S* of n integers, are there elements *a*, *b*, *c* in *S* such that `a + b + c = 0`? Find all unique triplets in the array which gives the sum of zero.", "notice": "Elements in a triplet (a,b,c) must be in non-descending order. (ie, a \u2264 b \u2264 c)\r\n\r\nThe solution set must not contain duplicate triplets.", "clarification": "", "example": "For example, given array S = `{-1 0 1 2 -1 -4}`, A solution set is:\r\n\r\n\t(-1, 0, 1)\r\n\t(-1, -1, 2)\r\n", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 102, "name": "Works Applications", "cn_name": "Works Applications", "type": 3, "unique_name": "works-applications", "alias": "", "problem_count": 3}], "related_problems": [{"id": 918, "title": "3Sum Smaller", "unique_name": "3sum-smaller", "level": 2, "accepted_rate": 46}, {"id": 382, "title": "Triangle Count", "unique_name": "triangle-count", "level": 2, "accepted_rate": 33}, {"id": 59, "title": "3Sum Closest", "unique_name": "3sum-closest", "level": 2, "accepted_rate": 32}, {"id": 58, "title": "4Sum", "unique_name": "4sum", "level": 2, "accepted_rate": 22}, {"id": 56, "title": "Two Sum", "unique_name": "two-sum", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[2,7,11,15]\n\n", "total_accepted": 24855, "total_submissions": 115420, "contest": "", "has_followed_by": false}, "4sum": {"id": 58, "unique_name": "4sum", "user_status": null, "title": "4Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 22, "description": "Given an array *S* of *n* integers, are there elements *a*, *b*, *c*, and *d* in *S* such that *a + b + c + d = target*?\r\n\r\nFind all unique quadruplets in the array which gives the sum of target.", "notice": "Elements in a quadruplet (*a,b,c,d*) must be in non-descending order. (ie, *a  \u2264 b \u2264 c \u2264 d*)\r\nThe solution set must not contain duplicate quadruplets.", "clarification": "", "example": "Given array S = `{1 0 -1 0 -2 2}`, and target = `0`. A solution set is:\r\n\r\n```\r\n(-1, 0, 0, 1)\r\n(-2, -1, 1, 2)\r\n(-2, 0, 0, 2)\r\n```", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 57, "title": "3Sum", "unique_name": "3sum", "level": 2, "accepted_rate": 21}, {"id": 56, "title": "Two Sum", "unique_name": "two-sum", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[2,7,11,15]\n3\n\n", "total_accepted": 9973, "total_submissions": 43898, "contest": "", "has_followed_by": false}, "3sum-closest": {"id": 59, "unique_name": "3sum-closest", "user_status": null, "title": "3Sum Closest", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given an array S of *n* integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. ", "notice": "You may assume that each input would have exactly one solution.\r\n", "clarification": "", "example": "For example, given array *S* = `[-1 2 1 -4]`, and target = `1`. The sum that is closest to the target is `2`. *(-1 + 2 + 1 = 2)*.", "challenge": "O(n^2) time, O(1) extra space", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 918, "title": "3Sum Smaller", "unique_name": "3sum-smaller", "level": 2, "accepted_rate": 46}, {"id": 533, "title": "Two Sum - Closest to target", "unique_name": "two-sum-closest-to-target", "level": 2, "accepted_rate": 44}, {"id": 57, "title": "3Sum", "unique_name": "3sum", "level": 2, "accepted_rate": 21}, {"id": 56, "title": "Two Sum", "unique_name": "two-sum", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[2,7,11,15]\n3\n\n", "total_accepted": 15019, "total_submissions": 46491, "contest": "", "has_followed_by": false}, "search-insert-position": {"id": 60, "unique_name": "search-insert-position", "user_status": null, "title": "Search Insert Position", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\r\n\r\nYou may assume **NO** duplicates in the array.\r\n\r\n", "notice": "", "clarification": "", "example": "`[1,3,5,6]`, 5 \u2192 2\r\n\r\n`[1,3,5,6]`, 2 \u2192 1\r\n\r\n`[1,3,5,6]`, 7 \u2192 4\r\n\r\n`[1,3,5,6]`, 0 \u2192 0", "challenge": "O(log(n)) time", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[]\n9\n\n", "total_accepted": 24712, "total_submissions": 83900, "contest": "", "has_followed_by": false}, "search-for-a-range": {"id": 61, "unique_name": "search-for-a-range", "user_status": null, "title": "Search for a Range", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a sorted array of *n* integers, find the starting and ending position of a given target value.\r\n\r\nIf the target is not found in the array, return `[-1, -1]`.", "notice": "", "clarification": "", "example": "Given `[5, 7, 7, 8, 8, 10]` and target value `8`,\r\nreturn `[3, 4]`.", "challenge": "O(log *n*) time.", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 665, "title": "Range Sum Query 2D - Immutable", "unique_name": "range-sum-query-2d-immutable", "level": 2, "accepted_rate": 29}, {"id": 462, "title": "Total Occurrence of Target", "unique_name": "total-occurrence-of-target", "level": 1, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[]\n9\n", "total_accepted": 20344, "total_submissions": 78311, "contest": "", "has_followed_by": false}, "search-in-rotated-sorted-array": {"id": 62, "unique_name": "search-in-rotated-sorted-array", "user_status": null, "title": "Search in Rotated Sorted Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Suppose a sorted array is rotated at some pivot unknown to you beforehand.\r\n\r\n(i.e., `0 1 2 4 5 6 7` might become `4 5 6 7 0 1 2`).\r\n\r\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\r\n\r\nYou may assume no duplicate exists in the array.", "notice": "", "clarification": "", "example": "For `[4, 5, 1, 2, 3]` and `target=1`, return `2`.\r\n\r\nFor `[4, 5, 1, 2, 3]` and `target=0`, return `-1`.", "challenge": "O(logN) time", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 63, "title": "Search in Rotated Sorted Array II", "unique_name": "search-in-rotated-sorted-array-ii", "level": 2, "accepted_rate": 40}, {"id": 28, "title": "Search a 2D Matrix ", "unique_name": "search-a-2d-matrix", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[]\n9\n\n", "total_accepted": 29688, "total_submissions": 96134, "contest": "", "has_followed_by": false}, "search-in-rotated-sorted-array-ii": {"id": 63, "unique_name": "search-in-rotated-sorted-array-ii", "user_status": null, "title": "Search in Rotated Sorted Array II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "Follow up for [Search in Rotated Sorted Array](http://www.lintcode.com/problem/search-in-rotated-sorted-array/ \"Search in Rotated Sorted Array\"):\r\n\r\nWhat if **duplicates** are allowed?\r\n\r\nWould this affect the run-time complexity? How and why?\r\n\r\nWrite a function to determine if a given target is in the array.", "notice": "", "clarification": "", "example": "Given `[1, 1, 0, 1, 1, 1]` and target = `0`, return `true`.\r\nGiven `[1, 1, 1, 1, 1, 1]` and target = `0`, return `false`.", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 160, "title": "Find Minimum in Rotated Sorted Array II", "unique_name": "find-minimum-in-rotated-sorted-array-ii", "level": 2, "accepted_rate": 34}, {"id": 159, "title": "Find Minimum in Rotated Sorted Array", "unique_name": "find-minimum-in-rotated-sorted-array", "level": 2, "accepted_rate": 40}, {"id": 63, "title": "Search in Rotated Sorted Array II", "unique_name": "search-in-rotated-sorted-array-ii", "level": 2, "accepted_rate": 40}, {"id": 62, "title": "Search in Rotated Sorted Array", "unique_name": "search-in-rotated-sorted-array", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[]\n1\n\n", "total_accepted": 10283, "total_submissions": 25543, "contest": "", "has_followed_by": false}, "merge-sorted-array": {"id": 64, "unique_name": "merge-sorted-array", "user_status": null, "title": "Merge Sorted Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 34, "description": "Given two sorted integer arrays A and B, merge B into A as one sorted array.", "notice": "You may assume that A has enough space (size that is greater or equal to *m* + *n*) to hold additional elements from B. The number of elements initialized in A and B are *m* and *n* respectively.", "clarification": "", "example": "A = `[1, 2, 3, empty, empty]`, B = `[4, 5]`\r\n\r\nAfter merge, A will be filled as `[1, 2, 3, 4, 5]`", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 839, "title": "Merge Two Sorted Interval Lists", "unique_name": "merge-two-sorted-interval-lists", "level": 1, "accepted_rate": 33}, {"id": 212, "title": "Space Replacement", "unique_name": "space-replacement", "level": 1, "accepted_rate": 18}, {"id": 6, "title": "Merge Two Sorted Arrays", "unique_name": "merge-two-sorted-arrays", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[1,2,3]\n3\n[4,5]\n2\n", "total_accepted": 21477, "total_submissions": 62704, "contest": "", "has_followed_by": false}, "median-of-two-sorted-arrays": {"id": 65, "unique_name": "median-of-two-sorted-arrays", "user_status": null, "title": "Median of two Sorted Arrays", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 26, "description": "There are two sorted arrays _A_ and _B_ of size _m_ and _n_ respectively. Find the **median** of the two sorted arrays.", "notice": "", "clarification": "", "example": "Given `A=[1,2,3,4,5,6]` and `B=[2,3,4,5]`, the median is `3.5`.\r\n\r\nGiven `A=[1,2,3]` and `B=[4,5]`, the median is `3`.", "challenge": "The overall run time complexity should be `O(log (m+n))`.", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}], "related_problems": [{"id": 931, "title": "Median of K Sorted Arrays", "unique_name": "median-of-k-sorted-arrays", "level": 2, "accepted_rate": 22}, {"id": 81, "title": "Find Median from Data Stream", "unique_name": "find-median-from-data-stream", "level": 3, "accepted_rate": 31}, {"id": 80, "title": "Median", "unique_name": "median", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5,6]\n[2,3,4,5]\n", "total_accepted": 16870, "total_submissions": 63527, "contest": "", "has_followed_by": false}, "binary-tree-preorder-traversal": {"id": 66, "unique_name": "binary-tree-preorder-traversal", "user_status": null, "title": "Binary Tree Preorder Traversal", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 43, "description": "Given a binary tree, return the preorder traversal of its nodes' values.", "notice": "", "clarification": "", "example": "Given:\r\n\r\n        1\r\n       / \\\r\n      2   3\r\n     / \\\r\n    4   5\r\n\r\nreturn `[1,2,4,5,3]`.\r\n\r\n", "challenge": "Can you do it without recursion?", "tags": [{"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 53, "name": "Non Recursion", "cn_name": "Non Recursion", "type": 13, "unique_name": "non-recursion", "alias": "", "problem_count": 5}], "related_problems": [{"id": 68, "title": "Binary Tree Postorder Traversal", "unique_name": "binary-tree-postorder-traversal", "level": 1, "accepted_rate": 44}, {"id": 67, "title": "Binary Tree Inorder Traversal", "unique_name": "binary-tree-inorder-traversal", "level": 1, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 42603, "total_submissions": 99047, "contest": "", "has_followed_by": false}, "binary-tree-inorder-traversal": {"id": 67, "unique_name": "binary-tree-inorder-traversal", "user_status": null, "title": "Binary Tree Inorder Traversal", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 44, "description": "<p><span style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given a binary tree, return the&nbsp;</span><i style=\"box-sizing: border-box; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">inorder</i><span style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;traversal of its nodes&#39; values.</span></p>\r\n", "notice": "", "clarification": "", "example": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given binary tree&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">{1,#,2,3}</code>,</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n</pre>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;</p>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">return&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">[1,3,2]</code>.</p>\r\n", "challenge": "<p>Can you do it without recursion?</p>\r\n", "tags": [{"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}], "related_problems": [{"id": 915, "title": "Inorder Predecessor in BST", "unique_name": "inorder-predecessor-in-bst", "level": 2, "accepted_rate": 48}, {"id": 902, "title": "Kth Smallest Element in a BST", "unique_name": "kth-smallest-element-in-a-bst", "level": 2, "accepted_rate": 51}, {"id": 901, "title": "Closest Binary Search Tree Value II", "unique_name": "closest-binary-search-tree-value-ii", "level": 3, "accepted_rate": 39}, {"id": 66, "title": "Binary Tree Preorder Traversal", "unique_name": "binary-tree-preorder-traversal", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 34945, "total_submissions": 78909, "contest": "", "has_followed_by": false}, "binary-tree-postorder-traversal": {"id": 68, "unique_name": "binary-tree-postorder-traversal", "user_status": null, "title": "Binary Tree Postorder Traversal", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 44, "description": "<p><span style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given a binary tree, return the&nbsp;</span><i style=\"box-sizing: border-box; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">postorder</i><span style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;traversal of its nodes&#39; values.</span></p>\r\n", "notice": "", "clarification": "", "example": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given binary tree&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">{1,#,2,3}</code>,</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n</pre>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;</p>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">return&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">[3,2,1]</code>.</p>\r\n", "challenge": "<p>Can you do it without recursion?</p>\r\n", "tags": [{"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}], "related_problems": [{"id": 66, "title": "Binary Tree Preorder Traversal", "unique_name": "binary-tree-preorder-traversal", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 25082, "total_submissions": 56752, "contest": "", "has_followed_by": false}, "binary-tree-level-order-traversal": {"id": 69, "unique_name": "binary-tree-level-order-traversal", "user_status": null, "title": "Binary Tree Level Order Traversal", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "<p><span style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given a binary tree, return the&nbsp;</span><i style=\"box-sizing: border-box; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">level order</i><span style=\"font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;traversal of its nodes&#39; values. (ie, from left to right, level by level).</span></p>\r\n", "notice": "", "clarification": "", "example": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given binary tree&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">{3,9,20,#,#,15,7}</code>,</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;</p>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">return its level order traversal as:</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n[\r\n  [3],\r\n  [9,20],\r\n  [15,7]\r\n]</pre>\r\n", "challenge": "Challenge 1: Using only 1 queue to implement it.\r\n\r\nChallenge 2: Use DFS algorithm to do it.\r\n", "tags": [{"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}], "related_problems": [{"id": 797, "title": "Reach a Number", "unique_name": "reach-a-number", "level": 1, "accepted_rate": 30}, {"id": 651, "title": "Binary Tree Vertical Order Traversal", "unique_name": "binary-tree-vertical-order-traversal", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 32229, "total_submissions": 91182, "contest": "", "has_followed_by": false}, "binary-tree-level-order-traversal-ii": {"id": 70, "unique_name": "binary-tree-level-order-traversal-ii", "user_status": null, "title": "Binary Tree Level Order Traversal II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given a binary tree, return the&nbsp;<i style=\"box-sizing: border-box;\">bottom-up level order</i>&nbsp;traversal of its nodes&#39; values. (ie, from left to right, level by level from leaf to root).</p>\r\n", "notice": "", "clarification": "", "example": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given binary tree&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">{3,9,20,#,#,15,7}</code>,</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;</p>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">return its bottom-up level order traversal as:</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n[\r\n  [15,7],\r\n  [9,20],\r\n  [3]\r\n]</pre>\r\n", "challenge": "", "tags": [{"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 618, "title": "Search Graph Nodes", "unique_name": "search-graph-nodes", "level": 2, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 12266, "total_submissions": 29045, "contest": "", "has_followed_by": false}, "binary-tree-zigzag-level-order-traversal": {"id": 71, "unique_name": "binary-tree-zigzag-level-order-traversal", "user_status": null, "title": "Binary Tree Zigzag Level Order Traversal", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given a binary tree, return the&nbsp;<i style=\"box-sizing: border-box;\">zigzag level order</i>&nbsp;traversal of its nodes&#39; values. (ie, from left to right, then right to left for the next level and alternate between).</p>\r\n", "notice": "", "clarification": "", "example": "<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">Given binary tree&nbsp;<code style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);\">{3,9,20,#,#,15,7}</code>,</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">&nbsp;</p>\r\n\r\n<p style=\"box-sizing: border-box; margin: 0px 0px 10px; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 30px;\">return its zigzag level order traversal as:</p>\r\n\r\n<pre style=\"box-sizing: border-box; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; line-height: 1.428571429; word-break: break-all; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(245, 245, 245);\">\r\n[\r\n  [3],\r\n  [20,9],\r\n  [15,7]\r\n]</pre>\r\n", "challenge": "", "tags": [{"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 12125, "total_submissions": 40821, "contest": "", "has_followed_by": false}, "construct-binary-tree-from-inorder-and-postorder-traversal": {"id": 72, "unique_name": "construct-binary-tree-from-inorder-and-postorder-traversal", "user_status": null, "title": "Construct Binary Tree from Inorder and Postorder Traversal", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given inorder and postorder traversal of a tree, construct the binary tree.", "notice": "You may assume that duplicates do not exist in the tree.", "clarification": "", "example": "Given inorder `[1,2,3]` and postorder `[1,3,2]`, return a tree:\r\n\r\n\t  2\r\n\t / \\\r\n\t1   3\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [], "comment_count": 0, "testcase_sample": "[]\n[]", "total_accepted": 6654, "total_submissions": 20962, "contest": "", "has_followed_by": false}, "construct-binary-tree-from-preorder-and-inorder-traversal": {"id": 73, "unique_name": "construct-binary-tree-from-preorder-and-inorder-traversal", "user_status": null, "title": "Construct Binary Tree from Preorder and Inorder Traversal", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given preorder and inorder traversal of a tree, construct the binary tree.", "notice": "You may assume that duplicates do not exist in the tree.\r\n", "clarification": "", "example": "Given in-order `[1,2,3]` and pre-order `[2,1,3]`, return a tree:\r\n\r\n\t  2\r\n\t / \\\r\n\t1   3\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[]\n[]", "total_accepted": 11220, "total_submissions": 38246, "contest": "", "has_followed_by": false}, "first-bad-version": {"id": 74, "unique_name": "first-bad-version", "user_status": null, "title": "First Bad Version", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "The code base version is an integer start from 1 to n. One day, someone committed a bad version in the code case, so it caused this version and the following versions are all failed in the unit tests. Find the first bad version.\r\n\r\nYou can call `isBadVersion` to help you determine which version is the first bad one. The details interface can be found in the code's annotation part.", "notice": "Please read the annotation in code area to get the correct way to call isBadVersion in different language. For example, Java is `SVNRepo.isBadVersion(v)`", "clarification": "", "example": "Given n = `5`:\r\n\r\n    isBadVersion(3) -> false\r\n    isBadVersion(5) -> true\r\n    isBadVersion(4) -> true\r\n\r\nHere we are 100% sure that the 4th version is the first bad version.\r\n", "challenge": "You should call *isBadVersion* as few as possible. ", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 662, "title": "Guess Number Higher or Lower", "unique_name": "guess-number-higher-or-lower", "level": 1, "accepted_rate": 27}, {"id": 399, "title": "Nuts & Bolts Problem ", "unique_name": "nuts-bolts-problem", "level": 2, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "n = 1 , first bad version is 1\n", "total_accepted": 25038, "total_submissions": 70839, "contest": "", "has_followed_by": false}, "find-peak-element": {"id": 75, "unique_name": "find-peak-element", "user_status": null, "title": "Find Peak Element", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 48, "description": "There is an integer array which has the following features:\r\n\r\n- The numbers in adjacent positions are different.\r\n- A[0] < A[1] && A[A.length - 2] > A[A.length - 1].\r\n\r\nWe define a position P is a peak if:\r\n\r\n    A[P] > A[P-1] && A[P] > A[P+1]\r\n\r\nFind a peak element in this array. Return the index of the peak.", "notice": "- It's guaranteed the array has at least one peak.\r\n- The array may contain multiple peeks, find any of them.\r\n- The array has at least 3 numbers in it.", "clarification": "", "example": "Given `[1, 2, 1, 3, 4, 5, 7, 6]`\r\n\r\nReturn index `1` (which is number 2) or `6` (which is number 7)", "challenge": "Time complexity O(logN)", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 585, "title": "Maximum Number in Mountain Sequence", "unique_name": "maximum-number-in-mountain-sequence", "level": 2, "accepted_rate": 48}, {"id": 390, "title": "Find Peak Element II", "unique_name": "find-peak-element-ii", "level": 3, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[1,2,1,3,4,5,7,6]\n", "total_accepted": 33588, "total_submissions": 69608, "contest": "", "has_followed_by": false}, "longest-increasing-subsequence": {"id": 76, "unique_name": "longest-increasing-subsequence", "user_status": null, "title": "Longest Increasing Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "<p>Given a sequence of integers, find the longest increasing subsequence (LIS).</p>\r\n\r\n<p>You code should return the length of the LIS.</p>\r\n", "notice": "", "clarification": "<p>What&#39;s the definition of longest increasing subsequence?</p>\r\n\r\n  * The longest increasing subsequence problem is to find a subsequence of a given sequence in which the subsequence&#39;s elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible. This subsequence is not necessarily contiguous, or unique.\r\n\r\n  * [https://en.wikipedia.org/wiki/Longest_increasing_subsequence](\"https://en.wikipedia.org/wiki/Longest_increasing_subsequence\")", "example": "For `[5, 4, 1, 2, 3]`, the LIS is `[1, 2, 3]`, return `3`\r\nFor `[4, 2, 4, 5, 3, 7]`, the LIS is `[2, 4, 5, 7]`, return `4`\r\n", "challenge": "<p>Time complexity O(n^2) or O(nlogn)</p>\r\n", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 1093, "title": "Number of Longest Increasing Subsequence", "unique_name": "number-of-longest-increasing-subsequence", "level": 2, "accepted_rate": 39}, {"id": 602, "title": "Russian Doll Envelopes", "unique_name": "russian-doll-envelopes", "level": 3, "accepted_rate": 19}, {"id": 603, "title": "Largest Divisible Subset", "unique_name": "largest-divisible-subset", "level": 2, "accepted_rate": 35}, {"id": 622, "title": "Frog Jump", "unique_name": "frog-jump", "level": 3, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 21419, "total_submissions": 68050, "contest": "", "has_followed_by": false}, "longest-common-subsequence": {"id": 77, "unique_name": "longest-common-subsequence", "user_status": null, "title": "Longest Common Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given two strings, find the longest common subsequence (*LCS*).\r\n\r\nYour code should return the length of *LCS*.\r\n\r\n", "notice": "", "clarification": "What's the definition of Longest Common Subsequence?\r\n\r\n- <https://en.wikipedia.org/wiki/Longest_common_subsequence_problem>\r\n- <http://baike.baidu.com/view/2020307.htm>\r\n\r\n", "example": "For `\"ABCD\"` and `\"EDCA\"`, the *LCS* is `\"A\"` (or `\"D\"`, `\"C\"`), return `1`.\r\n\r\nFor `\"ABCD\"` and `\"EACB\"`, the *LCS* is `\"AC\"`, return `2`.\r\n", "challenge": "", "tags": [{"id": 15, "name": "Longest Common Subsequence", "cn_name": "Longest Common Subsequence", "type": 11, "unique_name": "longest-common-subsequence", "alias": "", "problem_count": 2}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 762, "title": "Longest Common Subsequence II", "unique_name": "longest-common-subsequence-ii", "level": 3, "accepted_rate": 39}, {"id": 581, "title": "Longest Repeating Subsequence", "unique_name": "longest-repeating-subsequence", "level": 2, "accepted_rate": 37}, {"id": 119, "title": "Edit Distance", "unique_name": "edit-distance", "level": 2, "accepted_rate": 31}, {"id": 79, "title": "Longest Common Substring", "unique_name": "longest-common-substring", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "\"\"\n\"\"", "total_accepted": 18520, "total_submissions": 46626, "contest": "", "has_followed_by": false}, "longest-common-prefix": {"id": 78, "unique_name": "longest-common-prefix", "user_status": null, "title": "Longest Common Prefix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given k strings, find the longest common prefix (_LCP_).\r\n", "notice": "", "clarification": "", "example": "For strings `\"ABCD\"`, `\"ABEF\"` and `\"ACEF\"`, the LCP is `\"A\"`\r\n\r\nFor strings `\"ABCDEFG\"`, `\"ABCEFG\"` and `\"ABCEFA\"`, the LCP is `\"ABC\"`", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"ABCD\",\"ABEF\",\"ACEF\"]\n", "total_accepted": 12485, "total_submissions": 43085, "contest": "", "has_followed_by": false}, "longest-common-substring": {"id": 79, "unique_name": "longest-common-substring", "user_status": null, "title": "Longest Common Substring", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given two strings, find the longest common substring.\r\n\r\nReturn the length of it.", "notice": "The characters in **substring** should occur continuously in original string. This is different with **subsequence**.", "clarification": "", "example": "Given A = `\"ABCD\"`, B = `\"CBCE\"`, return `2`.", "challenge": "O(n x m) time and memory.", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 762, "title": "Longest Common Subsequence II", "unique_name": "longest-common-subsequence-ii", "level": 3, "accepted_rate": 39}, {"id": 77, "title": "Longest Common Subsequence", "unique_name": "longest-common-subsequence", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"\"\n\"\"", "total_accepted": 20253, "total_submissions": 63226, "contest": "", "has_followed_by": false}, "median": {"id": 80, "unique_name": "median", "user_status": null, "title": "Median", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given a unsorted array with integers, find the median of it. \r\n\r\nA median is the middle number of the array after it is sorted. \r\n\r\nIf there are even numbers in the array, return the `N/2`-th number after sorted.", "notice": "", "clarification": "", "example": "Given `[4, 5, 1, 2, 3]`, return `3`.\r\n\r\nGiven `[7, 9, 4, 5]`, return `5`.\r\n", "challenge": "<p>O(n) time.</p>\r\n", "tags": [{"id": 21, "name": "Quick Sort", "cn_name": "Quick Sort", "type": 12, "unique_name": "quick-sort", "alias": "", "problem_count": 8}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 81, "title": "Find Median from Data Stream", "unique_name": "find-median-from-data-stream", "level": 3, "accepted_rate": 31}, {"id": 65, "title": "Median of two Sorted Arrays", "unique_name": "median-of-two-sorted-arrays", "level": 3, "accepted_rate": 26}, {"id": 5, "title": "Kth Largest Element", "unique_name": "kth-largest-element", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[4,5,1,2,3]\n", "total_accepted": 13236, "total_submissions": 51919, "contest": "", "has_followed_by": false}, "find-median-from-data-stream": {"id": 81, "unique_name": "find-median-from-data-stream", "user_status": null, "title": "Find Median from Data Stream", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 31, "description": "Numbers keep coming, return the median of numbers at every time a new number added.\r\n", "notice": "", "clarification": "What's the definition of Median?\r\n- Median is the number that in the middle of a sorted array. If there are n numbers in a sorted array A, the median is `A[(n - 1) / 2]`. For example, if `A=[1,2,3]`, median is `2`. If `A=[1,19]`, median is `1`.", "example": "For numbers coming list: `[1, 2, 3, 4, 5]`, return `[1, 1, 2, 2, 3]`.\r\n\r\nFor numbers coming list: `[4, 5, 1, 3, 2, 6, 0]`, return `[4, 4, 4, 3, 3, 3, 3]`.\r\n\r\nFor numbers coming list: `[2, 20, 100]`, return `[2, 2, 20]`.", "challenge": "Total run time in O(_nlogn_).", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 97, "name": "Data Stream", "cn_name": "Data Stream", "type": 1, "unique_name": "data-stream", "alias": "", "problem_count": 9}, {"id": 30, "name": "Priority Queue", "cn_name": "Priority Queue", "type": 21, "unique_name": "priority-queue", "alias": "", "problem_count": 13}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 685, "title": "First Unique Number In Stream", "unique_name": "first-unique-number-in-stream", "level": 2, "accepted_rate": 25}, {"id": 360, "title": "Sliding Window Median", "unique_name": "sliding-window-median", "level": 3, "accepted_rate": 18}, {"id": 642, "title": "Moving Average from Data Stream", "unique_name": "moving-average-from-data-stream", "level": 1, "accepted_rate": 36}, {"id": 80, "title": "Median", "unique_name": "median", "level": 1, "accepted_rate": 25}, {"id": 65, "title": "Median of two Sorted Arrays", "unique_name": "median-of-two-sorted-arrays", "level": 3, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5]\n", "total_accepted": 10716, "total_submissions": 34527, "contest": "", "has_followed_by": false}, "single-number": {"id": 82, "unique_name": "single-number", "user_status": null, "title": "Single Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 47, "description": "Given `2*n + 1` numbers, every numbers occurs twice except one, find it.\r\n", "notice": "", "clarification": "", "example": "Given `[1,2,2,1,3,4,3]`, return `4`\r\n", "challenge": "One-pass, constant extra space.\r\n", "tags": [{"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}], "related_problems": [{"id": 824, "title": "Single Number IV", "unique_name": "single-number-iv", "level": 2, "accepted_rate": 33}, {"id": 633, "title": "Find the Duplicate Number", "unique_name": "find-the-duplicate-number", "level": 2, "accepted_rate": 35}, {"id": 84, "title": "Single Number III", "unique_name": "single-number-iii", "level": 2, "accepted_rate": 37}, {"id": 83, "title": "Single Number II", "unique_name": "single-number-ii", "level": 2, "accepted_rate": 40}, {"id": 48, "title": "Majority Number III", "unique_name": "majority-number-iii", "level": 2, "accepted_rate": 31}, {"id": 47, "title": "Majority Element II", "unique_name": "majority-element-ii", "level": 2, "accepted_rate": 32}, {"id": 46, "title": "Majority Element", "unique_name": "majority-element", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[1,1,2,2,3,4,4]\n", "total_accepted": 15923, "total_submissions": 33520, "contest": "", "has_followed_by": false}, "single-number-ii": {"id": 83, "unique_name": "single-number-ii", "user_status": null, "title": "Single Number II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "Given `3*n + 1` numbers, every numbers occurs triple times except one, find it.\r\n", "notice": "", "clarification": "", "example": "Given `[1,1,2,3,3,3,2,2,4,1]` return `4`\r\n", "challenge": "One-pass, constant extra space.", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [{"id": 824, "title": "Single Number IV", "unique_name": "single-number-iv", "level": 2, "accepted_rate": 33}, {"id": 84, "title": "Single Number III", "unique_name": "single-number-iii", "level": 2, "accepted_rate": 37}, {"id": 82, "title": "Single Number", "unique_name": "single-number", "level": 1, "accepted_rate": 47}, {"id": 48, "title": "Majority Number III", "unique_name": "majority-number-iii", "level": 2, "accepted_rate": 31}, {"id": 47, "title": "Majority Element II", "unique_name": "majority-element-ii", "level": 2, "accepted_rate": 32}, {"id": 46, "title": "Majority Element", "unique_name": "majority-element", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[1,1,2,3,3,3,2,2,4,1]\n", "total_accepted": 8283, "total_submissions": 20348, "contest": "", "has_followed_by": false}, "single-number-iii": {"id": 84, "unique_name": "single-number-iii", "user_status": null, "title": "Single Number III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "Given `2*n + 2` numbers, every numbers occurs twice except two, find them.", "notice": "", "clarification": "", "example": "Given `[1,2,2,3,4,4,5,3]` return `1` and `5`\r\n", "challenge": "O(n) time, O(1) extra space.\r\n", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 824, "title": "Single Number IV", "unique_name": "single-number-iv", "level": 2, "accepted_rate": 33}, {"id": 83, "title": "Single Number II", "unique_name": "single-number-ii", "level": 2, "accepted_rate": 40}, {"id": 82, "title": "Single Number", "unique_name": "single-number", "level": 1, "accepted_rate": 47}, {"id": 48, "title": "Majority Number III", "unique_name": "majority-number-iii", "level": 2, "accepted_rate": 31}, {"id": 47, "title": "Majority Element II", "unique_name": "majority-element-ii", "level": 2, "accepted_rate": 32}, {"id": 46, "title": "Majority Element", "unique_name": "majority-element", "level": 1, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[1,2,3,3,2,4,1,5]\n", "total_accepted": 6518, "total_submissions": 17604, "contest": "", "has_followed_by": false}, "insert-node-in-a-binary-search-tree": {"id": 85, "unique_name": "insert-node-in-a-binary-search-tree", "user_status": null, "title": "Insert Node in a Binary Search Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 42, "description": "Given a binary search tree  and a new tree node, insert the node into the tree. You should keep the tree still be a valid binary search tree.", "notice": "You can assume there is no duplicate values in this tree + node.", "clarification": "", "example": "Given binary search tree as follow, after Insert node 6, the tree should be:\r\n\r\n\t  2             2\r\n\t / \\           / \\\r\n\t1   4   -->   1   4\r\n\t   /             / \\ \r\n\t  3             3   6", "challenge": "Can you do it without recursion?", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 701, "title": "Trim a Binary Search Tree", "unique_name": "trim-a-binary-search-tree", "level": 2, "accepted_rate": 70}, {"id": 219, "title": "Insert Node in Sorted Linked List", "unique_name": "insert-node-in-sorted-linked-list", "level": 0, "accepted_rate": 22}, {"id": 87, "title": "Remove Node in Binary Search Tree", "unique_name": "remove-node-in-binary-search-tree", "level": 3, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "{}\n1\n", "total_accepted": 19327, "total_submissions": 45405, "contest": "", "has_followed_by": false}, "binary-search-tree-iterator": {"id": 86, "unique_name": "binary-search-tree-iterator", "user_status": null, "title": "Binary Search Tree Iterator", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 37, "description": "Design an iterator over a binary search tree with the following rules:\r\n\r\n- Elements are visited in ascending order (i.e. an in-order traversal)\r\n- `next()` and `hasNext()` queries run in O(*1*) time in **average**.", "notice": "", "clarification": "", "example": "For the following binary search tree, in-order traversal by using iterator is `[1, 6, 10, 11, 12]`\r\n\r\n\t   10\r\n\t /    \\\r\n\t1      11\r\n\t \\       \\\r\n\t  6       12", "challenge": "Extra memory usage O(h), h is the height of the tree.\r\n\r\n**Super Star**: Extra memory usage O(1)", "tags": [{"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 53, "name": "Non Recursion", "cn_name": "Non Recursion", "type": 13, "unique_name": "non-recursion", "alias": "", "problem_count": 5}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [{"id": 915, "title": "Inorder Predecessor in BST", "unique_name": "inorder-predecessor-in-bst", "level": 2, "accepted_rate": 48}, {"id": 541, "title": "Zigzag Iterator II", "unique_name": "zigzag-iterator-ii", "level": 2, "accepted_rate": 36}, {"id": 540, "title": "Zigzag Iterator", "unique_name": "zigzag-iterator", "level": 2, "accepted_rate": 47}, {"id": 448, "title": "Inorder Successor in BST", "unique_name": "inorder-successor-in-bst", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "{-1}\n", "total_accepted": 14139, "total_submissions": 37218, "contest": "", "has_followed_by": false}, "remove-node-in-binary-search-tree": {"id": 87, "unique_name": "remove-node-in-binary-search-tree", "user_status": null, "title": "Remove Node in Binary Search Tree", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given a root of Binary Search Tree with unique value for each node.  Remove the node with given value. If there is no such a node with given value in the binary search tree, do nothing. You should keep the tree still a binary search tree after removal.", "notice": "", "clarification": "", "example": "Given binary search tree:\r\n\r\n```\r\n    5\r\n   / \\\r\n  3   6\r\n / \\\r\n2   4\r\n```\r\n\r\nRemove 3, you can either return:\r\n\r\n```\r\n    5\r\n   / \\\r\n  2   6\r\n   \\\r\n    4\r\n```\r\n\r\nor \r\n\r\n```\r\n    5\r\n   / \\\r\n  4   6\r\n /\r\n2\r\n```\r\n", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 85, "title": "Insert Node in a Binary Search Tree", "unique_name": "insert-node-in-a-binary-search-tree", "level": 1, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "{}\n10\n", "total_accepted": 9954, "total_submissions": 36372, "contest": "", "has_followed_by": false}, "lowest-common-ancestor-of-a-binary-tree": {"id": 88, "unique_name": "lowest-common-ancestor-of-a-binary-tree", "user_status": null, "title": "Lowest Common Ancestor of a Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "Given the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.\r\n\r\nThe lowest common ancestor is the node with largest depth which is the ancestor of both nodes.", "notice": "Assume two nodes are exist in tree.", "clarification": "", "example": "For the following binary tree:\r\n\r\n      4\r\n     / \\\r\n    3   7\r\n       / \\\r\n      5   6\r\n\r\nLCA(3, 5) = `4`\r\n\r\nLCA(5, 6) = `7`\r\n\r\nLCA(6, 7) = `7`", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [{"id": 578, "title": "Lowest Common Ancestor III", "unique_name": "lowest-common-ancestor-iii", "level": 2, "accepted_rate": 26}, {"id": 474, "title": "Lowest Common Ancestor II", "unique_name": "lowest-common-ancestor-ii", "level": 1, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "{1}\n1\n1\n", "total_accepted": 23514, "total_submissions": 58026, "contest": "", "has_followed_by": false}, "k-sum": {"id": 89, "unique_name": "k-sum", "user_status": null, "title": "k Sum", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given *n* distinct positive integers, integer *k* (*k* <= *n*) and a number *target*.\r\n\r\nFind *k* numbers where sum is target. Calculate how many solutions there are?\r\n", "notice": "", "clarification": "", "example": "Given `[1,2,3,4]`, k = `2`, target = `5`.\r\n\r\nThere are `2` solutions: `[1,4]` and `[2,3]`.\r\n\r\nReturn `2`.\r\n", "challenge": "", "tags": [{"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 90, "title": "k Sum II", "unique_name": "k-sum-ii", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[1,2,3,4]\n2\n5", "total_accepted": 9538, "total_submissions": 35202, "contest": "", "has_followed_by": false}, "k-sum-ii": {"id": 90, "unique_name": "k-sum-ii", "user_status": null, "title": "k Sum II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Given n unique integers, number k (1<=k<=n)  and target. \r\n\r\nFind all possible k integers where their sum is target.", "notice": "", "clarification": "", "example": "Given `[1,2,3,4]`, k = `2`, target = `5`. Return:\r\n\r\n```\r\n[\r\n  [1,4],\r\n  [2,3]\r\n]\r\n```", "challenge": "", "tags": [{"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 89, "title": "k Sum", "unique_name": "k-sum", "level": 3, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[1,2,3,4]\n2\n5", "total_accepted": 6646, "total_submissions": 18692, "contest": "", "has_followed_by": false}, "minimum-adjustment-cost": {"id": 91, "unique_name": "minimum-adjustment-cost", "user_status": null, "title": "Minimum Adjustment Cost", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given an integer array, adjust each integers so that the difference of every adjacent integers are not greater than a given number target.\r\n\r\nIf the array before adjustment is **A**, the array after adjustment is **B**, you should minimize the sum of `|A[i]-B[i]|`\r\n", "notice": "You can assume each number in the array is a positive integer and not greater than `100`.\r\n", "clarification": "", "example": "Given `[1,4,2,3]` and target = `1`, one of the solutions is `[2,3,2,3]`, the adjustment cost is `2` and it's minimal. \r\n\r\nReturn `2`.\r\n\r\n", "challenge": "", "tags": [{"id": 45, "name": "Backpack", "cn_name": "Backpack", "type": 11, "unique_name": "backpack", "alias": "", "problem_count": 14}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 752, "title": "Rogue Knight Sven", "unique_name": "rogue-knight-sven", "level": 2, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[1,4,2,3]\n1\r\n", "total_accepted": 7664, "total_submissions": 23721, "contest": "", "has_followed_by": false}, "backpack": {"id": 92, "title": "Backpack", "unique_name": "backpack", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [{"id": 20, "title": "Weekly Mock Interview Contest #10.2 (For Backpack Special)", "cover": "https://lintcode-media.s3.amazonaws.com/backpack.png", "start_at": "2018-03-25T01:30:00Z"}], "no_permission": true}, "balanced-binary-tree": {"id": 93, "unique_name": "balanced-binary-tree", "user_status": null, "title": "Balanced Binary Tree ", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Given a binary tree, determine if it is height-balanced.\r\n\r\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.", "notice": "", "clarification": "", "example": "Given binary tree A = `{3,9,20,#,#,15,7}`, B = `{3,#,20,15,7}`\r\n```\r\nA)  3            B)    3 \r\n   / \\                  \\\r\n  9  20                 20\r\n    /  \\                / \\\r\n   15   7              15  7\r\n```\r\nThe binary tree A is a height-balanced binary tree, but B is not.", "challenge": "", "tags": [{"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 467, "title": "Complete Binary Tree", "unique_name": "complete-binary-tree", "level": 1, "accepted_rate": 27}, {"id": 95, "title": "Validate Binary Search Tree", "unique_name": "validate-binary-search-tree", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 28691, "total_submissions": 74426, "contest": "", "has_followed_by": false}, "binary-tree-maximum-path-sum": {"id": 94, "unique_name": "binary-tree-maximum-path-sum", "user_status": null, "title": "Binary Tree Maximum Path Sum ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a binary tree, find the maximum path sum.\r\n\r\nThe path may start and end at any node in the tree.", "notice": "", "clarification": "", "example": "Given the below binary tree:\r\n\r\n\t  1\r\n\t / \\\r\n\t2   3\r\n\r\nreturn `6`.", "challenge": "", "tags": [{"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 1353, "title": "Sum Root to Leaf Numbers", "unique_name": "sum-root-to-leaf-numbers", "level": 2, "accepted_rate": 60}, {"id": 863, "title": "Binary Tree Path Sum IV", "unique_name": "binary-tree-path-sum-iv", "level": 2, "accepted_rate": 55}, {"id": 475, "title": "Binary Tree Maximum Path Sum II", "unique_name": "binary-tree-maximum-path-sum-ii", "level": 2, "accepted_rate": 44}, {"id": 246, "title": "Binary Tree Path Sum II", "unique_name": "binary-tree-path-sum-ii", "level": 1, "accepted_rate": 28}, {"id": 110, "title": "Minimum Path Sum ", "unique_name": "minimum-path-sum", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "{2}\n", "total_accepted": 16699, "total_submissions": 64631, "contest": "", "has_followed_by": false}, "validate-binary-search-tree": {"id": 95, "unique_name": "validate-binary-search-tree", "user_status": null, "title": "Validate Binary Search Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given a binary tree, determine if it is a valid binary search tree (BST).\r\n\r\nAssume a BST is defined as follows:\r\n\r\n- The left subtree of a node contains only nodes with keys **less than** the node's key.\r\n- The right subtree of a node contains only nodes with keys **greater than** the node's key.\r\n- Both the left and right subtrees must also be binary search trees.\r\n- A single node tree is a BST", "notice": "", "clarification": "", "example": "An example:\r\n\r\n\t  2\r\n\t / \\\r\n\t1   4\r\n\t   / \\\r\n\t  3   5\r\n\t   \r\nThe above binary tree is serialized as `{2,1,4,#,#,3,5}` (in level order).", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 701, "title": "Trim a Binary Search Tree", "unique_name": "trim-a-binary-search-tree", "level": 2, "accepted_rate": 70}, {"id": 691, "title": "Recover Binary Search Tree", "unique_name": "recover-binary-search-tree", "level": 2, "accepted_rate": 20}, {"id": 448, "title": "Inorder Successor in BST", "unique_name": "inorder-successor-in-bst", "level": 2, "accepted_rate": 35}, {"id": 93, "title": "Balanced Binary Tree ", "unique_name": "balanced-binary-tree", "level": 1, "accepted_rate": 38}], "comment_count": 0, "testcase_sample": "{-1}\n", "total_accepted": 30142, "total_submissions": 130569, "contest": "", "has_followed_by": false}, "partition-list": {"id": 96, "unique_name": "partition-list", "user_status": null, "title": "Partition List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\r\n\r\nYou should preserve the original relative order of the nodes in each of the two partitions.", "notice": "", "clarification": "", "example": "Given `1->4->3->2->5->2->null` and x = `3`,\r\nreturn `1->2->2->4->3->5->null`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 1292, "title": "Odd Even Linked List", "unique_name": "odd-even-linked-list", "level": 2, "accepted_rate": 59}, {"id": 31, "title": "Partition Array", "unique_name": "partition-array", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "null\n0\n", "total_accepted": 17347, "total_submissions": 55612, "contest": "", "has_followed_by": false}, "maximum-depth-of-binary-tree": {"id": 97, "unique_name": "maximum-depth-of-binary-tree", "user_status": null, "title": "Maximum Depth of Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 54, "description": "Given a binary tree, find its maximum depth.\r\n\r\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.", "notice": "", "clarification": "", "example": "Given a binary tree as follow:\r\n\r\n\t  1\r\n\t / \\ \r\n\t2   3\r\n\t   / \\\r\n\t  4   5  \r\n\r\nThe maximum depth is `3`.", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}], "related_problems": [{"id": 650, "title": "Find Leaves of Binary Tree", "unique_name": "find-leaves-of-binary-tree", "level": 2, "accepted_rate": 46}, {"id": 155, "title": "Minimum Depth of Binary Tree", "unique_name": "minimum-depth-of-binary-tree", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "{}\n", "total_accepted": 33688, "total_submissions": 62077, "contest": "", "has_followed_by": false}, "sort-list": {"id": 98, "unique_name": "sort-list", "user_status": null, "title": "Sort List ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Sort a linked list in O(*n* log *n*) time using constant space complexity.\r\n", "notice": "", "clarification": "", "example": "Given `1->3->2->null`, sort it to `1->2->3->null`.\r\n", "challenge": "Solve it by merge sort & quick sort separately.", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 173, "title": "Insertion Sort List", "unique_name": "insertion-sort-list", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "null", "total_accepted": 19783, "total_submissions": 65379, "contest": "", "has_followed_by": false}, "reorder-list": {"id": 99, "unique_name": "reorder-list", "user_status": null, "title": "Reorder List ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a singly linked list L: L<sub>0</sub> \u2192 L<sub>1</sub> \u2192 \u2026 \u2192 L<sub>n-1</sub> \u2192 L<sub>n</sub>\r\n\r\nreorder it to: L<sub>0</sub> \u2192 L<sub>n</sub> \u2192 L<sub>1</sub> \u2192 L<sub>n-1</sub> \u2192 L<sub>2</sub> \u2192 L<sub>n-2</sub> \u2192 \u2026", "notice": "", "clarification": "", "example": "Given `1->2->3->4->null`, reorder it to `1->4->2->3->null`.", "challenge": "Can you do this *in-place* without altering the nodes' values?", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 1292, "title": "Odd Even Linked List", "unique_name": "odd-even-linked-list", "level": 2, "accepted_rate": 59}], "comment_count": 0, "testcase_sample": "null", "total_accepted": 12961, "total_submissions": 52172, "contest": "", "has_followed_by": false}, "remove-duplicates-from-sorted-array": {"id": 100, "unique_name": "remove-duplicates-from-sorted-array", "user_status": null, "title": "Remove Duplicates from Sorted Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.\r\n\r\nDo not allocate extra space for another array, you must do this in place with constant memory.\r\n", "notice": "", "clarification": "", "example": "Given input array `A = [1,1,2]`,\r\n\r\nYour function should return `length = 2`, and A is now `[1,2]`.", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 172, "title": "Remove Element", "unique_name": "remove-element", "level": 1, "accepted_rate": 31}, {"id": 101, "title": "Remove Duplicates from Sorted Array II", "unique_name": "remove-duplicates-from-sorted-array-ii", "level": 1, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 18213, "total_submissions": 57910, "contest": "", "has_followed_by": false}, "remove-duplicates-from-sorted-array-ii": {"id": 101, "unique_name": "remove-duplicates-from-sorted-array-ii", "user_status": null, "title": "Remove Duplicates from Sorted Array II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "<p style=\"line-height: 30px;\">Follow up for \"Remove Duplicates\":<br>What if duplicates are allowed at most&nbsp;<i>twice</i>?</p><p style=\"line-height: 30px;\">For example,<br>Given sorted array A =&nbsp;<code style=\"font-size: 13px;\">[1,1,1,2,2,3]</code>,</p><p style=\"line-height: 30px;\">Your function should return length =&nbsp;<code style=\"font-size: 13px;\">5</code>, and A is now&nbsp;<code style=\"font-size: 13px;\">[1,1,2,2,3]</code>.</p>", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 172, "title": "Remove Element", "unique_name": "remove-element", "level": 1, "accepted_rate": 31}, {"id": 100, "title": "Remove Duplicates from Sorted Array", "unique_name": "remove-duplicates-from-sorted-array", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 10971, "total_submissions": 35861, "contest": "", "has_followed_by": false}, "linked-list-cycle": {"id": 102, "unique_name": "linked-list-cycle", "user_status": null, "title": "Linked List Cycle ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "<p style=\"line-height: 30px;\">Given a linked list, determine if it has a cycle in it.</p><p style=\"line-height: 30px;\"><br></p>", "notice": "", "clarification": "", "example": "<p>Given -21-&gt;10-&gt;4-&gt;5, tail connects to node index 1, return true</p>", "challenge": "<p><span style=\"line-height: 30px;\">Follow up:</span><br style=\"line-height: 30px;\"><span style=\"line-height: 30px;\">Can you solve it without using extra space?</span><br></p>", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1229, "title": "Circular Array Loop", "unique_name": "circular-array-loop", "level": 2, "accepted_rate": 28}, {"id": 380, "title": "Intersection of Two Linked Lists", "unique_name": "intersection-of-two-linked-lists", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "null\nno cycle\n", "total_accepted": 18797, "total_submissions": 40794, "contest": "", "has_followed_by": false}, "linked-list-cycle-ii": {"id": 103, "unique_name": "linked-list-cycle-ii", "user_status": null, "title": "Linked List Cycle II ", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 37, "description": "Given a linked list, return the node where the cycle begins. \r\n\r\nIf there is no cycle, return `null`.", "notice": "", "clarification": "", "example": "Given `-21->10->4->5`, tail connects to node index 1\u00ef\u00bc\u0152return `10`", "challenge": "Follow up:\r\n\r\nCan you solve it without using extra space?", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 1229, "title": "Circular Array Loop", "unique_name": "circular-array-loop", "level": 2, "accepted_rate": 28}, {"id": 633, "title": "Find the Duplicate Number", "unique_name": "find-the-duplicate-number", "level": 2, "accepted_rate": 35}, {"id": 380, "title": "Intersection of Two Linked Lists", "unique_name": "intersection-of-two-linked-lists", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "null\nno cycle\n", "total_accepted": 12519, "total_submissions": 33608, "contest": "", "has_followed_by": false}, "merge-k-sorted-lists": {"id": 104, "unique_name": "merge-k-sorted-lists", "user_status": null, "title": "Merge K Sorted Lists ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Merge *k* sorted linked lists and return it as one sorted list.\r\n\r\nAnalyze and describe its complexity.", "notice": "", "clarification": "", "example": "Given lists:\r\n\r\n    [\r\n      2->4->null,\r\n      null,\r\n      -1->null\r\n    ],\r\n\r\nreturn `-1->2->4->null`.\r\n", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 30, "name": "Priority Queue", "cn_name": "Priority Queue", "type": 21, "unique_name": "priority-queue", "alias": "", "problem_count": 13}, {"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}], "related_problems": [{"id": 839, "title": "Merge Two Sorted Interval Lists", "unique_name": "merge-two-sorted-interval-lists", "level": 1, "accepted_rate": 33}, {"id": 791, "title": "Merge Number", "unique_name": "merge-number", "level": 2, "accepted_rate": 39}, {"id": 486, "title": "Merge K Sorted Arrays", "unique_name": "merge-k-sorted-arrays", "level": 2, "accepted_rate": 29}, {"id": 6, "title": "Merge Two Sorted Arrays", "unique_name": "merge-two-sorted-arrays", "level": 1, "accepted_rate": 36}, {"id": 4, "title": "Ugly Number II", "unique_name": "ugly-number-ii", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 23973, "total_submissions": 79507, "contest": "", "has_followed_by": false}, "copy-list-with-random-pointer": {"id": 105, "unique_name": "copy-list-with-random-pointer", "user_status": null, "title": "Copy List with Random Pointer", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "<p style=\"line-height: 30px;\">A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p><p style=\"line-height: 30px;\">Return a deep copy of the list.</p>", "notice": "", "clarification": "", "example": "", "challenge": "Could you solve it with O(1) space?", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 375, "title": "Clone Binary Tree", "unique_name": "clone-binary-tree", "level": 1, "accepted_rate": 49}], "comment_count": 0, "testcase_sample": "-1->null, [null]\n", "total_accepted": 23284, "total_submissions": 66267, "contest": "", "has_followed_by": false}, "convert-sorted-list-to-binary-search-tree": {"id": 106, "unique_name": "convert-sorted-list-to-binary-search-tree", "user_status": null, "title": "Convert Sorted List to Binary Search Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\r\n", "notice": "", "clarification": "", "example": "                   2\r\n    1->2->3  =>   / \\\r\n                 1   3", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}], "related_problems": [{"id": 453, "title": "Flatten Binary Tree to Linked List", "unique_name": "flatten-binary-tree-to-linked-list", "level": 1, "accepted_rate": 34}, {"id": 177, "title": "Convert Sorted Array to Binary Search Tree With  Minimal Height ", "unique_name": "convert-sorted-array-to-binary-search-tree-with-minimal-height", "level": 1, "accepted_rate": 32}, {"id": 378, "title": "Convert Binary Search Tree to Doubly Linked List", "unique_name": "convert-binary-search-tree-to-doubly-linked-list", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "null", "total_accepted": 13505, "total_submissions": 43588, "contest": "", "has_followed_by": false}, "word-break": {"id": 107, "unique_name": "word-break", "user_status": null, "title": "Word Break", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 14, "description": "Given a string s and a dictionary of words dict, determine if s can be break into a space-separated sequence of one or more dictionary words.", "notice": "", "clarification": "", "example": "Given s = `\"lintcode\"`, dict = `[\"lint\", \"code\"]`.\r\n\r\nReturn true because **\"lintcode\"** can be break as `\"lint code\"`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 104, "name": "Coupang", "cn_name": "Coupang", "type": 3, "unique_name": "coupang", "alias": "", "problem_count": 8}, {"id": 108, "name": "Square", "cn_name": "Square", "type": 3, "unique_name": "square", "alias": "", "problem_count": 3}], "related_problems": [{"id": 680, "title": "Split String", "unique_name": "split-string", "level": 1, "accepted_rate": 29}, {"id": 582, "title": "Word Break II", "unique_name": "word-break-ii", "level": 3, "accepted_rate": 22}], "comment_count": 0, "testcase_sample": "\"a\"\n[\"a\"]\n", "total_accepted": 16604, "total_submissions": 110962, "contest": "", "has_followed_by": false}, "palindrome-partitioning-ii": {"id": 108, "unique_name": "palindrome-partitioning-ii", "user_status": null, "title": "Palindrome Partitioning II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given a string *s*, cut *s* into some substrings such that every substring is a palindrome. \r\n\r\nReturn the **minimum** cuts needed for a palindrome partitioning of *s*.\r\n", "notice": "", "clarification": "", "example": "Given s = `\"aab\"`,\r\n\r\nReturn `1` since the palindrome partitioning [\"aa\", \"b\"] could be produced using *1* cut.\r\n", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 893, "title": "Longest Palindromic Substring II", "unique_name": "longest-palindromic-substring-ii", "level": 3, "accepted_rate": 63}, {"id": 507, "title": "Wiggle Sort II", "unique_name": "wiggle-sort-ii", "level": 2, "accepted_rate": 25}, {"id": 136, "title": "Palindrome Partitioning", "unique_name": "palindrome-partitioning", "level": 2, "accepted_rate": 29}, {"id": 200, "title": "Longest Palindromic Substring", "unique_name": "longest-palindromic-substring", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "\"a\"\n", "total_accepted": 12885, "total_submissions": 54870, "contest": "", "has_followed_by": false}, "triangle": {"id": 109, "unique_name": "triangle", "user_status": null, "title": "Triangle", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 27, "description": "<p><span style=\"line-height: 30px;\">Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</span><br></p>", "notice": "Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.", "clarification": "", "example": "Given the following triangle:\r\n```\r\n[\r\n     [2],\r\n    [3,4],\r\n   [6,5,7],\r\n  [4,1,8,3]\r\n]\r\n```\r\nThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 110, "title": "Minimum Path Sum ", "unique_name": "minimum-path-sum", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[[-10]]\n", "total_accepted": 20140, "total_submissions": 74293, "contest": "", "has_followed_by": false}, "minimum-path-sum": {"id": 110, "unique_name": "minimum-path-sum", "user_status": null, "title": "Minimum Path Sum ", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "<p><span style=\"line-height: 30px;\">Given a&nbsp;</span><b><i style=\"line-height: 30px;\">m</i><span style=\"line-height: 30px;\">&nbsp;x&nbsp;</span><i style=\"line-height: 30px;\">n</i></b><span style=\"line-height: 30px;\">&nbsp;grid filled with non-negative numbers, find a path from top left to bottom right which&nbsp;</span><i style=\"line-height: 30px;\"><b>minimizes</b></i><span style=\"line-height: 30px;\">&nbsp;the sum of all numbers along its path.</span><br></p>", "notice": "<p><span style=\"line-height: 30px;\">You can only move either down or right at any point in time.</span><br></p>", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 1058, "title": "Cherry Pickup", "unique_name": "cherry-pickup", "level": 3, "accepted_rate": 35}, {"id": 794, "title": "Sliding Puzzle II", "unique_name": "sliding-puzzle-ii", "level": 3, "accepted_rate": 37}, {"id": 109, "title": "Triangle", "unique_name": "triangle", "level": 1, "accepted_rate": 27}, {"id": 94, "title": "Binary Tree Maximum Path Sum ", "unique_name": "binary-tree-maximum-path-sum", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[[0]]\n", "total_accepted": 16123, "total_submissions": 45027, "contest": "", "has_followed_by": false}, "climbing-stairs": {"id": 111, "unique_name": "climbing-stairs", "user_status": null, "title": "Climbing Stairs", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "<p style=\"line-height: 30px;\">You are climbing a stair case. It takes&nbsp;<i><b>n</b></i>&nbsp;steps to reach to the top.</p><p style=\"line-height: 30px;\">Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>", "notice": "", "clarification": "", "example": "<p>Given an example n=3 , 1+1+1=2+1=1+2=3</p><p>return 3</p>", "challenge": "", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 366, "title": "Fibonacci", "unique_name": "fibonacci", "level": 0, "accepted_rate": 25}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "1\n\n", "total_accepted": 22411, "total_submissions": 70384, "contest": "", "has_followed_by": false}, "remove-duplicates-from-sorted-list": {"id": 112, "unique_name": "remove-duplicates-from-sorted-list", "user_status": null, "title": "Remove Duplicates from Sorted List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "<p>\r\nGiven a sorted linked list, delete all duplicates such that each element appear only <i>once</i>.\r\n</p>\r\n<p>\r\n</p>", "notice": "", "clarification": "", "example": "<p>Given <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br>\r\nGiven <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.\r\n</p>", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 217, "title": "Remove Duplicates from Unsorted List", "unique_name": "remove-duplicates-from-unsorted-list", "level": 1, "accepted_rate": 37}, {"id": 452, "title": "Remove Linked List Elements", "unique_name": "remove-linked-list-elements", "level": 0, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "null", "total_accepted": 15888, "total_submissions": 41226, "contest": "", "has_followed_by": false}, "remove-duplicates-from-sorted-list-ii": {"id": 113, "unique_name": "remove-duplicates-from-sorted-list-ii", "user_status": null, "title": "Remove Duplicates from Sorted List II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <i>distinct</i> numbers from the original list.\r\n</p>", "notice": "", "clarification": "", "example": "<p>Given <code>1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</code>, return <code>1-&gt;2-&gt;5</code>.<br>\r\nGiven <code>1-&gt;1-&gt;1-&gt;2-&gt;3</code>, return <code>2-&gt;3</code>.\r\n</p>", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 217, "title": "Remove Duplicates from Unsorted List", "unique_name": "remove-duplicates-from-unsorted-list", "level": 1, "accepted_rate": 37}, {"id": 452, "title": "Remove Linked List Elements", "unique_name": "remove-linked-list-elements", "level": 0, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "null", "total_accepted": 13630, "total_submissions": 47603, "contest": "", "has_followed_by": false}, "unique-paths": {"id": 114, "unique_name": "unique-paths", "user_status": null, "title": "Unique Paths", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "A robot is located at the top-left corner of a *m* x *n* grid.\r\n\r\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.\r\n\r\nHow many possible unique paths are there?", "notice": "*m* and *n* will be at most 100.\r\n", "clarification": "", "example": "Given m = `3` and n = `3`, return `6`.\r\nGiven m = `4` and n = `5`, return `35`.", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1543, "title": "Unique Path IV", "unique_name": "unique-path-iv", "level": 2, "accepted_rate": 49}, {"id": 795, "title": "4-Way Unique Paths", "unique_name": "4-way-unique-paths", "level": 3, "accepted_rate": 70}, {"id": 679, "title": "Unique Paths III", "unique_name": "unique-paths-iii", "level": 3, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "1\n3", "total_accepted": 20271, "total_submissions": 48624, "contest": "", "has_followed_by": false}, "unique-paths-ii": {"id": 115, "unique_name": "unique-paths-ii", "user_status": null, "title": "Unique Paths II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "<p>Follow up for \"Unique Paths\":</p>\r\n\r\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\r\n\r\n<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>", "notice": "<p><i>m</i> and <i>n</i> will be at most 100.</p>", "clarification": "", "example": "<p>For example,<br>\r\n</p><p>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>\r\n<pre>[\r\n  [0,0,0],\r\n  [0,1,0],\r\n  [0,0,0]\r\n]\r\n</pre>\r\n<p>The total number of unique paths is <code>2</code>.</p>", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 796, "title": "Open the Lock", "unique_name": "open-the-lock", "level": 3, "accepted_rate": 49}, {"id": 795, "title": "4-Way Unique Paths", "unique_name": "4-way-unique-paths", "level": 3, "accepted_rate": 70}, {"id": 679, "title": "Unique Paths III", "unique_name": "unique-paths-iii", "level": 3, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "[[0]]", "total_accepted": 16729, "total_submissions": 55875, "contest": "", "has_followed_by": false}, "jump-game": {"id": 116, "unique_name": "jump-game", "user_status": null, "title": "Jump Game", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 38, "description": "<p>\r\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\r\n</p>\r\n<p>\r\nEach element in the array represents your maximum jump length at that position. \r\n</p>\r\n<p>\r\nDetermine if you are able to reach the last index.\r\n</p>", "notice": "This problem have two method which is `Greedy` and `Dynamic Programming`. \r\n\r\nThe time complexity of `Greedy` method is `O(n)`.\r\n\r\nThe time complexity of `Dynamic` Programming method is `O(n^2)`. \r\n\r\nWe manually set the small data set to allow you pass the test in both ways. This is just to let you learn how to use this problem in dynamic programming ways. If you finish it in dynamic programming ways, you can try greedy method to make it accept again. \r\n", "clarification": "", "example": "<p>A = <code>[2,3,1,1,4]</code>, return <code>true</code>.\r\n\r\n</p><p>\r\nA = <code>[3,2,1,0,4]</code>, return <code>false</code>.\r\n</p>", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 752, "title": "Rogue Knight Sven", "unique_name": "rogue-knight-sven", "level": 2, "accepted_rate": 37}, {"id": 117, "title": "Jump Game II", "unique_name": "jump-game-ii", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[0,8,2,0,9]", "total_accepted": 21505, "total_submissions": 56218, "contest": "", "has_followed_by": false}, "jump-game-ii": {"id": 117, "unique_name": "jump-game-ii", "user_status": null, "title": "Jump Game II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "<p>\r\nGiven an array of non-negative integers, you are initially positioned at the first index of the array.\r\n</p>\r\n<p>\r\nEach element in the array represents your maximum jump length at that position. \r\n</p>\r\n<p>\r\nYour goal is to reach the last index in the minimum number of jumps.\r\n</p>", "notice": "", "clarification": "", "example": "<p>Given array A = <code>[2,3,1,1,4]</code>\r\n\r\n</p><p>\r\nThe minimum number of jumps to reach the last index is <code>2</code>. (Jump <code>1</code> step from index 0 to 1, then <code>3</code> steps to the last index.)\r\n</p>", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 116, "title": "Jump Game", "unique_name": "jump-game", "level": 2, "accepted_rate": 38}], "comment_count": 0, "testcase_sample": "[13,52,42,21,58]", "total_accepted": 15100, "total_submissions": 42077, "contest": "", "has_followed_by": false}, "distinct-subsequences": {"id": 118, "unique_name": "distinct-subsequences", "user_status": null, "title": "Distinct Subsequences ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given a string **S** and a string **T**, count the number of distinct subsequences of **T** in **S**.\r\n\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `\"ACE\"` is a subsequence of `\"ABCDE\"` while `\"AEC\"` is not).", "notice": "", "clarification": "", "example": "Given S = `\"rabbbit\"`, T = `\"rabbit\"`, return `3`.", "challenge": "Do it in O(n<sup>2</sup>) time and O(n) memory. \r\n\r\nO(n<sup>2</sup>) memory is also acceptable if you do not know how to optimize memory.", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 29, "title": "Interleaving String", "unique_name": "interleaving-string", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "\"abcd\"\n\"\"\n", "total_accepted": 12374, "total_submissions": 37252, "contest": "", "has_followed_by": false}, "edit-distance": {"id": 119, "unique_name": "edit-distance", "user_status": null, "title": "Edit Distance", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given two words *word1* and *word2*, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)\r\n\r\nYou have the following 3 operations permitted on a word:\r\n\r\n- Insert a character\r\n- Delete a character\r\n- Replace a character", "notice": "", "clarification": "", "example": "Given word1 = `\"mart\"` and word2 = `\"karma\"`, return `3`.\r\n", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 640, "title": "One Edit Distance", "unique_name": "one-edit-distance", "level": 2, "accepted_rate": 30}, {"id": 623, "title": "K Edit Distance", "unique_name": "k-edit-distance", "level": 3, "accepted_rate": 30}, {"id": 77, "title": "Longest Common Subsequence", "unique_name": "longest-common-subsequence", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"\"\n\"\"\n", "total_accepted": 14130, "total_submissions": 44592, "contest": "", "has_followed_by": false}, "word-ladder": {"id": 120, "unique_name": "word-ladder", "user_status": null, "title": "Word Ladder", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "<p>\r\nGiven two words (<i>start</i> and <i>end</i>), and a dictionary, find the length of shortest transformation sequence from <i>start</i> to <i>end</i>, such that:\r\n</p>\r\n<ol><li>Only one letter can be changed at a time</li><li>Each intermediate word must exist in the dictionary</li></ol>", "notice": "<ul><li>Return 0 if there is no such transformation sequence.</li><li>All words have the same length.</li><li>All words contain only lowercase alphabetic characters.</li></ul>", "clarification": "", "example": "<p>\r\nGiven:<br>\r\n<i>start</i> = <code>\"hit\"</code><br>\r\n<i>end</i> = <code>\"cog\"</code><br>\r\n<i>dict</i> = <code>[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]</code><br>\r\n</p>\r\n<p>\r\nAs one shortest transformation is <code>\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\"</code>,<br>\r\nreturn its length <code>5</code>.\r\n</p>", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 121, "title": "Word Ladder II", "unique_name": "word-ladder-ii", "level": 3, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "\"a\"\n\"c\"\n[\"a\",\"b\",\"c\"]", "total_accepted": 17189, "total_submissions": 74298, "contest": "", "has_followed_by": false}, "word-ladder-ii": {"id": 121, "unique_name": "word-ladder-ii", "user_status": null, "title": "Word Ladder II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 21, "description": "<p>\r\nGiven two words (<i>start</i> and <i>end</i>), and a dictionary, find all shortest transformation sequence(s) from <i>start</i> to <i>end</i>, such that:\r\n</p>\r\n<ol><li>Only one letter can be changed at a time</li><li>Each intermediate word must exist in the dictionary</li></ol>", "notice": "<ul><li>All words have the same length.</li><li>All words contain only lowercase alphabetic characters.</li></ul>", "clarification": "", "example": "<p>\r\nGiven:<br>\r\n<i>start</i> = <code>\"hit\"</code><br>\r\n<i>end</i> = <code>\"cog\"</code><br>\r\n<i>dict</i> = <code>[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]</code><br>\r\n</p>\r\n<p>\r\nReturn<br>\r\n</p><pre>  [\r\n    [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\r\n    [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\r\n  ]\r\n</pre>", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 790, "title": "Parser", "unique_name": "parser", "level": 2, "accepted_rate": 27}, {"id": 120, "title": "Word Ladder", "unique_name": "word-ladder", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"a\"\n\"c\"\n[\"a\",\"b\",\"c\"]", "total_accepted": 14381, "total_submissions": 67504, "contest": "", "has_followed_by": false}, "largest-rectangle-in-histogram": {"id": 122, "unique_name": "largest-rectangle-in-histogram", "user_status": null, "title": "Largest Rectangle in Histogram", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 28, "description": "Given *n* non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\r\n\r\n![histogram](https://lintcode-media.s3.amazonaws.com/problem/histogram1.png \"Histogram\")\r\n\r\nAbove is a histogram where width of each bar is 1, given height = `[2,1,5,6,2,3]`.\r\n\r\n![histogram](https://lintcode-media.s3.amazonaws.com/problem/histogram_area.png \"Histogram\")\r\n\r\nThe largest rectangle is shown in the shaded area, which has area = `10` unit.", "notice": "", "clarification": "", "example": "<p><span style=\"line-height: 30px;\">Given height =&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">[2,1,5,6,2,3]</code><span style=\"line-height: 30px;\">,</span><br style=\"line-height: 30px;\"><span style=\"line-height: 30px;\">return&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">10</code><span style=\"line-height: 30px;\">.</span><br></p>", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 510, "title": "Maximal Rectangle", "unique_name": "maximal-rectangle", "level": 3, "accepted_rate": 27}, {"id": 126, "title": "Max Tree", "unique_name": "max-tree", "level": 3, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 12521, "total_submissions": 43953, "contest": "", "has_followed_by": false}, "word-search": {"id": 123, "unique_name": "word-search", "user_status": null, "title": "Word Search ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "<p style=\"line-height: 30px;\">Given a 2D board and a word, find if the word exists in the grid.</p><p style=\"line-height: 30px;\">The word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>", "notice": "", "clarification": "", "example": "<p style=\"line-height: 30px;\">Given&nbsp;<span style=\"font-weight: 700;\">board</span>&nbsp;=</p><pre>[\r\n  \"ABCE\",\r\n  \"SFCS\",\r\n  \"ADEE\"\r\n]\r\n</pre><p><span style=\"font-weight: 700; line-height: 30px;\">word</span><span style=\"line-height: 30px;\">&nbsp;=&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">\"ABCCED\"</code><span style=\"line-height: 30px;\">, -&gt; returns&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">true</code><span style=\"line-height: 30px;\">,</span><br style=\"line-height: 30px;\"><span style=\"font-weight: 700; line-height: 30px;\">word</span><span style=\"line-height: 30px;\">&nbsp;=&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">\"SEE\"</code><span style=\"line-height: 30px;\">, -&gt; returns&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">true</code><span style=\"line-height: 30px;\">,</span><br style=\"line-height: 30px;\"><span style=\"font-weight: 700; line-height: 30px;\">word</span><span style=\"line-height: 30px;\">&nbsp;=&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">\"ABCB\"</code><span style=\"line-height: 30px;\">, -&gt; returns&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">false</code><span style=\"line-height: 30px;\">.</span><br></p>", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"ABCE\",\"SFCS\",\"ADEE\"]\n\"ABCCED\"\n", "total_accepted": 10823, "total_submissions": 41034, "contest": "", "has_followed_by": false}, "longest-consecutive-sequence": {"id": 124, "unique_name": "longest-consecutive-sequence", "user_status": null, "title": "Longest Consecutive Sequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\r\n</p>", "notice": "", "clarification": "<p>Your algorithm should run in O(<i>n</i>) complexity.\r\n</p>", "example": "<p>Given <code>[100, 4, 200, 1, 3, 2]</code>,<br>\r\nThe longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Return its length: <code>4</code>.\r\n</p>", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 619, "title": "Binary Tree Longest Consecutive Sequence III", "unique_name": "binary-tree-longest-consecutive-sequence-iii", "level": 2, "accepted_rate": 39}, {"id": 595, "title": "Binary Tree Longest Consecutive Sequence", "unique_name": "binary-tree-longest-consecutive-sequence", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "[0]", "total_accepted": 12202, "total_submissions": 34429, "contest": "", "has_followed_by": false}, "backpack-ii": {"id": 125, "title": "Backpack II", "unique_name": "backpack-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [{"id": 20, "title": "Weekly Mock Interview Contest #10.2 (For Backpack Special)", "cover": "https://lintcode-media.s3.amazonaws.com/backpack.png", "start_at": "2018-03-25T01:30:00Z"}], "no_permission": true}, "max-tree": {"id": 126, "title": "Max Tree", "unique_name": "max-tree", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "topological-sorting": {"id": 127, "unique_name": "topological-sorting", "user_status": null, "title": "Topological Sorting", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given an directed graph, a topological order of the graph nodes is defined as follow:\r\n\r\n- For each directed edge `A -> B` in graph, A must before B in the order list.\r\n- The first node in the order can be any node in the graph with no nodes direct to it.\r\n\r\nFind any topological order for the given graph.", "notice": "You can assume that there is at least one topological order in the graph.", "clarification": "[Learn more about representation of graphs](http://www.lintcode.com/help/graph \"Graph example\")", "example": "For graph as follow: \r\n\r\n![picture](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcThE9AgZZszyhwe0o9qpp3VyizdIj9kWwMY50HiQEysXvkSLsoZ \"picture\")\r\n\r\n\r\nThe topological order can be:\r\n\r\n    [0, 1, 2, 3, 4, 5]\r\n    [0, 2, 3, 1, 5, 4]\r\n    ...", "challenge": "Can you do it in both BFS and DFS?", "tags": [{"id": 37, "name": "Geeks for Geeks", "cn_name": "Geeks for Geeks", "type": 4, "unique_name": "geeks-for-geeks", "alias": "", "problem_count": 1}, {"id": 80, "name": "Topological Sort", "cn_name": "Topological Sort", "type": 1, "unique_name": "topological-sort", "alias": "", "problem_count": 7}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 815, "title": "Course Schedule IV", "unique_name": "course-schedule-iv", "level": 3, "accepted_rate": 50}, {"id": 615, "title": "Course Schedule", "unique_name": "course-schedule", "level": 2, "accepted_rate": 25}, {"id": 616, "title": "Course Schedule II", "unique_name": "course-schedule-ii", "level": 2, "accepted_rate": 23}, {"id": 605, "title": "Sequence Reconstruction", "unique_name": "sequence-reconstruction", "level": 2, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "{0,1,2,3,4#1,3,4#2,1,4#3,4#4}\n", "total_accepted": 19709, "total_submissions": 60096, "contest": "", "has_followed_by": false}, "hash-function": {"id": 128, "unique_name": "hash-function", "user_status": null, "title": "Hash Function", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 21, "description": "<p>In data structure Hash, hash function is used to convert a string(or any other type) into an integer smaller than hash size and bigger or equal to zero. The objective of designing a hash function is to \"hash\" the key as unreasonable as possible. A good hash function can avoid collision as less as possible. A widely used hash function algorithm is using a magic number 33, consider any string as a 33 based big integer like follow:</p><p>hashcode(\"abcd\") = (ascii(a) * 33<sup>3</sup> +&nbsp;<span style=\"line-height: 1.42857143;\">ascii(</span><span style=\"line-height: 1.42857143;\">b) * 33</span><sup>2</sup><span style=\"line-height: 1.42857143;\"> +&nbsp;</span><span style=\"line-height: 1.42857143;\">ascii(</span><span style=\"line-height: 1.42857143;\">c) *33 +&nbsp;</span><span style=\"line-height: 1.42857143;\">ascii(</span><span style=\"line-height: 1.42857143;\">d)) %&nbsp;</span>HASH_SIZE<span style=\"line-height: 1.42857143;\">&nbsp;</span></p><p><span style=\"line-height: 1.42857143;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = (</span><span style=\"line-height: 1.42857143;\">97* 33</span><span style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em;\">3</span><span style=\"line-height: 1.42857143;\">&nbsp;</span><span style=\"line-height: 1.42857143;\">+ 98</span><span style=\"line-height: 1.42857143;\">&nbsp;* 33</span><span style=\"font-size: 12px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em;\">2</span><span style=\"line-height: 1.42857143;\">&nbsp;+ 99</span><span style=\"line-height: 1.42857143;\">&nbsp;* 33 +100</span><span style=\"line-height: 1.42857143;\">) % HASH_SIZE</span></p><p><span style=\"line-height: 1.42857143;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =&nbsp;</span>3595978 % HASH_SIZE</p><p>here HASH_SIZE is the capacity of the hash table (you can assume a hash table is like an array with index 0 ~ HASH_SIZE-1).</p><p>Given a string as a key and the size of hash table, return the hash value of this key.f</p><p><br></p>", "notice": "", "clarification": "<p>For this problem, you are not necessary to design your own hash algorithm or consider any collision issue, you just need to implement the algorithm as described.</p>", "example": "<p>For key=\"abcd\" and size=100, return 78</p>", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 519, "title": "Consistent Hashing", "unique_name": "consistent-hashing", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "\"abcd\"\n1000", "total_accepted": 13673, "total_submissions": 63142, "contest": "", "has_followed_by": false}, "rehashing": {"id": 129, "unique_name": "rehashing", "user_status": null, "title": "Rehashing", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "The size of the hash table is not determinate at the very beginning. If the total size of keys is too large (e.g. size >= capacity / 10), we should double the size of the hash table and rehash every keys. Say you have a hash table looks like below:\r\n\r\n`size=3`, `capacity=4`\r\n\r\n\t[null, 21, 14, null]\r\n\t       \u2193    \u2193\r\n\t       9   null\r\n\t       \u2193\r\n\t      null\r\n\r\nThe hash function is:\r\n\r\n\tint hashcode(int key, int capacity) {\r\n\t    return key % capacity;\r\n\t}\r\n\r\nhere we have three numbers, 9, 14 and 21, where 21 and 9 share the same position as they all have the same hashcode 1 (21 % 4 = 9 % 4 = 1). We store them in the hash table by linked list.\r\n\r\nrehashing this hash table, double the capacity, you will get:\r\n\r\n`size=3`, `capacity=8`\r\n\r\n\tindex:   0    1    2    3     4    5    6   7\r\n\thash : [null, 9, null, null, null, 21, 14, null]\r\n\r\nGiven the original hash table, return the new hash table after rehashing .", "notice": "For negative integer in hash table, the position can be calculated as follow:\r\n\r\n- **C++/Java**: if you directly calculate -4 % 3 you will get -1. You can use function: a % b = (a % b + b) % b to make it is a non negative integer.\r\n- **Python**: you can directly use -1 % 3, you will get 2 automatically.", "clarification": "", "example": "Given `[null, 21->9->null, 14->null, null]`,\r\n\r\nreturn `[null, 9->null, null, null, null, 21->null, 14->null, null]`\r\n", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 519, "title": "Consistent Hashing", "unique_name": "consistent-hashing", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[null,null,29->5->null]", "total_accepted": 10681, "total_submissions": 33777, "contest": "", "has_followed_by": false}, "heapify": {"id": 130, "unique_name": "heapify", "user_status": null, "title": "Heapify", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 38, "description": "Given an integer array, heapify it into a min-heap array.<div>For a heap array A, A[0] is the root of heap, and for each A[i], A[i * 2 + 1] is the left child of A[i] and A[i * 2 + 2] is the right child of A[i].</div>", "notice": "", "clarification": "<p><b>What is heap?</b></p><p></p><ul><li>Heap is a data structure, which usually have three methods: push, pop and top. where \"push\" add a new element the heap, \"pop\" delete the minimum/maximum element in the heap, \"top\" return the minimum/maximum element.</li></ul><div><br></div><div><b>What is heapify?</b></div><div><ul><li>Convert an unordered integer array into a heap array. If it is min-heap, for each element A[i], we will get A[i * 2 + 1] &gt;= A[i] and A[i * 2 + 2] &gt;= A[i].</li></ul><div><br></div><div><b>What if there is a lot of solutions?</b></div></div><div><ul><li>Return any of them.</li></ul></div><p></p>", "example": "<p>Given [3,2,1,4,5], return [1,2,3,4,5] or any legal heap array.</p>", "challenge": "<p>O(n) time complexity</p>", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,2,1,4,5]\n", "total_accepted": 13186, "total_submissions": 34120, "contest": "", "has_followed_by": false}, "the-skyline-problem": {"id": 131, "unique_name": "the-skyline-problem", "user_status": null, "title": "The Skyline Problem", "is_favorited": false, "version": "v2", "level": 4, "accepted_rate": 14, "description": "Given *N* buildings in a x-axis\uff0ceach building is a rectangle and can be represented by a triple (start, end, height)\uff0cwhere start is the start position on x-axis, end is the end position on x-axis and height is the height of the building. Buildings may overlap if you see them from far away\uff0cfind the outline of them\u3002\r\n\r\nAn outline can be represented by a triple, (start, end, height), where start is the start position on x-axis of the outline, end is the end position on x-axis and height is the height of the outline.\r\n\r\n![Building Outline](https://lintcode-media.s3.amazonaws.com/problem/jiuzhang3.jpg \"Building Outline\")", "notice": "Please merge the adjacent outlines if they have the same height and make sure different outlines cant overlap on x-axis.", "clarification": "", "example": "Given 3 buildings\uff1a\r\n\r\n\t[\r\n\t  [1, 3, 3],\r\n\t  [2, 4, 4],\r\n\t  [5, 6, 1]\r\n\t]\r\n\r\nThe outlines are\uff1a\r\n\r\n\t[\r\n\t  [1, 2, 3],\r\n\t  [2, 4, 4],\r\n\t  [5, 6, 1]\r\n\t]", "challenge": "", "tags": [{"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 94, "name": "Sweep line", "cn_name": "Sweep line", "type": 1, "unique_name": "sweep-line", "alias": "", "problem_count": 3}, {"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [{"id": 360, "title": "Sliding Window Median", "unique_name": "sliding-window-median", "level": 3, "accepted_rate": 18}], "comment_count": 0, "testcase_sample": "[[1,3,3],[2,4,4],[5,6,1]]\n", "total_accepted": 5485, "total_submissions": 36667, "contest": "", "has_followed_by": false}, "word-search-ii": {"id": 132, "unique_name": "word-search-ii", "user_status": null, "title": "Word Search II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 24, "description": "Given a matrix of lower alphabets and a dictionary. Find all words in the dictionary that can be found in the matrix. A word can start from any position in the matrix and go left/right/up/down to the adjacent position. One character only be used once in one word.", "notice": "", "clarification": "", "example": "<p dir=\"ltr\" style=\"margin-top: 6pt; margin-bottom: 0pt;\">Given matrix:</p><pre style=\"margin-top: 6pt; margin-bottom: 0pt;\"><span style=\"vertical-align: baseline;\">doaf<br></span><span style=\"vertical-align: baseline;\">agai<br></span>dcan</pre><p dir=\"ltr\" style=\"margin-top: 6pt; margin-bottom: 0pt;\">and dictionary:</p><pre style=\"margin-top: 6pt; margin-bottom: 0pt;\">{\"dog\", \"dad\", \"dgdg\", \"can\", \"again\"}</pre><div><br></div><div>return {\"dog\", \"dad\", \"can\", \"again\"}</div><div><br></div><div><br></div><div>dog:</div><div><pre style=\"margin-top: 6pt; margin-bottom: 0pt;\"><span style=\"vertical-align: baseline;\"><font color=\"#ff0000\">do</font>af<br></span><span style=\"vertical-align: baseline;\">a<font color=\"#ff0000\">g</font>ai<br></span>dcan</pre><p style=\"margin-top: 6pt; margin-bottom: 0pt;\"><span style=\"line-height: 1.42857143;\">dad:</span><br></p><pre style=\"margin-top: 6pt; margin-bottom: 0pt;\"><span style=\"vertical-align: baseline;\"><font color=\"#ff0000\">d</font>oaf<br></span><span style=\"vertical-align: baseline;\"><font color=\"#ff0000\">a</font>gai<br></span><font color=\"#ff0000\">d</font>can</pre><p style=\"margin-top: 6pt; margin-bottom: 0pt;\">can:</p><pre style=\"margin-top: 6pt; margin-bottom: 0pt;\"><span style=\"vertical-align: baseline;\">doaf<br></span><span style=\"vertical-align: baseline;\">agai<br></span>d<font color=\"#ff0000\">can</font></pre><p style=\"margin-top: 6pt; margin-bottom: 0pt;\">again:</p><pre style=\"margin-top: 6pt; margin-bottom: 0pt;\"><span style=\"vertical-align: baseline;\">doaf<br></span><span style=\"vertical-align: baseline;\"><font color=\"#ff0000\">agai</font><br></span>dca<font color=\"#ff0000\">n</font></pre></div>", "challenge": "<p>Using trie to implement your algorithm.</p>", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 34, "name": "Trie", "cn_name": "Trie", "type": 21, "unique_name": "trie", "alias": "Prefix Tree", "problem_count": 11}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 635, "title": "Boggle Game", "unique_name": "boggle-game", "level": 3, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[\"doaf\",\"agai\",\"dcan\"]\n[\"dog\",\"dad\",\"dgdg\",\"can\",\"again\"]\n", "total_accepted": 10253, "total_submissions": 41488, "contest": "", "has_followed_by": false}, "longest-word": {"id": 133, "unique_name": "longest-word", "user_status": null, "title": "Longest Word", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Given a dictionary, find all of the longest words in the dictionary.\r\n", "notice": "", "clarification": "", "example": "Given \r\n\r\n    {\r\n      \"dog\",\r\n      \"google\",\r\n      \"facebook\",\r\n      \"internationalization\",\r\n      \"blabla\"\r\n    }\r\n\r\n\r\nthe longest words are(is) `[\"internationalization\"]`.\r\n\r\nGiven\r\n\r\n    {\r\n      \"like\",\r\n      \"love\",\r\n      \"hate\",\r\n      \"yes\"\r\n    }\r\n\r\nthe longest words are `[\"like\", \"love\", \"hate\"]`.", "challenge": "It's easy to solve it in two passes, can you do it in one pass?", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 422, "title": "Length of Last Word", "unique_name": "length-of-last-word", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[\"dog\",\"google\",\"facebook\",\"internationalization\",\"blabla\"]\n", "total_accepted": 9707, "total_submissions": 25388, "contest": "", "has_followed_by": false}, "lru-cache": {"id": 134, "unique_name": "lru-cache", "user_status": null, "title": "LRU Cache ", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "<p style=\"line-height: 30px;\">Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations:&nbsp;<code style=\"font-size: 13px;\">get</code>&nbsp;and&nbsp;<code style=\"font-size: 13px;\">set</code>.</p><p style=\"line-height: 30px;\"><code style=\"font-size: 13px;\">get(key)</code>&nbsp;- Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br><code style=\"font-size: 13px;\">set(key, value)</code>&nbsp;- Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}], "related_problems": [{"id": 538, "title": "Memcache", "unique_name": "memcache", "level": 2, "accepted_rate": 32}, {"id": 24, "title": "LFU Cache", "unique_name": "lfu-cache", "level": 3, "accepted_rate": 18}], "comment_count": 0, "testcase_sample": "LRUCache(2)\nset(2, 1)\nset(1, 1)\nget(2)\nset(4, 1)\nget(1)\nget(2)\n", "total_accepted": 16055, "total_submissions": 67776, "contest": "", "has_followed_by": false}, "combination-sum": {"id": 135, "unique_name": "combination-sum", "user_status": null, "title": "Combination Sum ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Given a set of candidate numbers (***C***) and a target number (***T***), find all unique combinations in ***C*** where the candidate numbers sums to ***T***.\r\n\r\nThe **same** repeated number may be chosen from ***C*** unlimited number of times.", "notice": "- All numbers (including target) will be positive integers.\r\n- Elements in a combination (*a*<sub>1</sub>, *a*<sub>2</sub>, \u2026 , *a*<sub>k</sub>) must be in non-descending order. (ie, *a*<sub>1</sub> \u2264 *a*<sub>2</sub> \u2264 \u2026 \u2264 *a*<sub>k</sub>).\r\n- The solution set must not contain duplicate combinations.", "clarification": "", "example": "Given candidate set `[2,3,6,7]` and target `7`,  a solution set is: \r\n```\r\n[7]\r\n[2, 2, 3]\r\n```", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 740, "title": "Coin Change 2", "unique_name": "coin-change-2", "level": 2, "accepted_rate": 32}, {"id": 739, "title": "24 Game", "unique_name": "24-game", "level": 3, "accepted_rate": 28}, {"id": 653, "title": "Expression Add Operators", "unique_name": "expression-add-operators", "level": 3, "accepted_rate": 29}, {"id": 652, "title": "Factorization", "unique_name": "factorization", "level": 2, "accepted_rate": 28}, {"id": 153, "title": "Combination Sum II", "unique_name": "combination-sum-ii", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[1]\n1\r\n", "total_accepted": 21333, "total_submissions": 70522, "contest": "", "has_followed_by": false}, "palindrome-partitioning": {"id": 136, "unique_name": "palindrome-partitioning", "user_status": null, "title": "Palindrome Partitioning", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given a string *s*, partition *s* such that every substring of the partition is a palindrome.\r\n\r\nReturn all possible palindrome partitioning of s.\r\n", "notice": "", "clarification": "", "example": "Given s = `\"aab\"`, return:\r\n\r\n    [\r\n      [\"aa\",\"b\"],\r\n      [\"a\",\"a\",\"b\"]\r\n    ]", "challenge": "", "tags": [{"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 108, "title": "Palindrome Partitioning II", "unique_name": "palindrome-partitioning-ii", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"a\"\n", "total_accepted": 16478, "total_submissions": 55283, "contest": "", "has_followed_by": false}, "clone-graph": {"id": 137, "unique_name": "clone-graph", "user_status": null, "title": "Clone Graph", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Clone an undirected graph. Each node in the graph contains a `label` and a list of its `neighbors`.\r\n\r\nHow we serialize an undirected graph:\r\n\r\nNodes are labeled uniquely.\r\n\r\nWe use `#` as a separator for each node, and `,` as a separator for node label and each neighbor of the node.\r\n\r\nAs an example, consider the serialized graph `{0,1,2#1,2#2,2}`.\r\n\r\nThe graph has a total of three nodes, and therefore contains three parts as separated by `#`.\r\n\r\n1. First node is labeled as `0`. Connect node `0` to both nodes `1` and `2`.\r\n2. Second node is labeled as `1`. Connect node `1` to node `2`.\r\n3. Third node is labeled as `2`. Connect node `2` to node `2` (itself), thus forming a self-cycle.\r\n\r\nVisually, the graph looks like the following:\r\n\r\n       1\r\n      / \\\r\n     /   \\\r\n    0 --- 2\r\n         / \\\r\n         \\_/", "notice": "", "clarification": "", "example": "return a deep copied graph.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 531, "title": "Six Degrees", "unique_name": "six-degrees", "level": 2, "accepted_rate": 36}, {"id": 375, "title": "Clone Binary Tree", "unique_name": "clone-binary-tree", "level": 1, "accepted_rate": 49}, {"id": 176, "title": "Route Between Two Nodes in Graph", "unique_name": "route-between-two-nodes-in-graph", "level": 2, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "{}\n", "total_accepted": 18127, "total_submissions": 58849, "contest": "", "has_followed_by": false}, "subarray-sum": {"id": 138, "unique_name": "subarray-sum", "user_status": null, "title": "Subarray Sum", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Given an integer array, find a subarray where the sum of numbers is **zero**. Your code should return the index of the first number and the index of the last number.", "notice": "There is at least one subarray that it's sum equals to zero.", "clarification": "", "example": "Given `[-3, 1, 2, -3, 4]`, return `[0, 2]` or `[1, 3]`.", "challenge": "", "tags": [{"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 405, "title": "Submatrix Sum", "unique_name": "submatrix-sum", "level": 2, "accepted_rate": 26}, {"id": 404, "title": "Subarray Sum II", "unique_name": "subarray-sum-ii", "level": 3, "accepted_rate": 31}, {"id": 406, "title": "Minimum Size Subarray Sum ", "unique_name": "minimum-size-subarray-sum", "level": 2, "accepted_rate": 28}, {"id": 139, "title": "Subarray Sum Closest", "unique_name": "subarray-sum-closest", "level": 2, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "[-3,1,2,-3,4]\n", "total_accepted": 24889, "total_submissions": 79021, "contest": "", "has_followed_by": false}, "subarray-sum-closest": {"id": 139, "unique_name": "subarray-sum-closest", "user_status": null, "title": "Subarray Sum Closest", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 21, "description": "Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.", "notice": "", "clarification": "", "example": "Given `[-3, 1, 1, -3, 5]`, return `[0, 2]`, `[1, 3]`, `[1, 1]`, `[2, 2]` or `[0, 4]`.", "challenge": "O(nlogn) time", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}], "related_problems": [{"id": 405, "title": "Submatrix Sum", "unique_name": "submatrix-sum", "level": 2, "accepted_rate": 26}, {"id": 404, "title": "Subarray Sum II", "unique_name": "subarray-sum-ii", "level": 3, "accepted_rate": 31}, {"id": 406, "title": "Minimum Size Subarray Sum ", "unique_name": "minimum-size-subarray-sum", "level": 2, "accepted_rate": 28}, {"id": 138, "title": "Subarray Sum", "unique_name": "subarray-sum", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[-3,1,1,-3,5]\n", "total_accepted": 15240, "total_submissions": 69761, "contest": "", "has_followed_by": false}, "fast-power": {"id": 140, "unique_name": "fast-power", "user_status": null, "title": "Fast Power", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "<p>Calculate the<b><font color=\"#e76363\"> <i>a<sup>n</sup>&nbsp;% b</i></font></b> where a, b and n are all 32bit integers.</p>", "notice": "", "clarification": "", "example": "<p>For 2<sup>31</sup> % 3 = 2</p><p>For 100<sup>1000</sup> % 1000 = 0</p>", "challenge": "<p>O(logn)</p>", "tags": [{"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}], "related_problems": [{"id": 428, "title": "Pow(x, n) ", "unique_name": "powx-n", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "3\n7\n5", "total_accepted": 12182, "total_submissions": 51471, "contest": "", "has_followed_by": false}, "sqrtx": {"id": 141, "unique_name": "sqrtx", "user_status": null, "title": "Sqrt(x)", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 26, "description": "Implement int `sqrt(int x)`.\r\n\r\nCompute and return the square root of *x*.\r\n", "notice": "", "clarification": "", "example": "sqrt(3) = 1\r\n\r\nsqrt(4) = 2\r\n\r\nsqrt(5) = 2\r\n\r\nsqrt(10) = 3", "challenge": "O(log(x))", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 777, "title": "Valid Perfect Square", "unique_name": "valid-perfect-square", "level": 1, "accepted_rate": 37}, {"id": 586, "title": "Sqrt(x) II", "unique_name": "sqrtx-ii", "level": 2, "accepted_rate": 34}, {"id": 428, "title": "Pow(x, n) ", "unique_name": "powx-n", "level": 2, "accepted_rate": 32}, {"id": 14, "title": "First Position of Target", "unique_name": "first-position-of-target", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "0", "total_accepted": 24222, "total_submissions": 92486, "contest": "", "has_followed_by": false}, "o1-check-power-of-2": {"id": 142, "unique_name": "o1-check-power-of-2", "user_status": null, "title": "O(1) Check Power of 2", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Using O(*1*) time to check whether an integer *n* is a power of `2`.", "notice": "", "clarification": "", "example": "For `n=4`, return `true`;\r\n\r\nFor `n=5`, return `false`;", "challenge": "O(1) time", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 365, "title": "Count 1 in Binary", "unique_name": "count-1-in-binary", "level": 1, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "4\n", "total_accepted": 12250, "total_submissions": 38660, "contest": "", "has_followed_by": false}, "sort-colors-ii": {"id": 143, "unique_name": "sort-colors-ii", "user_status": null, "title": "Sort Colors II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Given an array of *n* objects with *k* different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.", "notice": "You are not suppose to use the library's sort function for this problem.\r\n\r\nk <= n", "clarification": "", "example": "Given colors=`[3, 2, 2, 1, 4]`, `k=4`, your code should sort colors in-place to `[1, 2, 2, 3, 4]`.", "challenge": "A rather straight forward solution is a two-pass algorithm using counting sort. That will cost O(k) extra memory. Can you do it without using extra memory?", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 508, "title": "Wiggle Sort", "unique_name": "wiggle-sort", "level": 2, "accepted_rate": 41}, {"id": 507, "title": "Wiggle Sort II", "unique_name": "wiggle-sort-ii", "level": 2, "accepted_rate": 25}, {"id": 148, "title": "Sort Colors", "unique_name": "sort-colors", "level": 2, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[2,1,1,2,2]\n2", "total_accepted": 16101, "total_submissions": 44755, "contest": "", "has_followed_by": false}, "interleaving-positive-and-negative-numbers": {"id": 144, "unique_name": "interleaving-positive-and-negative-numbers", "user_status": null, "title": "Interleaving Positive and Negative Numbers", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given an array with positive and negative integers. Re-range it to interleaving with positive and negative integers.", "notice": "You are not necessary to keep the original order of positive integers or negative integers.", "clarification": "", "example": "Given `[-1, -2, -3, 4, 5, 6]`, after re-range, it will be `[-1, 5, -2, 4, -3, 6]` or any other reasonable answer.\r\n", "challenge": "Do it in-place and without extra memory.", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 31, "title": "Partition Array", "unique_name": "partition-array", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[-33,-19,30,26,21,-9]", "total_accepted": 5784, "total_submissions": 24677, "contest": "", "has_followed_by": false}, "lowercase-to-uppercase": {"id": 145, "unique_name": "lowercase-to-uppercase", "user_status": null, "title": "Lowercase to Uppercase", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 50, "description": "Convert a lowercase character to uppercase.", "notice": "", "clarification": "", "example": "`a` -> `A`, `b` -> `B` ...", "challenge": "", "tags": [{"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}], "related_problems": [{"id": 146, "title": "Lowercase to Uppercase II", "unique_name": "lowercase-to-uppercase-ii", "level": 0, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "a", "total_accepted": 6389, "total_submissions": 12749, "contest": "", "has_followed_by": false}, "lowercase-to-uppercase-ii": {"id": 146, "title": "Lowercase to Uppercase II", "unique_name": "lowercase-to-uppercase-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "narcissistic-number": {"id": 147, "title": "Narcissistic Number", "unique_name": "narcissistic-number", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "sort-colors": {"id": 148, "unique_name": "sort-colors", "user_status": null, "title": "Sort Colors", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "Given an array with *n* objects colored *red*, *white* or *blue*, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.\r\n\r\nHere, we will use the integers `0`, `1`, and `2` to represent the color red, white, and blue respectively.", "notice": "You are not suppose to use the library's sort function for this problem. \r\nYou should do it in-place (sort numbers in the original array).", "clarification": "", "example": "Given `[1, 0, 1, 2]`, sort it in-place to `[0, 1, 1, 2]`.", "challenge": "A rather straight forward solution is a two-pass algorithm using counting sort.\r\nFirst, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.\r\n\r\nCould you come up with an one-pass algorithm using only constant space?", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 625, "title": "Partition Array II", "unique_name": "partition-array-ii", "level": 2, "accepted_rate": 51}, {"id": 508, "title": "Wiggle Sort", "unique_name": "wiggle-sort", "level": 2, "accepted_rate": 41}, {"id": 507, "title": "Wiggle Sort II", "unique_name": "wiggle-sort-ii", "level": 2, "accepted_rate": 25}, {"id": 143, "title": "Sort Colors II", "unique_name": "sort-colors-ii", "level": 2, "accepted_rate": 35}, {"id": 39, "title": "Recover Rotated Sorted Array", "unique_name": "recover-rotated-sorted-array", "level": 1, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[2,0,0,1,2,0,2]", "total_accepted": 19994, "total_submissions": 53169, "contest": "", "has_followed_by": false}, "best-time-to-buy-and-sell-stock": {"id": 149, "unique_name": "best-time-to-buy-and-sell-stock", "user_status": null, "title": "Best Time to Buy and Sell Stock", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Say you have an array for which the *i*<sup>th</sup> element is the price of a given stock on day *i*.\r\n\r\nIf you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.", "notice": "", "clarification": "", "example": "Given array `[3,2,3,1,2]`, return `1`.", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 995, "title": "Best Time to Buy and Sell Stock with Cooldown", "unique_name": "best-time-to-buy-and-sell-stock-with-cooldown", "level": 2, "accepted_rate": 49}, {"id": 393, "title": "Best Time to Buy and Sell Stock IV", "unique_name": "best-time-to-buy-and-sell-stock-iv", "level": 3, "accepted_rate": 25}, {"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 14566, "total_submissions": 34976, "contest": "", "has_followed_by": false}, "best-time-to-buy-and-sell-stock-ii": {"id": 150, "unique_name": "best-time-to-buy-and-sell-stock-ii", "user_status": null, "title": "Best Time to Buy and Sell Stock II ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 50, "description": "<p style=\"line-height: 30px;\">Say you have an array for which the&nbsp;<i>i</i><span style=\"position: relative; font-size: 12px; line-height: 0; vertical-align: baseline; top: -0.5em;\">th</span>&nbsp;element is the price of a given stock on day&nbsp;<i>i</i>.</p><p style=\"line-height: 30px;\">Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>", "notice": "", "clarification": "", "example": "<p>Given an example<font color=\"#ff9c00\">&nbsp;</font><font color=\"#ff0000\">[2,1,2,0,1]</font>, return 2</p>", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1000, "title": "Best Time to Buy and Sell Stock with Transaction Fee", "unique_name": "best-time-to-buy-and-sell-stock-with-transaction-fee", "level": 2, "accepted_rate": 57}, {"id": 995, "title": "Best Time to Buy and Sell Stock with Cooldown", "unique_name": "best-time-to-buy-and-sell-stock-with-cooldown", "level": 2, "accepted_rate": 49}, {"id": 393, "title": "Best Time to Buy and Sell Stock IV", "unique_name": "best-time-to-buy-and-sell-stock-iv", "level": 3, "accepted_rate": 25}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 9930, "total_submissions": 19771, "contest": "", "has_followed_by": false}, "best-time-to-buy-and-sell-stock-iii": {"id": 151, "unique_name": "best-time-to-buy-and-sell-stock-iii", "user_status": null, "title": "Best Time to Buy and Sell Stock III ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Say you have an array for which the _i_<sup>th</sup> element is the price of a given stock on day _i_.\r\n\r\nDesign an algorithm to find the **maximum** profit. You may complete at most _two_ transactions.", "notice": "You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).", "clarification": "", "example": "Given an example `[4,4,6,1,1,4,2,5]`, return `6`.\r\n", "challenge": "", "tags": [{"id": 19, "name": "Forward-Backward Traversal", "cn_name": "Forward-Backward Traversal", "type": 1, "unique_name": "forward-backward-traversal", "alias": "", "problem_count": 5}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 393, "title": "Best Time to Buy and Sell Stock IV", "unique_name": "best-time-to-buy-and-sell-stock-iv", "level": 3, "accepted_rate": 25}, {"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 150, "title": "Best Time to Buy and Sell Stock II ", "unique_name": "best-time-to-buy-and-sell-stock-ii", "level": 2, "accepted_rate": 50}, {"id": 149, "title": "Best Time to Buy and Sell Stock", "unique_name": "best-time-to-buy-and-sell-stock", "level": 2, "accepted_rate": 41}, {"id": 45, "title": "Maximum Subarray Difference", "unique_name": "maximum-subarray-difference", "level": 2, "accepted_rate": 25}, {"id": 43, "title": "Maximum Subarray III", "unique_name": "maximum-subarray-iii", "level": 3, "accepted_rate": 25}, {"id": 42, "title": "Maximum Subarray II", "unique_name": "maximum-subarray-ii", "level": 2, "accepted_rate": 26}, {"id": 41, "title": "Maximum Subarray", "unique_name": "maximum-subarray", "level": 1, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 8377, "total_submissions": 29782, "contest": "", "has_followed_by": false}, "combinations": {"id": 152, "unique_name": "combinations", "user_status": null, "title": "Combinations ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Given two integers *n* and *k*, return all possible combinations of *k* numbers out of 1 ... *n*.", "notice": "You don't need to care the order of combinations, but you should make sure the numbers in a combination are sorted.", "clarification": "", "example": "Given `n = 4` and `k = 2`, a solution is:\r\n```\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4]\r\n]\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 740, "title": "Coin Change 2", "unique_name": "coin-change-2", "level": 2, "accepted_rate": 32}, {"id": 739, "title": "24 Game", "unique_name": "24-game", "level": 3, "accepted_rate": 28}, {"id": 653, "title": "Expression Add Operators", "unique_name": "expression-add-operators", "level": 3, "accepted_rate": 29}, {"id": 34, "title": "N-Queens II", "unique_name": "n-queens-ii", "level": 2, "accepted_rate": 42}, {"id": 33, "title": "N-Queens", "unique_name": "n-queens", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "1\n1\n", "total_accepted": 9622, "total_submissions": 27608, "contest": "", "has_followed_by": false}, "combination-sum-ii": {"id": 153, "unique_name": "combination-sum-ii", "user_status": null, "title": "Combination Sum II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given a collection of candidate numbers (*C*) and a target number (*T*), find all unique combinations in *C* where the candidate numbers sums to *T*.\r\n\r\nEach number in *C* may only be used once in the combination.", "notice": "- All numbers (including target) will be positive integers.\r\n- Elements in a combination (a1, a2, \u2026 , ak) must be in non-descending order. (ie, a1 \u2264 a2 \u2264 \u2026 \u2264 ak).\r\n- The solution set must not contain duplicate combinations.", "clarification": "", "example": "Given candidate set `[10,1,6,7,2,1,5]` and target `8`,\r\n\r\nA solution set is: \r\n\r\n```\r\n[\r\n  [1,7],\r\n  [1,2,5],\r\n  [2,6],\r\n  [1,1,6]\r\n]\r\n```\r\n", "challenge": "", "tags": [{"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 790, "title": "Parser", "unique_name": "parser", "level": 2, "accepted_rate": 27}, {"id": 740, "title": "Coin Change 2", "unique_name": "coin-change-2", "level": 2, "accepted_rate": 32}, {"id": 653, "title": "Expression Add Operators", "unique_name": "expression-add-operators", "level": 3, "accepted_rate": 29}, {"id": 135, "title": "Combination Sum ", "unique_name": "combination-sum", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[7,1,2,5,1,6,10]\n8\n", "total_accepted": 13850, "total_submissions": 43987, "contest": "", "has_followed_by": false}, "regular-expression-matching": {"id": 154, "unique_name": "regular-expression-matching", "user_status": null, "title": "Regular Expression Matching", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 24, "description": "<p><span style=\"line-height: 30px;\">Implement regular expression matching with support for&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">'.'</code><span style=\"line-height: 30px;\">&nbsp;and&nbsp;</span><code style=\"font-size: 13px; line-height: 30px; white-space: normal;\">'*'</code><span style=\"line-height: 30px;\">.</span></p><pre>'.' Matches any single character.\r\n'*' Matches zero or more of the preceding element.\r\n\r\nThe matching should cover the <span style=\"font-weight: 700;\">entire</span> input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(string s, string p)</pre>", "notice": "", "clarification": "", "example": "<pre>isMatch(\"aa\",\"a\") \u2192 false\r\nisMatch(\"aa\",\"aa\") \u2192 true\r\nisMatch(\"aaa\",\"aa\") \u2192 false\r\nisMatch(\"aa\", \"a*\") \u2192 true\r\nisMatch(\"aa\", \".*\") \u2192 true\r\nisMatch(\"ab\", \".*\") \u2192 true\r\nisMatch(\"aab\", \"c*a*b\") \u2192 true</pre>", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [{"id": 192, "title": "Wildcard Matching", "unique_name": "wildcard-matching", "level": 3, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "\"aa\"\n\"a\"\n", "total_accepted": 6228, "total_submissions": 25254, "contest": "", "has_followed_by": false}, "minimum-depth-of-binary-tree": {"id": 155, "unique_name": "minimum-depth-of-binary-tree", "user_status": null, "title": "Minimum Depth of Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Given a binary tree, find its minimum depth.\r\n\r\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.", "notice": "", "clarification": "", "example": "Given a binary tree as follow:\r\n\r\n      1\r\n     / \\ \r\n    2   3\r\n       / \\\r\n      4   5  \r\n\r\nThe minimum depth is `2`.", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 650, "title": "Find Leaves of Binary Tree", "unique_name": "find-leaves-of-binary-tree", "level": 2, "accepted_rate": 46}, {"id": 97, "title": "Maximum Depth of Binary Tree", "unique_name": "maximum-depth-of-binary-tree", "level": 1, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "{}\n", "total_accepted": 16145, "total_submissions": 51504, "contest": "", "has_followed_by": false}, "merge-intervals": {"id": 156, "unique_name": "merge-intervals", "user_status": null, "title": "Merge Intervals", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 23, "description": "Given a collection of intervals, merge all overlapping intervals.", "notice": "", "clarification": "", "example": "Given intervals => merged intervals:\r\n\r\n    [                     [\r\n      (1, 3),               (1, 6),\r\n      (2, 6),      =>       (8, 10),\r\n      (8, 10),              (15, 18)\r\n      (15, 18)            ]\r\n    ]\r\n", "challenge": "O(*n* log *n*) time and O(1) extra space.", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [{"id": 1207, "title": "Teemo Attacking", "unique_name": "teemo-attacking", "level": 2, "accepted_rate": 51}, {"id": 1074, "title": "Range Module", "unique_name": "range-module", "level": 3, "accepted_rate": 47}, {"id": 1045, "title": "Partition Labels", "unique_name": "partition-labels", "level": 2, "accepted_rate": 75}, {"id": 920, "title": "Meeting Rooms", "unique_name": "meeting-rooms", "level": 1, "accepted_rate": 38}, {"id": 919, "title": "Meeting Rooms II", "unique_name": "meeting-rooms-ii", "level": 2, "accepted_rate": 39}, {"id": 839, "title": "Merge Two Sorted Interval Lists", "unique_name": "merge-two-sorted-interval-lists", "level": 1, "accepted_rate": 33}, {"id": 391, "title": "Number of Airplanes in the Sky", "unique_name": "number-of-airplanes-in-the-sky", "level": 2, "accepted_rate": 28}, {"id": 30, "title": "Insert Interval", "unique_name": "insert-interval", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[(1,3)]\n", "total_accepted": 11939, "total_submissions": 50800, "contest": "", "has_followed_by": false}, "unique-characters": {"id": 157, "unique_name": "unique-characters", "user_status": null, "title": "Unique Characters", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 46, "description": "Implement an algorithm to determine if a string has all unique characters.", "notice": "", "clarification": "", "example": "Given `\"abc\"`, return `true`.\r\n\r\nGiven `\"aab\"`, return `false`.", "challenge": "What if you can not use additional data structures?", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 209, "title": "First Unique Character in a String", "unique_name": "first-unique-character-in-a-string", "level": 1, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "abc_______\n", "total_accepted": 8696, "total_submissions": 18850, "contest": "", "has_followed_by": false}, "valid-anagram": {"id": 158, "unique_name": "valid-anagram", "user_status": null, "title": "Valid Anagram", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Write a method `anagram(s,t)` to decide if two strings are anagrams or not.", "notice": "", "clarification": "What is **Anagram**?\r\n- Two strings are anagram if they can be the same after change the order of characters.", "example": "Given s = `\"abcd\"`, t = `\"dcab\"`, return `true`.\r\nGiven s = `\"ab\"`, t = `\"ab\"`, return `true`.\r\nGiven s = `\"ab\"`, t = `\"ac\"`, return `false`.\r\n", "challenge": "O(n) time, O(1) extra space", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}], "related_problems": [{"id": 772, "title": "Group Anagrams", "unique_name": "group-anagrams", "level": 2, "accepted_rate": 41}, {"id": 647, "title": "Find All Anagrams in a String", "unique_name": "find-all-anagrams-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 503, "title": "Anagram (Map Reduce)", "unique_name": "anagram-map-reduce", "level": 2, "accepted_rate": 46}, {"id": 216, "title": "Substring Rotation", "unique_name": "substring-rotation", "level": 1, "accepted_rate": 28}, {"id": 211, "title": "String Permutation", "unique_name": "string-permutation", "level": 1, "accepted_rate": 30}, {"id": 171, "title": "Anagrams", "unique_name": "anagrams", "level": 2, "accepted_rate": 24}, {"id": 55, "title": "Compare Strings", "unique_name": "compare-strings", "level": 1, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "\"ab\"\n\"ab\"", "total_accepted": 21370, "total_submissions": 65239, "contest": "", "has_followed_by": false}, "find-minimum-in-rotated-sorted-array": {"id": 159, "unique_name": "find-minimum-in-rotated-sorted-array", "user_status": null, "title": "Find Minimum in Rotated Sorted Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "Suppose a sorted array is rotated at some pivot unknown to you beforehand.\r\n\r\n(i.e., `0 1 2 4 5 6 7` might become `4 5 6 7 0 1 2`).\r\n\r\nFind the minimum element.", "notice": "You may assume no duplicate exists in the array.", "clarification": "", "example": "Given `[4, 5, 6, 7, 0, 1, 2]` return `0`", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [{"id": 160, "title": "Find Minimum in Rotated Sorted Array II", "unique_name": "find-minimum-in-rotated-sorted-array-ii", "level": 2, "accepted_rate": 34}, {"id": 63, "title": "Search in Rotated Sorted Array II", "unique_name": "search-in-rotated-sorted-array-ii", "level": 2, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "[1,2,3]\n", "total_accepted": 33090, "total_submissions": 82176, "contest": "", "has_followed_by": false}, "find-minimum-in-rotated-sorted-array-ii": {"id": 160, "unique_name": "find-minimum-in-rotated-sorted-array-ii", "user_status": null, "title": "Find Minimum in Rotated Sorted Array II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Suppose a sorted array is rotated at some pivot unknown to you beforehand.\r\n\r\n(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\r\n\r\nFind the minimum element.", "notice": "The array may contain duplicates.", "clarification": "", "example": "Given `[4,4,5,6,7,0,1,2]` return `0`.", "challenge": "", "tags": [{"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}], "related_problems": [{"id": 159, "title": "Find Minimum in Rotated Sorted Array", "unique_name": "find-minimum-in-rotated-sorted-array", "level": 2, "accepted_rate": 40}, {"id": 63, "title": "Search in Rotated Sorted Array II", "unique_name": "search-in-rotated-sorted-array-ii", "level": 2, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "[1]\n", "total_accepted": 11933, "total_submissions": 34341, "contest": "", "has_followed_by": false}, "rotate-image": {"id": 161, "unique_name": "rotate-image", "user_status": null, "title": "Rotate Image ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "You are given an _n_ x _n_ 2D matrix representing an image.\r\nRotate the image by `90` degrees (clockwise).\r\n", "notice": "", "clarification": "", "example": "Given a matrix\r\n\r\n\t[\r\n\t    [1,2],\r\n\t    [3,4]\r\n\t]\r\n\r\nrotate it by 90 degrees (clockwise), return\r\n\r\n\t[\r\n\t    [3,1],\r\n\t    [4,2]\r\n\t]", "challenge": "Do it in-place.", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [{"id": 185, "title": "Matrix Zigzag Traversal", "unique_name": "matrix-zigzag-traversal", "level": 1, "accepted_rate": 25}, {"id": 162, "title": "Set Matrix Zeroes", "unique_name": "set-matrix-zeroes", "level": 2, "accepted_rate": 33}, {"id": 8, "title": "Rotate String", "unique_name": "rotate-string", "level": 1, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 5374, "total_submissions": 14609, "contest": "", "has_followed_by": false}, "set-matrix-zeroes": {"id": 162, "unique_name": "set-matrix-zeroes", "user_status": null, "title": "Set Matrix Zeroes", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given a *m* x *n* matrix, if an element is 0, set its entire row and column to 0. Do it in place.\r\n", "notice": "", "clarification": "", "example": "Given a matrix\r\n\r\n\t[\r\n\t  [1,2],\r\n\t  [0,3]\r\n\t],\r\n\r\nreturn\r\n\t[\r\n\t  [0,2],\r\n\t  [0,0]\r\n\t]", "challenge": "Did you use extra space?\r\nA straight forward solution using O(*mn*) space is probably a bad idea.\r\nA simple improvement uses O(*m* + *n*) space, but still not the best solution.\r\nCould you devise a constant space solution?", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}], "related_problems": [{"id": 161, "title": "Rotate Image ", "unique_name": "rotate-image", "level": 2, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 4055, "total_submissions": 12122, "contest": "", "has_followed_by": false}, "unique-binary-search-trees": {"id": 163, "unique_name": "unique-binary-search-trees", "user_status": null, "title": "Unique Binary Search Trees ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "Given *n*, how many structurally unique **BST**s (binary search trees) that store values 1...*n*?", "notice": "", "clarification": "", "example": "Given n = 3, there are a total of 5 unique BST's.\r\n\r\n\t1           3    3       2      1\r\n\t \\         /    /       / \\      \\\r\n\t  3      2     1       1   3      2\r\n\t /      /       \\                  \\\r\n\t2     1          2                  3", "challenge": "", "tags": [{"id": 42, "name": "Catalan Number", "cn_name": "Catalan Number", "type": 14, "unique_name": "catalan-number", "alias": "", "problem_count": 1}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 427, "title": "Generate Parentheses", "unique_name": "generate-parentheses", "level": 2, "accepted_rate": 39}, {"id": 14, "title": "First Position of Target", "unique_name": "first-position-of-target", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "0\n", "total_accepted": 7908, "total_submissions": 21643, "contest": "", "has_followed_by": false}, "unique-binary-search-trees-ii": {"id": 164, "unique_name": "unique-binary-search-trees-ii", "user_status": null, "title": "Unique Binary Search Trees II ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "<p><span style=\"line-height: 30px;\">Given&nbsp;</span><i style=\"line-height: 30px;\">n</i><span style=\"line-height: 30px;\">, generate all structurally unique&nbsp;</span><span style=\"font-weight: 700; line-height: 30px;\">BST's</span><span style=\"line-height: 30px;\">&nbsp;(binary search trees) that store values 1...</span><i style=\"line-height: 30px;\">n</i><span style=\"line-height: 30px;\">.</span><br></p>", "notice": "", "clarification": "", "example": "<p style=\"line-height: 30px;\">Given&nbsp;<i>n</i>&nbsp;= 3, your program should return all 5 unique BST's shown below.</p><pre>   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3</pre>", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 427, "title": "Generate Parentheses", "unique_name": "generate-parentheses", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "0\n", "total_accepted": 3756, "total_submissions": 11118, "contest": "", "has_followed_by": false}, "merge-two-sorted-lists": {"id": 165, "unique_name": "merge-two-sorted-lists", "user_status": null, "title": "Merge Two Sorted Lists", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 39, "description": "Merge two sorted (ascending) linked lists and return it as a new sorted list. The new sorted list should be made by splicing together the nodes of the two lists and sorted in ascending order.", "notice": "", "clarification": "", "example": "Given `1->3->8->11->15->null`, `2->null` , return `1->2->3->8->11->15->null`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 839, "title": "Merge Two Sorted Interval Lists", "unique_name": "merge-two-sorted-interval-lists", "level": 1, "accepted_rate": 33}, {"id": 6, "title": "Merge Two Sorted Arrays", "unique_name": "merge-two-sorted-arrays", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "null\n0->3->3->null", "total_accepted": 22865, "total_submissions": 57911, "contest": "", "has_followed_by": false}, "nth-to-last-node-in-list": {"id": 166, "unique_name": "nth-to-last-node-in-list", "user_status": null, "title": "Nth to Last Node in List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "<p>Find the nth to last element of a singly linked list.&nbsp;</p><p>The minimum number of nodes in list is n.<br></p>", "notice": "", "clarification": "", "example": "<p>Given a List &nbsp;3-&gt;2-&gt;1-&gt;5-&gt;null and n = 2, return node &nbsp;whose value is 1.</p>", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}], "related_problems": [], "comment_count": 0, "testcase_sample": "3->2->1->5->null\n2\n", "total_accepted": 10005, "total_submissions": 23864, "contest": "", "has_followed_by": false}, "add-two-numbers": {"id": 167, "unique_name": "add-two-numbers", "user_status": null, "title": "Add Two Numbers", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 22, "description": "You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in `reverse` order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list.", "notice": "", "clarification": "", "example": "Given `7->1->6 + 5->9->2`. That is, `617 + 295`.\r\n\r\nReturn `2->1->9`. That is `912`.\r\n\r\nGiven `3->1->5` and `5->9->2`, return `8->0->8`.", "challenge": "", "tags": [{"id": 56, "name": "High Precision", "cn_name": "High Precision", "type": 14, "unique_name": "high-precision", "alias": "", "problem_count": 3}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}], "related_problems": [{"id": 221, "title": "Add Two Numbers II", "unique_name": "add-two-numbers-ii", "level": 2, "accepted_rate": 25}, {"id": 655, "title": "Add Strings", "unique_name": "add-strings", "level": 1, "accepted_rate": 29}, {"id": 656, "title": "Multiply Strings", "unique_name": "multiply-strings", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "3->1->5->null\n5->9->2->null\n", "total_accepted": 16549, "total_submissions": 74110, "contest": "", "has_followed_by": false}, "burst-balloons": {"id": 168, "unique_name": "burst-balloons", "user_status": null, "title": "Burst Balloons", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 34, "description": "Given `n` balloons, indexed from `0` to `n-1`. Each balloon is painted with a number on it represented by array `nums`. You are asked to burst all the balloons. If the you burst balloon `i` you will get `nums[left] * nums[i] * nums[right]` coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.\r\n\r\nFind the `maximum` coins you can collect by bursting the balloons wisely.\r\n- You may imagine `nums[-1] = nums[n] = 1`. They are not real therefore you can not burst them.\r\n- 0 \u2264 `n` \u2264 500, 0 \u2264 `nums[i]` \u2264 100", "notice": "", "clarification": "", "example": "Given `[4, 1, 5, 10]`\r\nReturn `270`\r\n\r\n    nums = [4, 1, 5, 10] burst 1, get coins 4 * 1 * 5 = 20\r\n    nums = [4, 5, 10]    burst 5, get coins 4 * 5 * 10 = 200 \r\n    nums = [4, 10]       burst 4, get coins 1 * 4 * 10 = 40\r\n    nums = [10]          burst 10, get coins 1 * 10 * 1 = 10\r\n\r\n    Total coins 20 + 200 + 40 + 10 = 270", "challenge": "", "tags": [{"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 476, "title": "Stone Game", "unique_name": "stone-game", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "[4,1,5,10]\n", "total_accepted": 3363, "total_submissions": 9878, "contest": "", "has_followed_by": false}, "tower-of-hanoi": {"id": 169, "unique_name": "tower-of-hanoi", "user_status": null, "title": "Tower of Hanoi", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "Tower of Hanoi problem, is a well-known problem. On the A, B, C three pillars, there are n disks of different sizes (radii 1-n), they are stacked in a start on A, your goal is to a minimum number of legal steps to move all the plates move from A to C tower tower.\r\nEach step in the rules of the game are as follows:\r\n 1. Each step is only allowed to move a plate (from the top of one&nbsp;pillars&nbsp;to the top of another&nbsp;pillars)\r\n 2. The process of moving, you must ensure that a large dish is not at the top of the small plates (small can be placed on top of a large, below the maximum plate size can not have any other dish)\r\n\r\n**Diagram:**\r\n![hanoi](http://ww4.sinaimg.cn/large/0060lm7Tly1fphwld4at7j30dm05q74d.jpg \"hanoi\")", "notice": "", "clarification": "", "example": "<p>Given n = 3</p><p>return [\"<span style=\"color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.42857143;\">from A to C\",\"</span><span style=\"color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.42857143;\">from A to B\",\"</span><span style=\"color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.42857143;\">from C to B\",\"</span><span style=\"color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.42857143;\">from A to C\",\"</span><span style=\"color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.42857143;\">from B to A\",\"</span><span style=\"color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; line-height: 1.42857143;\">from B to C\",\"</span><span style=\"line-height: 1.42857143; color: rgb(88, 102, 110); font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">from A to C\"</span><span style=\"line-height: 1.42857143;\">]</span></p>", "challenge": "", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [], "comment_count": 0, "testcase_sample": "1", "total_accepted": 216, "total_submissions": 464, "contest": "", "has_followed_by": false}, "rotate-list": {"id": 170, "unique_name": "rotate-list", "user_status": null, "title": "Rotate List", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a list, rotate the list to the right by `k` places, where *k* is non-negative.", "notice": "", "clarification": "", "example": "Given `1->2->3->4->5` and k = `2`, return `4->5->1->2->3`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}], "related_problems": [{"id": 1334, "title": "Rotate Array", "unique_name": "rotate-array", "level": 1, "accepted_rate": 45}, {"id": 671, "title": "Rotate Words", "unique_name": "rotate-words", "level": 1, "accepted_rate": 16}, {"id": 450, "title": "Reverse Nodes in k-Group", "unique_name": "reverse-nodes-in-k-group", "level": 3, "accepted_rate": 35}, {"id": 8, "title": "Rotate String", "unique_name": "rotate-string", "level": 1, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "null\n0\n", "total_accepted": 10540, "total_submissions": 41027, "contest": "", "has_followed_by": false}, "anagrams": {"id": 171, "unique_name": "anagrams", "user_status": null, "title": "Anagrams", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given an array of strings, return all groups of strings that are anagrams.", "notice": "All inputs will be in **lower-case**", "clarification": "", "example": "Given `[\"lint\", \"intl\", \"inlt\", \"code\"]`, return `[\"lint\", \"inlt\", \"intl\"]`.\r\n\r\nGiven `[\"ab\", \"ba\", \"cd\", \"dc\", \"e\"]`, return `[\"ab\", \"ba\", \"cd\", \"dc\"]`.", "challenge": "What is Anagram?\r\n- Two strings are anagram if they can be the same after change the order of characters.", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 1038, "title": "Jewels and Stones", "unique_name": "jewels-and-stones", "level": 1, "accepted_rate": 86}, {"id": 813, "title": "Find Anagram Mappings", "unique_name": "find-anagram-mappings", "level": 1, "accepted_rate": 52}, {"id": 772, "title": "Group Anagrams", "unique_name": "group-anagrams", "level": 2, "accepted_rate": 41}, {"id": 638, "title": "Isomorphic Strings", "unique_name": "isomorphic-strings", "level": 1, "accepted_rate": 30}, {"id": 647, "title": "Find All Anagrams in a String", "unique_name": "find-all-anagrams-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 503, "title": "Anagram (Map Reduce)", "unique_name": "anagram-map-reduce", "level": 2, "accepted_rate": 46}, {"id": 158, "title": "Valid Anagram", "unique_name": "valid-anagram", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "[\"\",\"\"]\n", "total_accepted": 15949, "total_submissions": 64814, "contest": "", "has_followed_by": false}, "remove-element": {"id": 172, "unique_name": "remove-element", "user_status": null, "title": "Remove Element", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Given an array and a value, remove all occurrences of that value in place and return the new length.\r\n\r\nThe order of elements can be changed, and the elements after the new length don't matter.", "notice": "", "clarification": "", "example": "Given an array `[0,4,4,0,0,2,4,4]`, `value=4`\r\n\r\nreturn `4` and front four elements of the array is `[0,0,0,2]`", "challenge": "", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 539, "title": "Move Zeroes", "unique_name": "move-zeroes", "level": 1, "accepted_rate": 37}, {"id": 101, "title": "Remove Duplicates from Sorted Array II", "unique_name": "remove-duplicates-from-sorted-array-ii", "level": 1, "accepted_rate": 30}, {"id": 100, "title": "Remove Duplicates from Sorted Array", "unique_name": "remove-duplicates-from-sorted-array", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[]\n0\n", "total_accepted": 14738, "total_submissions": 47464, "contest": "", "has_followed_by": false}, "insertion-sort-list": {"id": 173, "unique_name": "insertion-sort-list", "user_status": null, "title": "Insertion Sort List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Sort a linked list using insertion sort.", "notice": "", "clarification": "", "example": "Given `1->3->2->0->null`, return `0->1->2->3->null`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 599, "title": "Insert into a Cyclic Sorted List", "unique_name": "insert-into-a-cyclic-sorted-list", "level": 1, "accepted_rate": 22}, {"id": 98, "title": "Sort List ", "unique_name": "sort-list", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "0->null", "total_accepted": 10555, "total_submissions": 33533, "contest": "", "has_followed_by": false}, "remove-nth-node-from-end-of-list": {"id": 174, "unique_name": "remove-nth-node-from-end-of-list", "user_status": null, "title": "Remove Nth Node From End of List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "Given a linked list, remove the n<sup>th</sup> node from the end of list and return its head.\r\n", "notice": "The minimum number of nodes in list is *n*.", "clarification": "", "example": "Given linked list: `1->2->3->4->5->null`, and *n* = `2`.\r\n\r\nAfter removing the second node from the end, the linked list becomes `1->2->3->5->null`.\r\n", "challenge": "Can you do it without getting the length of the linked list?", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 228, "title": "Middle of Linked List", "unique_name": "middle-of-linked-list", "level": 0, "accepted_rate": 42}, {"id": 372, "title": "Delete Node in a Linked List", "unique_name": "delete-node-in-a-linked-list", "level": 1, "accepted_rate": 50}], "comment_count": 0, "testcase_sample": "1->2->3->4->5->null\n2\n", "total_accepted": 18714, "total_submissions": 61308, "contest": "", "has_followed_by": false}, "invert-binary-tree": {"id": 175, "unique_name": "invert-binary-tree", "user_status": null, "title": "Invert Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 48, "description": "Invert a binary tree.", "notice": "", "clarification": "", "example": "      1         1\r\n     / \\       / \\\r\n    2   3  => 3   2\r\n       /       \\\r\n      4         4", "challenge": "Do it in recursion is acceptable, can you do it without recursion?", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,3,#}\n", "total_accepted": 14430, "total_submissions": 29928, "contest": "", "has_followed_by": false}, "route-between-two-nodes-in-graph": {"id": 176, "unique_name": "route-between-two-nodes-in-graph", "user_status": null, "title": "Route Between Two Nodes in Graph", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "Given a directed graph, design an algorithm to find out whether there is a route between two nodes.", "notice": "", "clarification": "", "example": "Given graph:\r\n\r\n\tA----->B----->C\r\n\t \\     |\r\n\t  \\    |\r\n\t   \\   |\r\n\t    \\  v\r\n\t     ->D----->E\r\n\r\nfor `s = B` and `t = E`, return `true`\r\n\r\nfor `s = D` and `t = C`, return `false`", "challenge": "", "tags": [{"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 790, "title": "Parser", "unique_name": "parser", "level": 2, "accepted_rate": 27}, {"id": 137, "title": "Clone Graph", "unique_name": "clone-graph", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "{0,1,2,3,4#1,3,4#2,1,4#3,4#4}\n4\n1\n", "total_accepted": 5618, "total_submissions": 15271, "contest": "", "has_followed_by": false}, "convert-sorted-array-to-binary-search-tree-with-minimal-height": {"id": 177, "unique_name": "convert-sorted-array-to-binary-search-tree-with-minimal-height", "user_status": null, "title": "Convert Sorted Array to Binary Search Tree With  Minimal Height ", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Given a sorted (increasing order) array, Convert it to create a binary tree with minimal height.", "notice": "There may exist multiple valid solutions, return any of them.", "clarification": "", "example": "Given `[1,2,3,4,5,6,7]`, return\r\n\r\n         4\r\n       /   \\\r\n      2     6\r\n     / \\    / \\\r\n    1   3  5   7\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}], "related_problems": [{"id": 106, "title": "Convert Sorted List to Binary Search Tree", "unique_name": "convert-sorted-list-to-binary-search-tree", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 8939, "total_submissions": 27498, "contest": "", "has_followed_by": false}, "graph-valid-tree": {"id": 178, "unique_name": "graph-valid-tree", "user_status": null, "title": "Graph Valid Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given `n` nodes labeled from `0` to `n - 1` and a list of `undirected` edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.\r\n", "notice": "You can assume that no duplicate edges will appear in edges. Since all edges are `undirected`, `[0, 1]` is the same as `[1, 0]` and thus will not appear together in edges.", "clarification": "", "example": "Given `n = 5` and `edges = [[0, 1], [0, 2], [0, 3], [1, 4]]`, return true.\r\n\r\nGiven `n = 5` and `edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]`, return false.", "challenge": "", "tags": [{"id": 59, "name": "Union Find", "cn_name": "Union Find", "type": 21, "unique_name": "union-find", "alias": "", "problem_count": 11}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 814, "title": "Shortest Path in Undirected Graph", "unique_name": "shortest-path-in-undirected-graph", "level": 2, "accepted_rate": 48}, {"id": 750, "title": "Portal", "unique_name": "portal", "level": 2, "accepted_rate": 26}, {"id": 589, "title": "Connecting Graph", "unique_name": "connecting-graph", "level": 2, "accepted_rate": 40}, {"id": 431, "title": "Connected Component in Undirected Graph", "unique_name": "connected-component-in-undirected-graph", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "5\n[[0,1],[0,2],[0,3],[1,4]]\n", "total_accepted": 19193, "total_submissions": 67569, "contest": "", "has_followed_by": false}, "update-bits": {"id": 179, "unique_name": "update-bits", "user_status": null, "title": "Update Bits", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given two _32_-bit numbers, _N_ and _M_, and two bit positions, _i_ and _j_. Write a method to set all bits between _i_ and _j_ in _N_ equal to _M_ (e g , _M_ becomes a substring of _N_ located at _i_ and starting at _j_)", "notice": "In the function, the numbers _N_ and _M_ will given in decimal, you should also return a decimal number.", "clarification": "You can assume that the bits *j* through *i* have enough space to fit all of *M*. That is, if *M*=10011\u00ef\u00bc\u0152 you can assume that there are at least 5 bits between *j* and *i*. You would not, for example, have *j*=3 and *i*=2, because *M* could not fully fit between bit 3 and bit 2.", "example": "Given `N=(10000000000)2`, `M=(10101)2`, `i=2`, `j=6`\r\n\r\nreturn `N=(10001010100)2`", "challenge": "Minimum number of operations?", "tags": [{"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 721, "title": "Next Sparse Number", "unique_name": "next-sparse-number", "level": 3, "accepted_rate": 31}, {"id": 180, "title": "Binary Representation", "unique_name": "binary-representation", "level": 3, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "1024\n21\n2\n6", "total_accepted": 7132, "total_submissions": 30954, "contest": "", "has_followed_by": false}, "binary-representation": {"id": 180, "unique_name": "binary-representation", "user_status": null, "title": "Binary Representation", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 20, "description": "Given a (decimal - _e.g._ 3.72) number that is passed in as a string, return the binary representation that is passed in as a string. If the fractional part of the number can not be represented accurately in binary with at most 32 characters, return `ERROR`.", "notice": "", "clarification": "", "example": "For n = `\"3.72\"`, return `\"ERROR\"`.\r\n\r\nFor n = `\"3.5\"`, return `\"11.1\"`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 179, "title": "Update Bits", "unique_name": "update-bits", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"3.72\"\n", "total_accepted": 5729, "total_submissions": 28022, "contest": "", "has_followed_by": false}, "flip-bits": {"id": 181, "unique_name": "flip-bits", "user_status": null, "title": "Flip Bits", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Determine the number of bits required to flip if you want to convert integer *n* to integer *m*.", "notice": "Both *n* and *m* are 32-bit integers.", "clarification": "", "example": "Given *n* = `31` (11111), *m* = `14` (01110), return `2`.\r\n", "challenge": "", "tags": [{"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 723, "title": "Rotate Bits - Left", "unique_name": "rotate-bits-left", "level": 2, "accepted_rate": 60}, {"id": 666, "title": "Guess Number Higher or Lower II", "unique_name": "guess-number-higher-or-lower-ii", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "14\n31", "total_accepted": 10531, "total_submissions": 32158, "contest": "", "has_followed_by": false}, "delete-digits": {"id": 182, "unique_name": "delete-digits", "user_status": null, "title": "Delete Digits", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "Given string A representative a positive integer which has _N_ digits, remove any _k_ digits of the number, the remaining digits are arranged according to the original order to become a new positive integer.\r\n\r\nFind the **smallest** integer after remove *k* digits.\r\n\r\n_N_ <= 240 and _k_ <= _N_, ", "notice": "", "clarification": "", "example": "Given an integer A = `\"178542\"`, k = `4`\r\n\r\nreturn a string `\"12\"`", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 743, "title": "Monotone Increasing Digits", "unique_name": "monotone-increasing-digits", "level": 2, "accepted_rate": 31}, {"id": 379, "title": "Reorder array to construct the minimum number", "unique_name": "reorder-array-to-construct-the-minimum-number", "level": 2, "accepted_rate": 19}, {"id": 184, "title": "Largest Number ", "unique_name": "largest-number", "level": 2, "accepted_rate": 19}], "comment_count": 0, "testcase_sample": "\"178542\"\n4\n", "total_accepted": 7492, "total_submissions": 37394, "contest": "", "has_followed_by": false}, "wood-cut": {"id": 183, "unique_name": "wood-cut", "user_status": null, "title": "Wood Cut", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 24, "description": "Given n pieces of wood with length `L[i]` (integer array). Cut them into small pieces to guarantee you could have equal or more than k pieces with the same length. What is the longest length you can get from the n pieces of wood? Given L & k, return the maximum length of the small pieces.", "notice": "You couldn't cut wood into float length.\r\n\r\nIf you couldn't get >= *k* pieces, return `0`.", "clarification": "", "example": "For `L=[232, 124, 456]`, `k=7`, return `114`.", "challenge": "O(n log Len), where Len is the longest length of the wood.", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}], "related_problems": [], "comment_count": 0, "testcase_sample": "[232,124,456]\n7\n", "total_accepted": 17543, "total_submissions": 70533, "contest": "", "has_followed_by": false}, "largest-number": {"id": 184, "unique_name": "largest-number", "user_status": null, "title": "Largest Number ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 19, "description": "Given a list of non negative integers, arrange them such that they form the largest number.\r\n", "notice": " The result may be very large, so you need to return a string instead of an integer.", "clarification": "", "example": "Given `[1, 20, 23, 4, 8]`, the largest formed number is `8423201`.\r\n", "challenge": "Do it in O(nlogn) time complexity.", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 102, "name": "Works Applications", "cn_name": "Works Applications", "type": 3, "unique_name": "works-applications", "alias": "", "problem_count": 3}], "related_problems": [{"id": 543, "title": "Kth Largest in N Arrays", "unique_name": "kth-largest-in-n-arrays", "level": 1, "accepted_rate": 25}, {"id": 182, "title": "Delete Digits", "unique_name": "delete-digits", "level": 2, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[1,20,23,4,8]\n", "total_accepted": 8813, "total_submissions": 44103, "contest": "", "has_followed_by": false}, "matrix-zigzag-traversal": {"id": 185, "unique_name": "matrix-zigzag-traversal", "user_status": null, "title": "Matrix Zigzag Traversal", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given a matrix of *m* x *n* elements (*m* rows, *n* columns), return all elements of the matrix in ZigZag-order.", "notice": "", "clarification": "", "example": "Given a matrix:\r\n\r\n\t[\r\n\t  [1, 2,  3,  4],\r\n\t  [5, 6,  7,  8],\r\n\t  [9,10, 11, 12]\r\n\t]\r\n\r\nreturn `[1, 2, 5, 9, 6, 3, 4, 7, 10, 11, 8, 12]`", "challenge": "", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 770, "title": "Maximum and Minimum", "unique_name": "maximum-and-minimum", "level": 1, "accepted_rate": 33}, {"id": 374, "title": "Spiral Matrix", "unique_name": "spiral-matrix", "level": 2, "accepted_rate": 24}, {"id": 161, "title": "Rotate Image ", "unique_name": "rotate-image", "level": 2, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[[1]]\n", "total_accepted": 4318, "total_submissions": 17146, "contest": "", "has_followed_by": false}, "max-points-on-a-line": {"id": 186, "unique_name": "max-points-on-a-line", "user_status": null, "title": "Max Points on a Line ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 16, "description": "Given *n* points on a 2D plane, find the maximum number of points that lie on the same straight line.\r\n", "notice": "", "clarification": "", "example": "Given 4 points: `(1,2)`, `(3,6)`, `(0,0)`, `(1,3)`.\r\n\r\nThe maximum number is `3`.", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 908, "title": "Line Reflection", "unique_name": "line-reflection", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[[1,2],[3,6],[0,0],[1,3]]\n", "total_accepted": 6616, "total_submissions": 40787, "contest": "", "has_followed_by": false}, "gas-station": {"id": 187, "unique_name": "gas-station", "user_status": null, "title": "Gas Station ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "There are _N_ gas stations along a circular route, where the amount of gas at station _i_ is `gas[i]`.\r\n\r\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from station i to its next station (_i_+1). You begin the journey with an empty tank at one of the gas stations.\r\n\r\nReturn the starting gas station's index if you can travel around the circuit once, otherwise return -1.", "notice": "The solution is guaranteed to be unique.", "clarification": "", "example": "Given `4` gas stations with `gas[i]=[1,1,3,1]`, and the `cost[i]=[2,2,1,1]`. The starting gas station's index is `2`.", "challenge": "O(n) time and O(1) extra space", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4]\n[5]\n\n", "total_accepted": 7235, "total_submissions": 22776, "contest": "", "has_followed_by": false}, "first-missing-positive": {"id": 189, "unique_name": "first-missing-positive", "user_status": null, "title": "First Missing Positive ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given an **unsorted** integer array, find the first **missing** positive integer.", "notice": "", "clarification": "", "example": "Given `[1,2,0]` return `3`,\r\nand `[3,4,-1,1]` return `2`.", "challenge": "Your algorithm should run in O(_n_) time and uses constant space.", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 633, "title": "Find the Duplicate Number", "unique_name": "find-the-duplicate-number", "level": 2, "accepted_rate": 35}, {"id": 570, "title": "Find the Missing Number II", "unique_name": "find-the-missing-number-ii", "level": 2, "accepted_rate": 25}, {"id": 196, "title": "Missing Number", "unique_name": "missing-number", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 11383, "total_submissions": 48491, "contest": "", "has_followed_by": false}, "next-permutation-ii": {"id": 190, "unique_name": "next-permutation-ii", "user_status": null, "title": "Next Permutation II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\r\n\r\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).", "notice": "", "clarification": "", "example": "Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\r\n\r\n`1,2,3` \u2192 `1,3,2`\r\n\r\n`3,2,1` \u2192 `1,2,3`\r\n\r\n`1,1,5` \u2192 `1,5,1`", "challenge": "The replacement must be in-place, do not allocate extra memory.", "tags": [{"id": 20, "name": "Permutation", "cn_name": "Permutation", "type": 13, "unique_name": "permutation", "alias": "", "problem_count": 8}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 190, "title": "Next Permutation II", "unique_name": "next-permutation-ii", "level": 2, "accepted_rate": 35}, {"id": 198, "title": "Permutation Index II", "unique_name": "permutation-index-ii", "level": 2, "accepted_rate": 24}, {"id": 197, "title": "Permutation Index", "unique_name": "permutation-index", "level": 1, "accepted_rate": 31}, {"id": 16, "title": "Permutations II", "unique_name": "permutations-ii", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[1]\n", "total_accepted": 4390, "total_submissions": 12531, "contest": "", "has_followed_by": false}, "maximum-product-subarray": {"id": 191, "unique_name": "maximum-product-subarray", "user_status": null, "title": "Maximum Product Subarray ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Find the contiguous subarray within an array (containing at least one number) which has the largest product.", "notice": "", "clarification": "", "example": "For example, given the array `[2,3,-2,4]`, the contiguous subarray `[2,3]` has the largest product = `6`.", "challenge": "", "tags": [{"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 1310, "title": "Product of Array Except Self", "unique_name": "product-of-array-except-self", "level": 2, "accepted_rate": 68}, {"id": 1119, "title": "Maximum Product of Three Numbers", "unique_name": "maximum-product-of-three-numbers", "level": 1, "accepted_rate": 46}, {"id": 1075, "title": "Subarray Product Less Than K", "unique_name": "subarray-product-less-than-k", "level": 2, "accepted_rate": 64}, {"id": 752, "title": "Rogue Knight Sven", "unique_name": "rogue-knight-sven", "level": 2, "accepted_rate": 37}, {"id": 149, "title": "Best Time to Buy and Sell Stock", "unique_name": "best-time-to-buy-and-sell-stock", "level": 2, "accepted_rate": 41}, {"id": 45, "title": "Maximum Subarray Difference", "unique_name": "maximum-subarray-difference", "level": 2, "accepted_rate": 25}, {"id": 44, "title": "Minimum Subarray", "unique_name": "minimum-subarray", "level": 1, "accepted_rate": 38}, {"id": 42, "title": "Maximum Subarray II", "unique_name": "maximum-subarray-ii", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[-1]\n", "total_accepted": 12134, "total_submissions": 39462, "contest": "", "has_followed_by": false}, "wildcard-matching": {"id": 192, "unique_name": "wildcard-matching", "user_status": null, "title": "Wildcard Matching", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Implement wildcard pattern matching with support for `'?'` and `'*'`.\r\n\r\n- `'?'` Matches any single character.\r\n- `'*'` Matches any sequence of characters (including the empty sequence).\r\n\r\nThe matching should cover the entire input string (not partial).", "notice": "", "clarification": "", "example": "    isMatch(\"aa\",\"a\") \u2192 false\r\n    isMatch(\"aa\",\"aa\") \u2192 true\r\n    isMatch(\"aaa\",\"aa\") \u2192 false\r\n    isMatch(\"aa\", \"*\") \u2192 true\r\n    isMatch(\"aa\", \"a*\") \u2192 true\r\n    isMatch(\"ab\", \"?*\") \u2192 true\r\n    isMatch(\"aab\", \"c*a*b\") \u2192 false", "challenge": "", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 103, "name": "Two Sigma", "cn_name": "Two Sigma", "type": 3, "unique_name": "two-sigma", "alias": "", "problem_count": 5}], "related_problems": [{"id": 154, "title": "Regular Expression Matching", "unique_name": "regular-expression-matching", "level": 3, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"aa\"\n\"a\"\n", "total_accepted": 6976, "total_submissions": 25566, "contest": "", "has_followed_by": false}, "missing-number": {"id": 196, "unique_name": "missing-number", "user_status": null, "title": "Missing Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Given an array contains *N* numbers of 0 .. *N*, find which number doesn't exist in the array.", "notice": "", "clarification": "", "example": "Given *N* = `3` and the array `[0, 1, 3]`, return `2`.", "challenge": "Do it in-place with O(1) extra memory and O(n) time.", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 681, "title": "First Missing Prime Number", "unique_name": "first-missing-prime-number", "level": 2, "accepted_rate": 27}, {"id": 633, "title": "Find the Duplicate Number", "unique_name": "find-the-duplicate-number", "level": 2, "accepted_rate": 35}, {"id": 570, "title": "Find the Missing Number II", "unique_name": "find-the-missing-number-ii", "level": 2, "accepted_rate": 25}, {"id": 189, "title": "First Missing Positive ", "unique_name": "first-missing-positive", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[0]\n", "total_accepted": 9082, "total_submissions": 26021, "contest": "", "has_followed_by": false}, "permutation-index": {"id": 197, "unique_name": "permutation-index", "user_status": null, "title": "Permutation Index", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "<p>Given a permutation which contains no repeated number, find its index in all the permutations of these numbers, which are ordered in lexicographical order. The index begins at 1.</p>", "notice": "", "clarification": "", "example": "<p>Given [1,2,4], return 1.</p>", "challenge": "", "tags": [{"id": 20, "name": "Permutation", "cn_name": "Permutation", "type": 13, "unique_name": "permutation", "alias": "", "problem_count": 8}], "related_problems": [{"id": 190, "title": "Next Permutation II", "unique_name": "next-permutation-ii", "level": 2, "accepted_rate": 35}, {"id": 51, "title": "Previous Permutation", "unique_name": "previous-permutation", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[1,2,4]\n", "total_accepted": 5533, "total_submissions": 17656, "contest": "", "has_followed_by": false}, "permutation-index-ii": {"id": 198, "unique_name": "permutation-index-ii", "user_status": null, "title": "Permutation Index II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a permutation which may contain repeated numbers, find its index in all the permutations of these numbers, which are ordered in lexicographical order. The index begins at 1.", "notice": "", "clarification": "", "example": "Given the permutation `[1, 4, 2, 2]`, return `3`.", "challenge": "", "tags": [{"id": 20, "name": "Permutation", "cn_name": "Permutation", "type": 13, "unique_name": "permutation", "alias": "", "problem_count": 8}], "related_problems": [{"id": 190, "title": "Next Permutation II", "unique_name": "next-permutation-ii", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[1,4,2,2]\n", "total_accepted": 2825, "total_submissions": 11679, "contest": "", "has_followed_by": false}, "longest-palindromic-substring": {"id": 200, "unique_name": "longest-palindromic-substring", "user_status": null, "title": "Longest Palindromic Substring", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given a string `S`, find the longest palindromic substring in `S`. You may assume that the maximum length of `S` is 1000, and there exists one unique longest palindromic substring.", "notice": "", "clarification": "", "example": "Given the string = `\"abcdzdcab\"`, return `\"cdzdc\"`.", "challenge": "O(n<sup>2</sup>) time is acceptable. Can you do it in O(n) time.", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 916, "title": "Palindrome Permutation", "unique_name": "palindrome-permutation", "level": 1, "accepted_rate": 58}, {"id": 893, "title": "Longest Palindromic Substring II", "unique_name": "longest-palindromic-substring-ii", "level": 3, "accepted_rate": 63}, {"id": 775, "title": "Palindrome Pairs", "unique_name": "palindrome-pairs", "level": 3, "accepted_rate": 23}, {"id": 667, "title": " Longest Palindromic Subsequence", "unique_name": "longest-palindromic-subsequence", "level": 2, "accepted_rate": 41}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}, {"id": 200, "title": "Longest Palindromic Substring", "unique_name": "longest-palindromic-substring", "level": 2, "accepted_rate": 29}, {"id": 108, "title": "Palindrome Partitioning II", "unique_name": "palindrome-partitioning-ii", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"a\"", "total_accepted": 14117, "total_submissions": 47867, "contest": "", "has_followed_by": false}, "segment-tree-build": {"id": 201, "unique_name": "segment-tree-build", "user_status": null, "title": "Segment Tree Build", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "The structure of Segment Tree is a binary tree which each node has two attributes `start` and `end` denote an segment / interval.\r\n\r\n_start_ and _end_ are both integers, they should be assigned in following rules:\r\n\r\n- The root's _start_ and _end_ is given by `build` method.\r\n- The left child of node A has `start=A.left, end=(A.left + A.right) / 2`.\r\n- The right child of node A has `start=(A.left + A.right) / 2 + 1, end=A.right`.\r\n- if _start_ equals to _end_, there will be no children for this node.\r\n\r\nImplement a `build` method with two parameters _start_ and _end_, so that we can create a corresponding segment tree with every node has the correct _start_ and _end_ value, return the root of this segment tree.", "notice": "", "clarification": "Segment Tree (a.k.a Interval Tree) is an advanced data structure which can support queries like:\r\n\r\n- which of these intervals contain a given point\r\n- which of these points are in a given interval\r\n\r\nSee wiki:\r\n[Segment Tree](https://en.wikipedia.org/wiki/Segment_tree \"Segment Tree\")\r\n[Interval Tree](https://en.wikipedia.org/wiki/Interval_tree \"Interval Tree\")\r\n", "example": "Given `start=0, end=3`. The segment tree will be:\r\n\r\n\t               [0,  3]\r\n\t             /        \\\r\n\t      [0,  1]           [2, 3]\r\n\t      /     \\           /     \\\r\n\t   [0, 0]  [1, 1]     [2, 2]  [3, 3]\r\n\r\n\r\nGiven `start=1, end=6`. The segment tree will be:\r\n\r\n\t               [1,  6]\r\n\t             /        \\\r\n\t      [1,  3]           [4,  6]\r\n\t      /     \\           /     \\\r\n\t   [1, 2]  [3,3]     [4, 5]   [6,6]\r\n\t   /    \\           /     \\\r\n\t[1,1]   [2,2]     [4,4]   [5,5]", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 751, "title": "John's business", "unique_name": "johns-business", "level": 2, "accepted_rate": 30}, {"id": 439, "title": "Segment Tree Build II", "unique_name": "segment-tree-build-ii", "level": 2, "accepted_rate": 41}, {"id": 247, "title": "Segment Tree Query II", "unique_name": "segment-tree-query-ii", "level": 2, "accepted_rate": 29}, {"id": 203, "title": "Segment Tree Modify", "unique_name": "segment-tree-modify", "level": 2, "accepted_rate": 40}, {"id": 202, "title": "Segment Tree Query", "unique_name": "segment-tree-query", "level": 2, "accepted_rate": 37}, {"id": 201, "title": "Segment Tree Build", "unique_name": "segment-tree-build", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[1, 4]\n", "total_accepted": 7838, "total_submissions": 20016, "contest": "", "has_followed_by": false}, "segment-tree-query": {"id": 202, "unique_name": "segment-tree-query", "user_status": null, "title": "Segment Tree Query", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "For an integer array (index from 0 to n-1, where n is the size of this array), in the corresponding SegmentTree, each node stores an extra attribute `max` to denote the maximum number in the interval of the array (index from start to end).\r\n\r\nDesign a `query` method with three parameters `root`, `start` and `end`,  find the maximum number in the interval [start, end] by the given root of segment tree.", "notice": "It is much easier to understand this problem if you finished [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\") first. ", "clarification": "", "example": "For array `[1, 4, 2, 3]`, the corresponding Segment Tree is:\r\n\r\n\t                  [0, 3, max=4]\r\n\t                 /             \\\r\n\t          [0,1,max=4]        [2,3,max=3]\r\n\t          /         \\        /         \\\r\n\t   [0,0,max=1] [1,1,max=4] [2,2,max=2], [3,3,max=3]\r\n\r\n\r\n\r\nquery(root, 1, 1), return `4`\r\n\r\nquery(root, 1, 2), return `4`\r\n\r\nquery(root, 2, 3), return `3`\r\n\r\nquery(root, 0, 2), return `4`\r\n\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 833, "title": "Process Sequence", "unique_name": "process-sequence", "level": 2, "accepted_rate": 32}, {"id": 751, "title": "John's business", "unique_name": "johns-business", "level": 2, "accepted_rate": 30}, {"id": 247, "title": "Segment Tree Query II", "unique_name": "segment-tree-query-ii", "level": 2, "accepted_rate": 29}, {"id": 203, "title": "Segment Tree Modify", "unique_name": "segment-tree-modify", "level": 2, "accepted_rate": 40}, {"id": 201, "title": "Segment Tree Build", "unique_name": "segment-tree-build", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"[0,3,max=4][0,1,max=4][2,3,max=3][0,0,max=1][1,1,max=4][2,2,max=2][3,3,max=3]\"\n1\n2\n", "total_accepted": 8140, "total_submissions": 21808, "contest": "", "has_followed_by": false}, "segment-tree-modify": {"id": 203, "unique_name": "segment-tree-modify", "user_status": null, "title": "Segment Tree Modify", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "For a `Maximum Segment Tree`, which each node has an extra value `max` to store the maximum value in this node's interval.\r\n\r\nImplement a `modify` function with three parameter `root`, `index` and `value` to change the node's value with _**[start, end] = [index, index]**_ to the new given value. Make sure after this change, every node in segment tree still has the **max** attribute with the correct value.", "notice": "We suggest you finish problem [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\") and [Segment Tree Query](http://www.lintcode.com/problem/segment-tree-query/ \"Segment Tree Query\") first.\r\n", "clarification": "", "example": "For segment tree:\r\n\r\n\t                      [1, 4, max=3]\r\n\t                    /                \\\r\n\t        [1, 2, max=2]                [3, 4, max=3]\r\n\t       /              \\             /             \\\r\n\t[1, 1, max=2], [2, 2, max=1], [3, 3, max=0], [4, 4, max=3]\r\n\r\nif call `modify(root, 2, 4)`, we can get:\r\n\r\n\t                      [1, 4, max=4]\r\n\t                    /                \\\r\n\t        [1, 2, max=4]                [3, 4, max=3]\r\n\t       /              \\             /             \\\r\n\t[1, 1, max=2], [2, 2, max=4], [3, 3, max=0], [4, 4, max=3]\r\n\r\n**or** call `modify(root, 4, 0)`, we can get:\r\n\r\n\t                      [1, 4, max=2]\r\n\t                    /                \\\r\n\t        [1, 2, max=2]                [3, 4, max=0]\r\n\t       /              \\             /             \\\r\n\t[1, 1, max=2], [2, 2, max=1], [3, 3, max=0], [4, 4, max=0]\r\n", "challenge": "Do it in `O(h)` time, h is the height of the segment tree.", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 247, "title": "Segment Tree Query II", "unique_name": "segment-tree-query-ii", "level": 2, "accepted_rate": 29}, {"id": 202, "title": "Segment Tree Query", "unique_name": "segment-tree-query", "level": 2, "accepted_rate": 37}, {"id": 201, "title": "Segment Tree Build", "unique_name": "segment-tree-build", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"[1,4,max=3][1,2,max=2][3,4,max=3][1,1,max=2][2,2,max=1][3,3,max=0][4,4,max=3]\"\n2\n4\n", "total_accepted": 6080, "total_submissions": 15117, "contest": "", "has_followed_by": false}, "singleton": {"id": 204, "title": "Singleton", "unique_name": "singleton", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "interval-minimum-number": {"id": 205, "unique_name": "interval-minimum-number", "user_status": null, "title": "Interval Minimum Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Given an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers `[start, end]`. For each query, calculate the minimum number between index start and end in the given array, return the result list.", "notice": "We suggest you finish problem [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\"), [Segment Tree Query](http://www.lintcode.com/problem/segment-tree-query/ \"Segment Tree Query\") and [Segment Tree Modify](http://lintcode.com/en/problem/segment-tree-modify/ \"Segment Tree Modify\") first.", "clarification": "", "example": "For array `[1,2,7,8,5]`, and queries `[(1,2),(0,4),(2,4)]`, return `[2,1,5]`\r\n", "challenge": "O(logN) time for each query", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 751, "title": "John's business", "unique_name": "johns-business", "level": 2, "accepted_rate": 30}, {"id": 207, "title": "Interval Sum II", "unique_name": "interval-sum-ii", "level": 3, "accepted_rate": 27}, {"id": 206, "title": "Interval Sum", "unique_name": "interval-sum", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[1,2,7,8,5]\n[(1,2),(0,4),(2,4)]\n", "total_accepted": 3983, "total_submissions": 14840, "contest": "", "has_followed_by": false}, "interval-sum": {"id": 206, "unique_name": "interval-sum", "user_status": null, "title": "Interval Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given an integer array (index from 0 to n-1, where n is the size of this array), and an query list. Each query has two integers `[start, end]`. For each query, calculate the sum number between index start and end in the given array, return the result list.", "notice": "We suggest you finish problem [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\"), [Segment Tree Query](http://www.lintcode.com/problem/segment-tree-query/ \"Segment Tree Query\") and [Segment Tree Modify](http://lintcode.com/en/problem/segment-tree-modify/ \"Segment Tree Modify\") first.", "clarification": "", "example": "For array `[1,2,7,8,5]`, and queries `[(0,4),(1,2),(2,4)]`, return `[23,9,20]`\r\n", "challenge": "O(logN) time for each query", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 207, "title": "Interval Sum II", "unique_name": "interval-sum-ii", "level": 3, "accepted_rate": 27}, {"id": 205, "title": "Interval Minimum Number", "unique_name": "interval-minimum-number", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,2,7,8,5]\n[(1,2),(0,4),(2,4)]\n", "total_accepted": 4171, "total_submissions": 14699, "contest": "", "has_followed_by": false}, "interval-sum-ii": {"id": 207, "unique_name": "interval-sum-ii", "user_status": null, "title": "Interval Sum II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given an integer array in the construct method, implement two methods `query(start, end)` and `modify(index, value)`:\r\n\r\n- For query(*start*, *end*), return the **sum** from index *start* to index *end* in the given array.\r\n- For modify(*index*, *value*), modify the number in the given index to *value*", "notice": "We suggest you finish problem [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\"), [Segment Tree Query](http://www.lintcode.com/problem/segment-tree-query/ \"Segment Tree Query\") and [Segment Tree Modify](http://lintcode.com/en/problem/segment-tree-modify/ \"Segment Tree Modify\") first.", "clarification": "", "example": "Given array A = `[1,2,7,8,5]`.\r\n\r\n- `query(0, 2)`, return `10`.\r\n- `modify(0, 4)`, change A[0] from *1* to *4*.\r\n- `query(0, 1)`, return `6`.\r\n- `modify(2, 1)`, change A[2] from *7* to *1*.\r\n- `query(2, 4)`, return `14`.", "challenge": "O(logN) time for `query` and `modify`.", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 206, "title": "Interval Sum", "unique_name": "interval-sum", "level": 2, "accepted_rate": 28}, {"id": 205, "title": "Interval Minimum Number", "unique_name": "interval-minimum-number", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,2,7,8,5]\n[query(0,2),modify(0,4),query(0,1),modify(2,1),query(2,4)]\n", "total_accepted": 3642, "total_submissions": 13119, "contest": "", "has_followed_by": false}, "assignment-operator-overloading-c-only": {"id": 208, "title": "Assignment Operator Overloading (C++ Only)", "unique_name": "assignment-operator-overloading-c-only", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 13, "title": "BAT\u9ad8\u9891\u9762\u8bd5\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/BAT.jpg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "first-unique-character-in-a-string": {"id": 209, "unique_name": "first-unique-character-in-a-string", "user_status": null, "title": "First Unique Character in a String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 42, "description": "Find the first unique character in a given string. You can assume that there is at least one unique character in the string.", "notice": "", "clarification": "", "example": "For `\"abaccdeff\"`, return `'b'`.", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 960, "title": "First Unique Number in a Stream II", "unique_name": "first-unique-number-in-a-stream-ii", "level": 2, "accepted_rate": 41}, {"id": 157, "title": "Unique Characters", "unique_name": "unique-characters", "level": 1, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "\"abaccdeff\"", "total_accepted": 1867, "total_submissions": 4427, "contest": "", "has_followed_by": false}, "null-terminated-string": {"id": 210, "title": "Null-terminated String", "unique_name": "null-terminated-string", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "string-permutation": {"id": 211, "title": "String Permutation", "unique_name": "string-permutation", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "space-replacement": {"id": 212, "unique_name": "space-replacement", "user_status": null, "title": "Space Replacement", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 18, "description": "Write a method to replace all spaces in a string with `%20`. The string is given in a characters array, you can assume it has enough space for replacement and you are given the true length of the string.\r\n\r\nYou code should also return the new length of the string after replacement.", "notice": "If you are using Java or Python\u00ef\u00bc\u0152please use characters array instead of string.", "clarification": "", "example": "Given `\"Mr John Smith\"`, length = `13`.\r\n\r\nThe string after replacement should be `\"Mr%20John%20Smith\"`, you need to change the string in-place and return the new length `17`.", "challenge": "Do it in-place.", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}], "related_problems": [{"id": 64, "title": "Merge Sorted Array", "unique_name": "merge-sorted-array", "level": 1, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "\"hello world\"\n11\n", "total_accepted": 10029, "total_submissions": 54247, "contest": "", "has_followed_by": false}, "string-compression": {"id": 213, "unique_name": "string-compression", "user_status": null, "title": "String Compression", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Implement a method to perform basic string compression using the counts of repeated characters. For example, the string `aabcccccaaa` would become `a2b1c5a3`.\r\n\r\nIf the \"compressed\" string would not become smaller than the original string, your method should return the original string.\r\n\r\nYou can assume the string has only upper and lower case letters (a-z).", "notice": "", "clarification": "", "example": "str=`aabcccccaaa` return `a2b1c5a3`\r\nstr=`aabbcc` return `aabbcc`\r\nstr=`aaaa` return `a4`", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 109, "name": "GoDaddy", "cn_name": "GoDaddy", "type": 3, "unique_name": "godaddy", "alias": "", "problem_count": 2}, {"id": 110, "name": "Expedia", "cn_name": "Expedia", "type": 3, "unique_name": "expedia", "alias": "", "problem_count": 2}, {"id": 111, "name": "Lyft", "cn_name": "Lyft", "type": 3, "unique_name": "lyft", "alias": "", "problem_count": 2}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"aabcccccaaa\"\n", "total_accepted": 897, "total_submissions": 3015, "contest": "", "has_followed_by": false}, "max-of-array": {"id": 214, "title": "Max of Array", "unique_name": "max-of-array", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "rate-limiter": {"id": 215, "title": "Rate Limiter", "unique_name": "rate-limiter", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "substring-rotation": {"id": 216, "title": "Substring Rotation", "unique_name": "substring-rotation", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "remove-duplicates-from-unsorted-list": {"id": 217, "title": "Remove Duplicates from Unsorted List", "unique_name": "remove-duplicates-from-unsorted-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "student-level": {"id": 218, "title": "Student Level", "unique_name": "student-level", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "insert-node-in-sorted-linked-list": {"id": 219, "title": "Insert Node in Sorted Linked List", "unique_name": "insert-node-in-sorted-linked-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 35, "title": "NVIDIA", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/NVIDIA.png", "privacy": "Password required"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "add-two-numbers-ii": {"id": 221, "unique_name": "add-two-numbers-ii", "user_status": null, "title": "Add Two Numbers II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in `forward` order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list.", "notice": "", "clarification": "", "example": "Given `6->1->7 + 2->9->5`. That is, `617 + 295`.\r\n\r\nReturn `9->1->2`. That is, `912`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 56, "name": "High Precision", "cn_name": "High Precision", "type": 14, "unique_name": "high-precision", "alias": "", "problem_count": 3}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 655, "title": "Add Strings", "unique_name": "add-strings", "level": 1, "accepted_rate": 29}, {"id": 656, "title": "Multiply Strings", "unique_name": "multiply-strings", "level": 2, "accepted_rate": 29}, {"id": 167, "title": "Add Two Numbers", "unique_name": "add-two-numbers", "level": 1, "accepted_rate": 22}, {"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "6->1->7->null\n2->9->5->null\n", "total_accepted": 3920, "total_submissions": 15533, "contest": "", "has_followed_by": false}, "setter-and-getter": {"id": 222, "title": "Setter and Getter", "unique_name": "setter-and-getter", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "palindrome-linked-list": {"id": 223, "unique_name": "palindrome-linked-list", "user_status": null, "title": "Palindrome Linked List", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Implement a function to check if a linked list is a palindrome.", "notice": "", "clarification": "", "example": "Given `1->2->1`, return true", "challenge": "Could you do it in O(n) time and O(1) space?", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 491, "title": "Palindrome Number", "unique_name": "palindrome-number", "level": 1, "accepted_rate": 38}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}, {"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "null\n", "total_accepted": 6478, "total_submissions": 21897, "contest": "", "has_followed_by": false}, "implement-three-stacks-by-single-array": {"id": 224, "title": "Implement Three Stacks by Single Array", "unique_name": "implement-three-stacks-by-single-array", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 5, "title": "Algorithm Final Test 23", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-10-21T15:00:00Z"}], "no_permission": true}, "find-node-in-linked-list": {"id": 225, "title": "Find Node in Linked List", "unique_name": "find-node-in-linked-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "set-of-stacks-ii": {"id": 226, "title": "Set of Stacks II", "unique_name": "set-of-stacks-ii", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "mock-hanoi-tower-by-stacks": {"id": 227, "unique_name": "mock-hanoi-tower-by-stacks", "user_status": null, "title": "Mock Hanoi Tower by Stacks", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "In the classic problem of Towers of Hanoi, you have 3 towers and N disks of different sizes which can slide onto any tower. The puzzle starts with disks sorted in ascending order of size from top to bottom (i.e., each disk sits on top of an even larger one). You have the following constraints:\r\n\r\n1. Only one disk can be moved at a time.\r\n2. A disk is slid off the top of one tower onto the next tower.\r\n3. A disk can only be placed on the top of a larger disk.\r\n\r\nWrite a program to move the disks from the first tower to the last using stacks.", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}], "related_problems": [], "comment_count": 0, "testcase_sample": "3\n", "total_accepted": 1753, "total_submissions": 4920, "contest": "", "has_followed_by": false}, "middle-of-linked-list": {"id": 228, "title": "Middle of Linked List", "unique_name": "middle-of-linked-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "stack-sorting": {"id": 229, "title": "Stack Sorting", "unique_name": "stack-sorting", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "animal-shelter": {"id": 230, "title": "Animal Shelter", "unique_name": "animal-shelter", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "typeahead": {"id": 231, "title": "Typeahead", "unique_name": "typeahead", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "tiny-url": {"id": 232, "title": "Tiny Url", "unique_name": "tiny-url", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "next-smaller-and-larger-number-with-the-same-1-bits": {"id": 233, "title": "Next Smaller and Larger Number with the Same 1 Bits", "unique_name": "next-smaller-and-larger-number-with-the-same-1-bits", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "webpage-crawler": {"id": 234, "title": "Webpage Crawler", "unique_name": "webpage-crawler", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "prime-factorization": {"id": 235, "title": "Prime Factorization", "unique_name": "prime-factorization", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "swap-bits": {"id": 236, "title": "Swap Bits", "unique_name": "swap-bits", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 25, "title": "Bit Manipulation", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2017-09-20_at_3.24.57_PM.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "missing-integer": {"id": 237, "title": "Missing Integer", "unique_name": "missing-integer", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "monochrome-screen": {"id": 238, "title": "Monochrome Screen", "unique_name": "monochrome-screen", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "root-of-equation": {"id": 239, "title": "Root of Equation", "unique_name": "root-of-equation", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "string-to-integer": {"id": 241, "title": "String to Integer", "unique_name": "string-to-integer", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "convert-binary-tree-to-linked-lists-by-depth": {"id": 242, "title": "Convert Binary Tree to Linked Lists by Depth", "unique_name": "convert-binary-tree-to-linked-lists-by-depth", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "amicable-pair": {"id": 243, "title": "Amicable Pair", "unique_name": "amicable-pair", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "subtree": {"id": 245, "unique_name": "subtree", "user_status": null, "title": "Subtree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 23, "description": "You have two very large binary trees: `T1`, with millions of nodes, and `T2`, with hundreds of nodes. Create an algorithm to decide if `T2` is a subtree of `T1`. ", "notice": "A tree T2 is a subtree of T1 if there exists a node n in T1 such that the subtree of n is identical to T2. That is, if you cut off the tree at node n, the two trees would be identical.\r\n", "clarification": "", "example": "T2 is a subtree of T1 in the following case:\r\n\r\n           1                3\r\n          / \\              / \r\n    T1 = 2   3      T2 =  4\r\n            /\r\n           4\r\n\r\nT2 isn't a subtree of T1 in the following case:\r\n\r\n           1               3\r\n          / \\               \\\r\n    T1 = 2   3       T2 =    4\r\n            /\r\n           4", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,2,3,#,#,4}\n{3,4}\n", "total_accepted": 10705, "total_submissions": 45700, "contest": "", "has_followed_by": false}, "binary-tree-path-sum-ii": {"id": 246, "title": "Binary Tree Path Sum II", "unique_name": "binary-tree-path-sum-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "segment-tree-query-ii": {"id": 247, "unique_name": "segment-tree-query-ii", "user_status": null, "title": "Segment Tree Query II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "For an array, we can build a `SegmentTree` for it, each node stores an extra attribute `count` to denote the number of elements in the the array which value is between interval start and end. (The array may not fully filled by elements)\r\n\r\nDesign a `query` method with three parameters `root`, `start` and `end`,  find the number of elements in the in array's interval [*start*, *end*] by the given root of value SegmentTree.", "notice": "It is much easier to understand this problem if you finished [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\")and [Segment Tree Query](http://www.lintcode.com/problem/segment-tree-query/ \"Segment Tree Query\") first. \r\n", "clarification": "", "example": "For array `[0, 2, 3]`, the corresponding value Segment Tree is:\r\n\r\n\t                     [0, 3, count=3]\r\n\t                     /             \\\r\n\t          [0,1,count=1]             [2,3,count=2]\r\n\t          /         \\               /            \\\r\n\t   [0,0,count=1] [1,1,count=0] [2,2,count=1], [3,3,count=1]\r\n\r\n\r\n\r\n`query(1, 1)`, return `0`\r\n\r\n`query(1, 2)`, return `1`\r\n\r\n`query(2, 3)`, return `2`\r\n\r\n`query(0, 2)`, return `2`\r\n\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 203, "title": "Segment Tree Modify", "unique_name": "segment-tree-modify", "level": 2, "accepted_rate": 40}, {"id": 202, "title": "Segment Tree Query", "unique_name": "segment-tree-query", "level": 2, "accepted_rate": 37}, {"id": 201, "title": "Segment Tree Build", "unique_name": "segment-tree-build", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"[0,3,count=3][0,1,count=1][2,3,count=2][0,0,count=1][1,1,count=0][2,2,count=1][3,3,count=1]\"\n[[1, 1], [1, 2], [2, 3], [0, 2]]\n", "total_accepted": 5435, "total_submissions": 18271, "contest": "", "has_followed_by": false}, "count-of-smaller-number": {"id": 248, "unique_name": "count-of-smaller-number", "user_status": null, "title": "Count of Smaller Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 21, "description": "Give you an integer array (index from 0 to n-1, where n is the size of this array, value from 0 to 10000) and an query list. For each query, give you an integer, return the number of element in the array that are smaller than the given integer.", "notice": "We suggest you finish problem [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\") and [Segment Tree Query II](http://lintcode.com/en/problem/segment-tree-query-ii/ \"Segment Tree Query II\")  first.\r\n\r\n", "clarification": "", "example": "For array `[1,2,7,8,5]`, and queries `[1,8,5]`, return `[0,4,2]`\r\n", "challenge": "Could you use three ways to do it.\r\n\r\n1. Just loop\r\n2. Sort and binary search\r\n3. Build Segment Tree and Search.", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 548, "title": "Intersection of Two Arrays II", "unique_name": "intersection-of-two-arrays-ii", "level": 1, "accepted_rate": 24}, {"id": 547, "title": "Intersection of Two Arrays", "unique_name": "intersection-of-two-arrays", "level": 1, "accepted_rate": 25}, {"id": 249, "title": "Count of Smaller Number before itself", "unique_name": "count-of-smaller-number-before-itself", "level": 3, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5,6]\n[1,2,3,4]\n", "total_accepted": 6317, "total_submissions": 29218, "contest": "", "has_followed_by": false}, "count-of-smaller-number-before-itself": {"id": 249, "unique_name": "count-of-smaller-number-before-itself", "user_status": null, "title": "Count of Smaller Number before itself", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 20, "description": "Give you an integer array (index from 0 to n-1, where n is the size of this array, data value from 0 to 10000) . For each element `Ai` in the array, count the number of element before this element `Ai` is smaller than it and return count number array.", "notice": "We suggest you finish problem [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\"), [Segment Tree Query II](http://lintcode.com/en/problem/segment-tree-query-ii/ \"Segment Tree Query II\") and [Count of Smaller Number](http://www.lintcode.com/zh-cn/problem/count-of-smaller-number// \"Count of Smaller Number before itself I\")  first.", "clarification": "Before you do this, you'd better complete the following three questions\uff1a [Segment Tree Build](http://www.lintcode.com/problem/segment-tree-build/ \"Segment Tree Build\")\uff0c  [Segment Tree Query II](http://lintcode.com/en/problem/segment-tree-query-ii/ \"Segment Tree Query II\")\uff0cand [Count of Smaller Number before itself I](http://lintcode.com/en/problem/count-of-smaller-number-before-itself-i/ \"Count of Smaller Number before itself I\") \u3002", "example": "For array `[1,2,7,8,5]`, return `[0,1,2,3,2]`", "challenge": "", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 88, "name": "Binary Indexed Tree", "cn_name": "Binary Indexed Tree", "type": 1, "unique_name": "binary-indexed-tree", "alias": "Fenwick Tree", "problem_count": 4}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 248, "title": "Count of Smaller Number", "unique_name": "count-of-smaller-number", "level": 2, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "[1,2,7,8,5]\n", "total_accepted": 4139, "total_submissions": 19738, "contest": "", "has_followed_by": false}, "drop-eggs": {"id": 254, "title": "Drop Eggs", "unique_name": "drop-eggs", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 51, "title": "Tencent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/tencent.jpg", "privacy": "Password required"}, {"id": 13, "title": "BAT\u9ad8\u9891\u9762\u8bd5\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/BAT.jpg", "privacy": "Password required"}], "contest_set": [{"id": 5, "title": "Algorithm Final Test 23", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-10-21T15:00:00Z"}], "no_permission": true}, "climbing-stairs-ii": {"id": 272, "title": "Climbing Stairs II", "unique_name": "climbing-stairs-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 4, "title": "Algorithm Mid-term Test 23", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-09-18T15:00:00Z"}], "no_permission": true}, "number-of-ways-to-represent-n-cents": {"id": 279, "title": "Number of Ways to Represent N Cents", "unique_name": "number-of-ways-to-represent-n-cents", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 4, "title": "Algorithm Mid-term Test 23", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-09-18T15:00:00Z"}], "no_permission": true}, "max-of-3-numbers": {"id": 283, "title": "Max of 3 Numbers", "unique_name": "max-of-3-numbers", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "sliding-window-median": {"id": 360, "unique_name": "sliding-window-median", "user_status": null, "title": "Sliding Window Median", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 18, "description": "Given an array of n integer, and a moving window(size k), move the window at each iteration from the start of the array, find the median of the element inside the window at each moving. (If there are even numbers in the array, return the N/2-th number after sorting the element in the window. )\r\n\r\n\r\n", "notice": "", "clarification": "", "example": "For array `[1,2,7,8,5]`,  moving window size k = 3. return `[2,7,7]`\r\n\r\n\r\nAt first the window is at the start of the array like this \r\n\r\n`[ | 1,2,7 | ,8,5]` , return the median `2`;\r\n\r\nthen the window move one step forward.\r\n\r\n`[1, | 2,7,8 | ,5]`, return the median `7`;\r\n\r\nthen the window move one step forward again.\r\n\r\n`[1,2, | 7,8,5 | ]`, return the median `7`;\r\n", "challenge": "O(nlog(n)) time", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 692, "title": "Sliding Window Unique Elements Sum", "unique_name": "sliding-window-unique-elements-sum", "level": 2, "accepted_rate": 14}, {"id": 604, "title": "Window Sum", "unique_name": "window-sum", "level": 1, "accepted_rate": 34}, {"id": 516, "title": "Paint House II", "unique_name": "paint-house-ii", "level": 3, "accepted_rate": 28}, {"id": 131, "title": "The Skyline Problem", "unique_name": "the-skyline-problem", "level": 4, "accepted_rate": 14}, {"id": 362, "title": "Sliding Window Maximum", "unique_name": "sliding-window-maximum", "level": 4, "accepted_rate": 27}, {"id": 81, "title": "Find Median from Data Stream", "unique_name": "find-median-from-data-stream", "level": 3, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[1,2,7,7,2]\n3\n", "total_accepted": 6652, "total_submissions": 35329, "contest": "", "has_followed_by": false}, "sliding-window-maximum": {"id": 362, "unique_name": "sliding-window-maximum", "user_status": null, "title": "Sliding Window Maximum", "is_favorited": false, "version": "v2", "level": 4, "accepted_rate": 27, "description": "Given an array of n integer with duplicate number, and a moving window(size k), move the window at each iteration from the start of the array, find the maximum number inside the window at each moving. ", "notice": "", "clarification": "", "example": "For array `[1, 2, 7, 7, 8]`,  moving window size `k = 3`. return `[7, 7, 8]`\r\n\r\n\r\nAt first the window is at the start of the array like this \r\n\r\n`[|1, 2, 7| ,7, 8]` , return the maximum `7`;\r\n\r\nthen the window move one step forward.\r\n\r\n`[1, |2, 7 ,7|, 8]`, return the maximum `7`;\r\n\r\nthen the window move one step forward again.\r\n\r\n`[1, 2, |7, 7, 8|]`, return the maximum `8`;", "challenge": "o(n) time and O(k) memory", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 692, "title": "Sliding Window Unique Elements Sum", "unique_name": "sliding-window-unique-elements-sum", "level": 2, "accepted_rate": 14}, {"id": 360, "title": "Sliding Window Median", "unique_name": "sliding-window-median", "level": 3, "accepted_rate": 18}, {"id": 604, "title": "Window Sum", "unique_name": "window-sum", "level": 1, "accepted_rate": 34}, {"id": 558, "title": "Sliding Window Matrix Maximum", "unique_name": "sliding-window-matrix-maximum", "level": 3, "accepted_rate": 36}, {"id": 516, "title": "Paint House II", "unique_name": "paint-house-ii", "level": 3, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[1,2,7,7,2]\n3\n", "total_accepted": 8682, "total_submissions": 31230, "contest": "", "has_followed_by": false}, "trapping-rain-water": {"id": 363, "unique_name": "trapping-rain-water", "user_status": null, "title": "Trapping Rain Water", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given *n* non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it is able to trap after raining.\r\n\r\n![Trapping Rain Water](https://lintcode-media.s3.amazonaws.com/problem/rainwatertrap.png \"Trapping Rain Water I\")", "notice": "", "clarification": "", "example": "Given `[0,1,0,2,1,0,1,3,2,1,2,1]`, return `6`.", "challenge": "O(n) time and O(1) memory\r\n\r\nO(n) time and O(n) memory is also acceptable.", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 19, "name": "Forward-Backward Traversal", "cn_name": "Forward-Backward Traversal", "type": 1, "unique_name": "forward-backward-traversal", "alias": "", "problem_count": 5}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}], "related_problems": [{"id": 1310, "title": "Product of Array Except Self", "unique_name": "product-of-array-except-self", "level": 2, "accepted_rate": 68}, {"id": 364, "title": "Trapping Rain Water II", "unique_name": "trapping-rain-water-ii", "level": 3, "accepted_rate": 27}, {"id": 383, "title": "Container With Most Water", "unique_name": "container-with-most-water", "level": 2, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "[0,1,0,2,1,0,1,3,2,1,2,1]\n", "total_accepted": 10396, "total_submissions": 26527, "contest": "", "has_followed_by": false}, "trapping-rain-water-ii": {"id": 364, "unique_name": "trapping-rain-water-ii", "user_status": null, "title": "Trapping Rain Water II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given *n* x *m* non-negative integers representing an elevation map 2d where the area of each cell is *1* x *1*, compute how much water it is able to trap after raining.\r\n\r\n![](https://lintcode-media.s3.amazonaws.com/problem/trapping-rain-water-ii.jpg \"\")", "notice": "", "clarification": "", "example": "Given `5*4` matrix \r\n\r\n\t[12,13,0,12]\r\n\t[13,4,13,12]\r\n\t[13,8,10,12]\r\n\t[12,13,12,12]\r\n\t[13,13,13,13]\r\n\r\n\r\nreturn `14`.", "challenge": "", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 363, "title": "Trapping Rain Water", "unique_name": "trapping-rain-water", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[[12,13,0,12],[13,4,13,12],[13,8,10,12],[12,13,12,12],[13,13,13,13]]\n", "total_accepted": 5345, "total_submissions": 19512, "contest": "", "has_followed_by": false}, "count-1-in-binary": {"id": 365, "unique_name": "count-1-in-binary", "user_status": null, "title": "Count 1 in Binary", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 34, "description": "Count how many `1` in binary representation of a 32-bit integer.", "notice": "", "clarification": "", "example": "Given `32`, return `1`\r\n\r\nGiven `5`, return `2`\r\n\r\nGiven `1023`, return `9`", "challenge": "If the integer is *n* bits with *m* 1 bits. Can you do it in O(m) time?", "tags": [{"id": 41, "name": "Binary", "cn_name": "Binary", "type": 1, "unique_name": "binary", "alias": "", "problem_count": 4}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 664, "title": "Counting Bits", "unique_name": "counting-bits", "level": 2, "accepted_rate": 51}, {"id": 142, "title": "O(1) Check Power of 2", "unique_name": "o1-check-power-of-2", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "32(100000)\n", "total_accepted": 11822, "total_submissions": 34621, "contest": "", "has_followed_by": false}, "fibonacci": {"id": 366, "unique_name": "fibonacci", "user_status": null, "title": "Fibonacci", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 25, "description": "Find the *N*th number in Fibonacci sequence.\r\n\r\nA Fibonacci sequence is defined as follow:\r\n\r\n- The first two numbers are 0 and 1.\r\n- The *i* th number is the sum of *i*-1 th number and *i*-2 th number.\r\n\r\nThe first ten numbers in Fibonacci sequence is:\r\n\r\n`0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...`", "notice": "The *N*th fibonacci number won't exceed the max value of signed 32-bit integer in the test cases.", "clarification": "", "example": "Given `1`, return `0`\r\n\r\nGiven `2`, return `1`\r\n\r\nGiven `10`, return `34`", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 53, "name": "Non Recursion", "cn_name": "Non Recursion", "type": 13, "unique_name": "non-recursion", "alias": "", "problem_count": 5}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 735, "title": "Replace With Greatest From Right", "unique_name": "replace-with-greatest-from-right", "level": 2, "accepted_rate": 20}, {"id": 734, "title": "Number of Subsequences of Form a^i b^j c^k", "unique_name": "number-of-subsequences-of-form-ai-bj-ck", "level": 2, "accepted_rate": 32}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}, {"id": 111, "title": "Climbing Stairs", "unique_name": "climbing-stairs", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 29495, "total_submissions": 117785, "contest": "", "has_followed_by": false}, "expression-tree-build": {"id": 367, "unique_name": "expression-tree-build", "user_status": null, "title": "Expression Tree Build", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "The structure of Expression Tree is a binary tree to evaluate certain expressions.\r\nAll leaves of the Expression Tree have an number string value. All non-leaves of the Expression Tree have an operator string value.\r\n\r\nNow, given an expression array, build the expression tree of this expression, return the root of this expression tree.", "notice": "", "clarification": "See wiki:\r\n[Expression Tree](http://en.wikipedia.org/wiki/Binary_expression_tree \"Expression Tree\")\r\n", "example": "For the expression `(2*6-(23+7)/(1+2))` (which can be represented by [\"2\" \"*\" \"6\" \"-\" \"(\" \"23\" \"+\" \"7\" \")\" \"/\" \"(\" \"1\" \"+\" \"2\" \")\"]). \r\nThe expression tree will be like\r\n\r\n\t                 [ - ]\r\n\t             /          \\\r\n\t        [ * ]              [ / ]\r\n\t      /     \\           /         \\\r\n\t    [ 2 ]  [ 6 ]      [ + ]        [ + ]\r\n\t                     /    \\       /      \\\r\n\t                   [ 23 ][ 7 ] [ 1 ]   [ 2 ] .\r\n\r\nAfter building the tree, you just need to return root node `[-]`. \r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 575, "title": "Decode String", "unique_name": "decode-string", "level": 2, "accepted_rate": 28}, {"id": 368, "title": "Expression Evaluation", "unique_name": "expression-evaluation", "level": 3, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[\"2\",\"*\",\"6\",\"-\",\"(\",\"23\",\"+\",\"7\",\")\",\"/\",\"(\",\"1\",\"+\",\"2\",\")\"]\n", "total_accepted": 2987, "total_submissions": 12588, "contest": "", "has_followed_by": false}, "expression-evaluation": {"id": 368, "unique_name": "expression-evaluation", "user_status": null, "title": "Expression Evaluation", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "Given an expression string array, return the final result of this expression", "notice": "The expression contains only `integer`, `+`, `-`, `*`, `/`, `(`, `)`. ", "clarification": "", "example": "For the expression `2*6-(23+7)/(1+2)`,\r\ninput is\r\n\r\n\t[\r\n\t  \"2\", \"*\", \"6\", \"-\", \"(\",\r\n\t  \"23\", \"+\", \"7\", \")\", \"/\",\r\n\t  \"(\", \"1\", \"+\", \"2\", \")\"\r\n\t],\r\n\r\nreturn `2`", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 719, "title": "Calculate Maximum Value", "unique_name": "calculate-maximum-value", "level": 2, "accepted_rate": 29}, {"id": 575, "title": "Decode String", "unique_name": "decode-string", "level": 2, "accepted_rate": 28}, {"id": 367, "title": "Expression Tree Build", "unique_name": "expression-tree-build", "level": 3, "accepted_rate": 23}, {"id": 370, "title": "Convert Expression to Reverse Polish Notation", "unique_name": "convert-expression-to-reverse-polish-notation", "level": 3, "accepted_rate": 27}, {"id": 369, "title": "Convert Expression to Polish Notation", "unique_name": "convert-expression-to-polish-notation", "level": 3, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 2939, "total_submissions": 12475, "contest": "", "has_followed_by": false}, "convert-expression-to-polish-notation": {"id": 369, "title": "Convert Expression to Polish Notation", "unique_name": "convert-expression-to-polish-notation", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "convert-expression-to-reverse-polish-notation": {"id": 370, "unique_name": "convert-expression-to-reverse-polish-notation", "user_status": null, "title": "Convert Expression to Reverse Polish Notation", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given an expression string array, return the Reverse Polish notation of this expression. (remove the parentheses)", "notice": "", "clarification": "", "example": "For the expression `[3 - 4 + 5]` (which denote by [\"3\", \"-\", \"4\", \"+\", \"5\"]), return `[3 4 - 5 +]` (which denote by [\"3\", \"4\", \"-\", \"5\", \"+\"])\r\n\r\n", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}], "related_problems": [{"id": 424, "title": "Evaluate Reverse Polish Notation ", "unique_name": "evaluate-reverse-polish-notation", "level": 2, "accepted_rate": 27}, {"id": 369, "title": "Convert Expression to Polish Notation", "unique_name": "convert-expression-to-polish-notation", "level": 3, "accepted_rate": 26}, {"id": 368, "title": "Expression Evaluation", "unique_name": "expression-evaluation", "level": 3, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[\"3\",\"-\",\"4\",\"+\",\"5\"]\n", "total_accepted": 2765, "total_submissions": 10003, "contest": "", "has_followed_by": false}, "print-numbers-by-recursion": {"id": 371, "unique_name": "print-numbers-by-recursion", "user_status": null, "title": "Print Numbers by Recursion", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Print numbers from 1 to the largest number with N digits by recursion.", "notice": "It's pretty easy to do recursion like:\r\n\r\n\trecursion(i) {\r\n\t    if i > largest number:\r\n\t        return\r\n\t    results.add(i)\r\n\t    recursion(i + 1)\r\n\t}\r\n\r\nhowever this cost a lot of recursion memory as the recursion depth maybe very large. Can you do it in another way to recursive with at most N depth?", "clarification": "", "example": "Given `N = 1`, return `[1,2,3,4,5,6,7,8,9]`.\r\n\r\nGiven `N = 2`, return `[1,2,3,4,5,6,7,8,9,10,11,12,...,99]`.", "challenge": "Do it in recursion, not for-loop.", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}], "related_problems": [{"id": 15, "title": "Permutations", "unique_name": "permutations", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "1\n", "total_accepted": 4819, "total_submissions": 17694, "contest": "", "has_followed_by": false}, "delete-node-in-a-linked-list": {"id": 372, "unique_name": "delete-node-in-a-linked-list", "user_status": null, "title": "Delete Node in a Linked List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 50, "description": "Implement an algorithm to delete a node in the middle of a singly linked list, given only access to that node.", "notice": "", "clarification": "", "example": "Linked list is `1->2->3->4`, and given node `3`, delete the node in place `1->2->4`\r\n", "challenge": "", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 35, "name": "Cracking The Coding Interview", "cn_name": "Cracking The Coding Interview", "type": 4, "unique_name": "cracking-the-coding-interview", "alias": "", "problem_count": 15}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [{"id": 174, "title": "Remove Nth Node From End of List", "unique_name": "remove-nth-node-from-end-of-list", "level": 1, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "1->2->3->4->null\n3", "total_accepted": 12351, "total_submissions": 24599, "contest": "", "has_followed_by": false}, "partition-array-by-odd-and-even": {"id": 373, "unique_name": "partition-array-by-odd-and-even", "user_status": null, "title": "Partition Array by Odd and Even", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 42, "description": "Partition an integers array into odd number first and even number second.", "notice": "", "clarification": "", "example": "Given `[1, 2, 3, 4]`, return `[1, 3, 2, 4]`", "challenge": "Do it in-place.", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 31, "title": "Partition Array", "unique_name": "partition-array", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 10682, "total_submissions": 25064, "contest": "", "has_followed_by": false}, "spiral-matrix": {"id": 374, "unique_name": "spiral-matrix", "user_status": null, "title": "Spiral Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a matrix of *m* x *n* elements (*m* rows, *n* columns), return all elements of the matrix in spiral order.", "notice": "", "clarification": "", "example": "Given the following matrix:\r\n\r\n\t[\r\n\t [ 1, 2, 3 ],\r\n\t [ 4, 5, 6 ],\r\n\t [ 7, 8, 9 ]\r\n\t]\r\n\r\nYou should return `[1,2,3,6,9,8,7,4,5]`.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 381, "title": "Spiral Matrix II", "unique_name": "spiral-matrix-ii", "level": 2, "accepted_rate": 39}, {"id": 185, "title": "Matrix Zigzag Traversal", "unique_name": "matrix-zigzag-traversal", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[[1,2,3],[4,5,6],[7,8,9]]\n", "total_accepted": 4585, "total_submissions": 18478, "contest": "", "has_followed_by": false}, "clone-binary-tree": {"id": 375, "unique_name": "clone-binary-tree", "user_status": null, "title": "Clone Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 49, "description": "For the given binary tree, return a **deep copy** of it.", "notice": "", "clarification": "", "example": "Given a binary tree:\r\n\r\n\t     1\r\n\t   /  \\\r\n\t  2    3\r\n\t / \\\r\n\t4   5\r\n\r\nreturn the new binary tree with same structure and same value:\r\n\r\n\t     1\r\n\t   /  \\\r\n\t  2    3\r\n\t / \\\r\n\t4   5", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}], "related_problems": [{"id": 137, "title": "Clone Graph", "unique_name": "clone-graph", "level": 2, "accepted_rate": 30}, {"id": 105, "title": "Copy List with Random Pointer", "unique_name": "copy-list-with-random-pointer", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "{1,2,3}\n", "total_accepted": 5912, "total_submissions": 11939, "contest": "", "has_followed_by": false}, "binary-tree-path-sum": {"id": 376, "title": "Binary Tree Path Sum", "unique_name": "binary-tree-path-sum", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "convert-binary-search-tree-to-doubly-linked-list": {"id": 378, "title": "Convert Binary Search Tree to Doubly Linked List", "unique_name": "convert-binary-search-tree-to-doubly-linked-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 50, "title": "Baidu", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/baidu.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "reorder-array-to-construct-the-minimum-number": {"id": 379, "unique_name": "reorder-array-to-construct-the-minimum-number", "user_status": null, "title": "Reorder array to construct the minimum number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 19, "description": "Construct minimum number by reordering a given non-negative integer array. Arrange them such that they form the minimum number.", "notice": "The result may be very large, so you need to return a string instead of an integer.", "clarification": "", "example": "Given `[3, 32, 321]`, there are 6 possible numbers can be constructed by reordering the array:\r\n\r\n\t3+32+321=332321\r\n\t3+321+32=332132\r\n\t32+3+321=323321\r\n\t32+321+3=323213\r\n\t321+3+32=321332\r\n\t321+32+3=321323\r\n\r\nSo after reordering, the minimum number is `321323`, and return it.", "challenge": "Do it in O(nlogn) time complexity.", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 182, "title": "Delete Digits", "unique_name": "delete-digits", "level": 2, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[3,32,321]\n", "total_accepted": 2148, "total_submissions": 11013, "contest": "", "has_followed_by": false}, "intersection-of-two-linked-lists": {"id": 380, "unique_name": "intersection-of-two-linked-lists", "user_status": null, "title": "Intersection of Two Linked Lists", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Write a program to find the node at which the intersection of two singly linked lists begins.", "notice": "- If the two linked lists have no intersection at all, return `null`.\r\n- The linked lists must retain their original structure after the function returns.\r\n- You may assume there are no cycles anywhere in the entire linked structure.", "clarification": "", "example": "The following two linked lists:\r\n\r\n\tA:          a1 \u2192 a2\r\n\t                   \u2198\r\n\t                     c1 \u2192 c2 \u2192 c3\r\n\t                   \u2197            \r\n\tB:     b1 \u2192 b2 \u2192 b3\r\n\r\nbegin to intersect at node c1.", "challenge": "Your code should preferably run in O(*n*) time and use only O(*1*) memory.", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 103, "title": "Linked List Cycle II ", "unique_name": "linked-list-cycle-ii", "level": 3, "accepted_rate": 37}, {"id": 102, "title": "Linked List Cycle ", "unique_name": "linked-list-cycle", "level": 2, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "No intersection\nnull\nnull\n", "total_accepted": 8049, "total_submissions": 20189, "contest": "", "has_followed_by": false}, "spiral-matrix-ii": {"id": 381, "unique_name": "spiral-matrix-ii", "user_status": null, "title": "Spiral Matrix II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given an integer n, generate a square matrix filled with elements from 1 to n^2 in spiral order.", "notice": "", "clarification": "", "example": "Given n = `3`,\r\n\r\nYou should return the following matrix:\r\n\r\n```\r\n[\r\n  [ 1, 2, 3 ],\r\n  [ 8, 9, 4 ],\r\n  [ 7, 6, 5 ]\r\n]\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 374, "title": "Spiral Matrix", "unique_name": "spiral-matrix", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "3\n", "total_accepted": 3068, "total_submissions": 7830, "contest": "", "has_followed_by": false}, "triangle-count": {"id": 382, "title": "Triangle Count", "unique_name": "triangle-count", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 7, "title": "Advanced Algorithm Term 13 - HW1", "cover": "https://lintcode-media.s3.amazonaws.com/gaosuan_1.png", "start_at": "2016-11-25T23:00:00Z"}], "no_permission": true}, "container-with-most-water": {"id": 383, "unique_name": "container-with-most-water", "user_status": null, "title": "Container With Most Water", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Given n non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, where each represents a point at coordinate `(i, ai)`. *n* vertical lines are drawn such that the two endpoints of line *i* is at `(i, ai)` and `(i, 0)`. Find two lines, which together with *x*-axis forms a container, such that the container contains the most water.\r\n\r\n", "notice": "You may not slant the container.", "clarification": "", "example": "Given `[1,3,2]`, the max area of the container is `2`.", "challenge": "", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 363, "title": "Trapping Rain Water", "unique_name": "trapping-rain-water", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[]\n", "total_accepted": 6841, "total_submissions": 16579, "contest": "", "has_followed_by": false}, "longest-substring-without-repeating-characters": {"id": 384, "unique_name": "longest-substring-without-repeating-characters", "user_status": null, "title": "Longest Substring Without Repeating Characters", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given a string, find the length of the longest substring without repeating characters. ", "notice": "", "clarification": "", "example": "For example, the longest substring without repeating letters for `\"abcabcbb\"` is `\"abc\"`, which the length is `3`. \r\n\r\nFor `\"bbbbb\"` the longest substring is `\"b\"`, with the length of `1`.", "challenge": "O(n) time", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}], "related_problems": [{"id": 386, "title": "Longest Substring with At Most K Distinct Characters ", "unique_name": "longest-substring-with-at-most-k-distinct-characters", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"aaaa\"\n", "total_accepted": 14528, "total_submissions": 50281, "contest": "", "has_followed_by": false}, "arraylist": {"id": 385, "title": "ArrayList", "unique_name": "arraylist", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "longest-substring-with-at-most-k-distinct-characters": {"id": 386, "unique_name": "longest-substring-with-at-most-k-distinct-characters", "user_status": null, "title": "Longest Substring with At Most K Distinct Characters ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a string *s*, find the length of the longest substring T that contains at most k distinct characters.", "notice": "", "clarification": "", "example": "For example, Given s = `\"eceba\"`, `k = 3`,\r\n\r\nT is `\"eceb\"` which its length is `4`.", "challenge": "O(n), n is the size of the string *s*.", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 104, "name": "Coupang", "cn_name": "Coupang", "type": 3, "unique_name": "coupang", "alias": "", "problem_count": 8}, {"id": 105, "name": "AppDynamics", "cn_name": "AppDynamics", "type": 3, "unique_name": "appdynamics", "alias": "", "problem_count": 1}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 384, "title": "Longest Substring Without Repeating Characters", "unique_name": "longest-substring-without-repeating-characters", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "\"eceba\"\n3\n", "total_accepted": 8585, "total_submissions": 34729, "contest": "", "has_followed_by": false}, "the-smallest-difference": {"id": 387, "unique_name": "the-smallest-difference", "user_status": null, "title": "The Smallest Difference", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Given two array of integers(the first array is array `A`, the second array is array `B`), now we are going to find a element in array A which is A[i], and another element in array B which is B[j], so that the difference between A[i] and B[j] (|A[i] - B[j]|) is as small as possible, return their smallest difference. ", "notice": "", "clarification": "", "example": "For example, given array A = `[3,6,7,4]`, B = `[2,8,9,3]`,  return `0`\r\n\r\n", "challenge": "O(*n* log *n*) time", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,4,6,7]\n[2,3,8,9]\n", "total_accepted": 5805, "total_submissions": 16343, "contest": "", "has_followed_by": false}, "permutation-sequence": {"id": 388, "unique_name": "permutation-sequence", "user_status": null, "title": "Permutation Sequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given *n* and *k*, return the *k*-th permutation sequence.", "notice": "*n* will be between 1 and 9 inclusive.", "clarification": "", "example": "For `n = 3`, all permutations are listed as follows:\r\n\r\n\t\"123\"\r\n\t\"132\"\r\n\t\"213\"\r\n\t\"231\"\r\n\t\"312\"\r\n\t\"321\"\r\n\r\nIf `k = 4`, the fourth permutation is `\"231\"`", "challenge": "O(n*k) in time complexity is easy, can you do it in O(n^2) or less?", "tags": [{"id": 20, "name": "Permutation", "cn_name": "Permutation", "type": 13, "unique_name": "permutation", "alias": "", "problem_count": 8}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 52, "title": "Next Permutation", "unique_name": "next-permutation", "level": 2, "accepted_rate": 26}, {"id": 51, "title": "Previous Permutation", "unique_name": "previous-permutation", "level": 2, "accepted_rate": 28}, {"id": 16, "title": "Permutations II", "unique_name": "permutations-ii", "level": 2, "accepted_rate": 27}, {"id": 15, "title": "Permutations", "unique_name": "permutations", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "1\n1\n", "total_accepted": 4082, "total_submissions": 13951, "contest": "", "has_followed_by": false}, "valid-sudoku": {"id": 389, "unique_name": "valid-sudoku", "user_status": null, "title": "Valid Sudoku", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 26, "description": "Determine whether a Sudoku is valid.\r\n\r\nThe Sudoku board could be partially filled, where empty cells are filled with the character `.`.", "notice": "A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.", "clarification": "What is `Sudoku`?\r\n\r\n- <http://sudoku.com.au/TheRules.aspx>\r\n- <https://zh.wikipedia.org/wiki/%E6%95%B8%E7%8D%A8>\r\n- <https://en.wikipedia.org/wiki/Sudoku>\r\n- <http://baike.baidu.com/subview/961/10842669.htm>\r\n", "example": "The following partially filed sudoku is valid.\r\n\r\n![Valid Sudoku](https://lintcode-media.s3.amazonaws.com/problem/valid-sudoku.png \"Valid Sudoku\")", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\".87654321\",\"2........\",\"3........\",\"4........\",\"5........\",\"6........\",\"7........\",\"8........\",\"9........\"]\n", "total_accepted": 5952, "total_submissions": 22239, "contest": "", "has_followed_by": false}, "find-peak-element-ii": {"id": 390, "title": "Find Peak Element II", "unique_name": "find-peak-element-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 2, "title": "LintCode Monthly Contest - Aug 2016", "cover": "https://lintcode-media.s3.amazonaws.com/cover.png", "start_at": "2016-08-15T01:30:00Z"}], "no_permission": true}, "number-of-airplanes-in-the-sky": {"id": 391, "unique_name": "number-of-airplanes-in-the-sky", "user_status": null, "title": "Number of Airplanes in the Sky", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given an interval list which are flying and landing time of the flight. How many airplanes are on the sky at most?", "notice": "If landing and flying happens at the same time, we consider landing should happen at first.", "clarification": "", "example": "For interval list\r\n\r\n```\r\n[\r\n  (1,10),\r\n  (2,3),\r\n  (5,8),\r\n  (4,7)\r\n]\r\n```\r\n\r\nReturn `3`", "challenge": "", "tags": [{"id": 94, "name": "Sweep line", "cn_name": "Sweep line", "type": 1, "unique_name": "sweep-line", "alias": "", "problem_count": 3}, {"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 39, "name": "LintCode Copyright", "cn_name": "LintCode Copyright", "type": 4, "unique_name": "lintcode-copyright", "alias": "", "problem_count": 68}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 821, "title": "Time Intersection", "unique_name": "time-intersection", "level": 2, "accepted_rate": 43}, {"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[(1,10),(2,3),(5,8),(4,7)]\n", "total_accepted": 10067, "total_submissions": 35867, "contest": "", "has_followed_by": false}, "house-robber": {"id": 392, "unique_name": "house-robber", "user_status": null, "title": "House Robber", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\r\n\r\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight **without alerting the police**.", "notice": "", "clarification": "", "example": "Given `[3, 8, 4]`, return `8`.", "challenge": "O(n) time and O(1) memory.", "tags": [{"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 1142, "title": "Non-negative Integers without Consecutive Ones", "unique_name": "non-negative-integers-without-consecutive-ones", "level": 3, "accepted_rate": 70}, {"id": 866, "title": "Coin Path", "unique_name": "coin-path", "level": 3, "accepted_rate": 35}, {"id": 535, "title": "House Robber III", "unique_name": "house-robber-iii", "level": 2, "accepted_rate": 32}, {"id": 534, "title": "House Robber II", "unique_name": "house-robber-ii", "level": 2, "accepted_rate": 28}, {"id": 515, "title": "Paint House", "unique_name": "paint-house", "level": 2, "accepted_rate": 36}, {"id": 514, "title": "Paint Fence", "unique_name": "paint-fence", "level": 1, "accepted_rate": 32}, {"id": 366, "title": "Fibonacci", "unique_name": "fibonacci", "level": 0, "accepted_rate": 25}, {"id": 111, "title": "Climbing Stairs", "unique_name": "climbing-stairs", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[3,8,4]\r\n", "total_accepted": 12766, "total_submissions": 36861, "contest": "", "has_followed_by": false}, "best-time-to-buy-and-sell-stock-iv": {"id": 393, "unique_name": "best-time-to-buy-and-sell-stock-iv", "user_status": null, "title": "Best Time to Buy and Sell Stock IV", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 25, "description": "Say you have an array for which the *i*th element is the price of a given stock on day *i*.\r\n\r\nDesign an algorithm to find the maximum profit. You may complete at most `k` transactions.\r\n", "notice": "You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).", "clarification": "", "example": "Given prices = `[4,4,6,1,1,4,2,5]`, and k = `2`, return `6`.", "challenge": "O(nk) time.", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 151, "title": "Best Time to Buy and Sell Stock III ", "unique_name": "best-time-to-buy-and-sell-stock-iii", "level": 2, "accepted_rate": 28}, {"id": 150, "title": "Best Time to Buy and Sell Stock II ", "unique_name": "best-time-to-buy-and-sell-stock-ii", "level": 2, "accepted_rate": 50}, {"id": 149, "title": "Best Time to Buy and Sell Stock", "unique_name": "best-time-to-buy-and-sell-stock", "level": 2, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "1\n[1,2]\n", "total_accepted": 6137, "total_submissions": 23813, "contest": "", "has_followed_by": false}, "coins-in-a-line": {"id": 394, "unique_name": "coins-in-a-line", "user_status": null, "title": "Coins in a Line", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "There are n coins in a line. Two players take turns to take one or two coins from right side until there are no more coins left. The player who take the last coin wins.\r\n\r\nCould you please decide the **first** play will win or lose?", "notice": "", "clarification": "", "example": "n = `1`, return `true`.\r\n\r\nn = `2`, return `true`.\r\n\r\nn = `3`, return `false`.\r\n\r\nn = `4`, return `true`.\r\n\r\nn = `5`, return `true`.", "challenge": "O(n) time and O(1) memory", "tags": [{"id": 55, "name": "Game Theory", "cn_name": "Game Theory", "type": 14, "unique_name": "game-theory", "alias": "", "problem_count": 3}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 396, "title": "Coins in a Line III", "unique_name": "coins-in-a-line-iii", "level": 3, "accepted_rate": 36}, {"id": 395, "title": "Coins in a Line II", "unique_name": "coins-in-a-line-ii", "level": 2, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "100\n", "total_accepted": 12549, "total_submissions": 28544, "contest": "", "has_followed_by": false}, "coins-in-a-line-ii": {"id": 395, "unique_name": "coins-in-a-line-ii", "user_status": null, "title": "Coins in a Line II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "There are n coins with different value in a line. Two players take turns to take one or two coins from left side until there are no more coins left. The player who take the coins with the most value wins.\r\n\r\nCould you please decide the **first** player will win or lose?", "notice": "", "clarification": "", "example": "Given values array A = `[1,2,2]`, return `true`.\r\n\r\nGiven A = `[1,2,4]`, return `false`.", "challenge": "", "tags": [{"id": 55, "name": "Game Theory", "cn_name": "Game Theory", "type": 14, "unique_name": "game-theory", "alias": "", "problem_count": 3}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 396, "title": "Coins in a Line III", "unique_name": "coins-in-a-line-iii", "level": 3, "accepted_rate": 36}, {"id": 394, "title": "Coins in a Line", "unique_name": "coins-in-a-line", "level": 2, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[1,2,2]\n", "total_accepted": 9299, "total_submissions": 27801, "contest": "", "has_followed_by": false}, "coins-in-a-line-iii": {"id": 396, "title": "Coins in a Line III", "unique_name": "coins-in-a-line-iii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "longest-continuous-increasing-subsequence": {"id": 397, "unique_name": "longest-continuous-increasing-subsequence", "user_status": null, "title": "Longest Continuous Increasing Subsequence", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "Give an integer array\u00ef\u00bc\u0152find the longest increasing continuous subsequence in this array.\r\n\r\nAn increasing continuous subsequence:\r\n\r\n- Can be from right to left or from left to right.\r\n- Indices of the integers in the subsequence should be continuous.", "notice": "O(n) time and O(1) extra space. ", "clarification": "", "example": "For `[5, 4, 2, 1, 3]`, the LICS  is `[5, 4, 2, 1]`, return `4`.\r\n\r\nFor `[5, 1, 2, 3, 4]`, the LICS  is `[1, 2, 3, 4]`, return `4`.\r\n", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1093, "title": "Number of Longest Increasing Subsequence", "unique_name": "number-of-longest-increasing-subsequence", "level": 2, "accepted_rate": 39}, {"id": 857, "title": "Minimum Window Subsequence", "unique_name": "minimum-window-subsequence", "level": 3, "accepted_rate": 38}, {"id": 398, "title": "Longest Increasing Continuous subsequence II", "unique_name": "longest-increasing-continuous-subsequence-ii", "level": 3, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[5,4,2,1,3]\n", "total_accepted": 12137, "total_submissions": 39387, "contest": "", "has_followed_by": false}, "longest-increasing-continuous-subsequence-ii": {"id": 398, "title": "Longest Increasing Continuous subsequence II", "unique_name": "longest-increasing-continuous-subsequence-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "nuts-bolts-problem": {"id": 399, "unique_name": "nuts-bolts-problem", "user_status": null, "title": "Nuts & Bolts Problem ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "Given a set of *n* nuts of different sizes and *n* bolts of different sizes. There is a one-one mapping between nuts and bolts. Comparison of a nut to another nut or a bolt to another bolt is not allowed. It means nut can only be compared with bolt and bolt can only be compared with nut to see which one is bigger/smaller. \r\n\r\nWe will give you a compare function to compare nut with bolt.\r\n", "notice": "", "clarification": "", "example": "Given nuts = `['ab','bc','dd','gg']`, bolts = `['AB','GG', 'DD', 'BC']`. \r\n\r\nYour code should find the matching bolts and nuts. \r\n\r\none of the possible return:\r\n\r\nnuts = `['ab','bc','dd','gg']`, bolts = `['AB','BC','DD','GG']`.\r\n\r\nwe will tell you the match compare function. If we give you another compare function.\r\n\r\nthe possible return is the following:\r\n\r\nnuts = `['ab','bc','dd','gg']`, bolts = `['BC','AA','DD','GG']`.\r\n\r\n So you must use the compare function that we give to do the sorting.\r\n\r\n`The order of the nuts or bolts does not matter. You just need to find the matching bolt for each nut.`", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 21, "name": "Quick Sort", "cn_name": "Quick Sort", "type": 12, "unique_name": "quick-sort", "alias": "", "problem_count": 8}], "related_problems": [{"id": 74, "title": "First Bad Version", "unique_name": "first-bad-version", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[\"ab\",\"bc\",\"dd\",\"gg\"]\n[\"AB\",\"GG\",\"DD\",\"BC\"]\n", "total_accepted": 5949, "total_submissions": 29510, "contest": "", "has_followed_by": false}, "maximum-gap": {"id": 400, "unique_name": "maximum-gap", "user_status": null, "title": "Maximum Gap ", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given an unsorted array, find the maximum difference between the successive elements in its sorted form.\r\n\r\nReturn 0 if the array contains less than 2 elements.", "notice": "You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.", "clarification": "", "example": "Given `[1, 9, 2, 5]`, the sorted form of it is `[1, 2, 5, 9]`, the maximum gap is between `5` and `9` = `4`. ", "challenge": "Sort is easy but will cost O(nlogn) time. Try to solve it in linear time and space.", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,2,1,4,3]\n", "total_accepted": 4103, "total_submissions": 15055, "contest": "", "has_followed_by": false}, "kth-smallest-number-in-sorted-matrix": {"id": 401, "unique_name": "kth-smallest-number-in-sorted-matrix", "user_status": null, "title": "Kth Smallest Number in Sorted Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Find the *k*th smallest number in at row and column sorted matrix.", "notice": "", "clarification": "", "example": "Given k = `4` and a matrix:\r\n\r\n\t[\r\n\t  [1 ,5 ,7],\r\n\t  [3 ,7 ,8],\r\n\t  [4 ,8 ,9],\r\n\t]\r\n\r\nreturn `5`", "challenge": "Solve it in O(k log n) time where n is the bigger one between row size and column size.", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 30, "name": "Priority Queue", "cn_name": "Priority Queue", "type": 21, "unique_name": "priority-queue", "alias": "", "problem_count": 13}, {"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}], "related_problems": [{"id": 791, "title": "Merge Number", "unique_name": "merge-number", "level": 2, "accepted_rate": 39}, {"id": 465, "title": "Kth Smallest Sum In Two Sorted Arrays", "unique_name": "kth-smallest-sum-in-two-sorted-arrays", "level": 3, "accepted_rate": 28}, {"id": 5, "title": "Kth Largest Element", "unique_name": "kth-largest-element", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[1,5,7],[3,7,8],[4,8,9]]\n4\n", "total_accepted": 10296, "total_submissions": 39775, "contest": "", "has_followed_by": false}, "continuous-subarray-sum": {"id": 402, "unique_name": "continuous-subarray-sum", "user_status": null, "title": "Continuous Subarray Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Given an integer array, find a continuous subarray where the sum of numbers is the biggest. Your code should return the index of the first number and the index of the last number. (If their are duplicate answer, return anyone)", "notice": "", "clarification": "", "example": "Give `[-3, 1, 3, -3, 4]`, return `[1,4]`.", "challenge": "", "tags": [{"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 403, "title": "Continuous Subarray Sum II", "unique_name": "continuous-subarray-sum-ii", "level": 2, "accepted_rate": 15}, {"id": 41, "title": "Maximum Subarray", "unique_name": "maximum-subarray", "level": 1, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[-3,1,3,-3,4]\n", "total_accepted": 7670, "total_submissions": 29070, "contest": "", "has_followed_by": false}, "continuous-subarray-sum-ii": {"id": 403, "title": "Continuous Subarray Sum II", "unique_name": "continuous-subarray-sum-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "subarray-sum-ii": {"id": 404, "title": "Subarray Sum II", "unique_name": "subarray-sum-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "submatrix-sum": {"id": 405, "unique_name": "submatrix-sum", "user_status": null, "title": "Submatrix Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Given an integer matrix, find a submatrix where the sum of numbers is zero. Your code should return the coordinate of the left-up and right-down number.", "notice": "", "clarification": "", "example": "Given matrix\r\n\r\n\t[\r\n\t  [1 ,5 ,7],\r\n\t  [3 ,7 ,-8],\r\n\t  [4 ,-8 ,9],\r\n\t]\r\n\r\nreturn `[(1,1), (2,2)]`\r\n", "challenge": "O(n<sup>3</sup>) time.", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}], "related_problems": [{"id": 944, "title": "Maximum Submatrix", "unique_name": "maximum-submatrix", "level": 2, "accepted_rate": 37}, {"id": 139, "title": "Subarray Sum Closest", "unique_name": "subarray-sum-closest", "level": 2, "accepted_rate": 21}, {"id": 138, "title": "Subarray Sum", "unique_name": "subarray-sum", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[[1,5,7],[3,7,-8],[4,-8,9]]\n", "total_accepted": 5039, "total_submissions": 18741, "contest": "", "has_followed_by": false}, "minimum-size-subarray-sum": {"id": 406, "unique_name": "minimum-size-subarray-sum", "user_status": null, "title": "Minimum Size Subarray Sum ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum \u00e2\u2030\u00a5 s. If there isn't one, return -1 instead.\r\n", "notice": "", "clarification": "", "example": "Given the array `[2,3,1,2,4,3]` and s = `7`, the subarray `[4,3]` has the minimal length under the problem constraint.", "challenge": "If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 911, "title": "Maximum Size Subarray Sum Equals k", "unique_name": "maximum-size-subarray-sum-equals-k", "level": 2, "accepted_rate": 44}, {"id": 139, "title": "Subarray Sum Closest", "unique_name": "subarray-sum-closest", "level": 2, "accepted_rate": 21}, {"id": 138, "title": "Subarray Sum", "unique_name": "subarray-sum", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[2,3,1,2,4,3]\n7\n", "total_accepted": 11972, "total_submissions": 42083, "contest": "", "has_followed_by": false}, "plus-one": {"id": 407, "unique_name": "plus-one", "user_status": null, "title": "Plus One", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Given a non-negative number represented as an array of digits, plus one to the number.\r\n\r\nThe digits are stored such that the most significant digit is at the head of the list.", "notice": "", "clarification": "", "example": "Given `[1,2,3]` which represents 123, return `[1,2,4]`.\r\n\r\nGiven `[9,9,9]` which represents 999, return `[1,0,0,0]`.", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 904, "title": "Plus One Linked List", "unique_name": "plus-one-linked-list", "level": 2, "accepted_rate": 49}, {"id": 414, "title": "Divide Two Integers ", "unique_name": "divide-two-integers", "level": 2, "accepted_rate": 18}, {"id": 408, "title": "Add Binary", "unique_name": "add-binary", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[0]\n", "total_accepted": 10755, "total_submissions": 32997, "contest": "", "has_followed_by": false}, "add-binary": {"id": 408, "unique_name": "add-binary", "user_status": null, "title": "Add Binary", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given two binary strings, return their sum (also a binary string).", "notice": "", "clarification": "", "example": "a = `11`\r\n\r\nb = `1`\r\n\r\nReturn `100`", "challenge": "", "tags": [{"id": 41, "name": "Binary", "cn_name": "Binary", "type": 1, "unique_name": "binary", "alias": "", "problem_count": 4}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 414, "title": "Divide Two Integers ", "unique_name": "divide-two-integers", "level": 2, "accepted_rate": 18}, {"id": 407, "title": "Plus One", "unique_name": "plus-one", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "\"0\"\n\"0\"\n", "total_accepted": 11032, "total_submissions": 42542, "contest": "", "has_followed_by": false}, "gray-code": {"id": 411, "unique_name": "gray-code", "user_status": null, "title": "Gray Code", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "The gray code is a binary numeral system where two successive values differ in only one bit.\r\n\r\nGiven a non-negative integer `n` representing the total number of bits in the code, find the sequence of gray code. A gray code sequence must begin with `0` and with cover all 2<sup>n</sup> integers.", "notice": "For a given `n`, a gray code sequence is not uniquely defined.\r\n\r\n`[0,2,3,1]` is also a valid gray code sequence according to the above definition.\r\n", "clarification": "", "example": "Given `n = 2`, return `[0,1,3,2]`. Its gray code sequence is:\r\n\r\n    00 - 0\r\n    01 - 1\r\n    11 - 3\r\n    10 - 2", "challenge": "O(2<sup>n</sup>) time.", "tags": [{"id": 41, "name": "Binary", "cn_name": "Binary", "type": 1, "unique_name": "binary", "alias": "", "problem_count": 4}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [{"id": 973, "title": "1-bit and 2-bit Characters", "unique_name": "1-bit-and-2-bit-characters", "level": 1, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "0\n", "total_accepted": 3701, "total_submissions": 9480, "contest": "", "has_followed_by": false}, "candy": {"id": 412, "unique_name": "candy", "user_status": null, "title": "Candy", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 32, "description": "There are *N* children standing in a line. Each child is assigned a rating value.\r\n\r\nYou are giving candies to these children subjected to the following requirements:\r\n\r\n* Each child must have at least one candy.\r\n\r\n* Children with a higher rating get more candies than their neighbors.\r\n\r\nWhat is the minimum candies you must give?", "notice": "", "clarification": "", "example": "Given ratings = `[1, 2]`, return `3`.\r\n\r\nGiven ratings = `[1, 1, 1]`, return `3`.\r\n\r\nGiven ratings = `[1, 2, 2]`, return `4`. ([1,2,1]).", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[0]\n", "total_accepted": 2733, "total_submissions": 8435, "contest": "", "has_followed_by": false}, "reverse-integer": {"id": 413, "unique_name": "reverse-integer", "user_status": null, "title": "Reverse Integer", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 28, "description": "Reverse digits of an integer. Returns 0 when the reversed integer overflows (signed 32-bit integer).", "notice": "", "clarification": "", "example": "Given `x = 123`, return `321`\r\n\r\nGiven `x = -123`, return `-321`", "challenge": "", "tags": [{"id": 58, "name": "Integer", "cn_name": "Integer", "type": 1, "unique_name": "integer", "alias": "", "problem_count": 2}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}], "related_problems": [{"id": 767, "title": "Reverse Array", "unique_name": "reverse-array", "level": 1, "accepted_rate": 52}, {"id": 37, "title": "Reverse 3-digit Integer", "unique_name": "reverse-3-digit-integer", "level": 0, "accepted_rate": 48}], "comment_count": 0, "testcase_sample": "0", "total_accepted": 9231, "total_submissions": 32079, "contest": "", "has_followed_by": false}, "divide-two-integers": {"id": 414, "unique_name": "divide-two-integers", "user_status": null, "title": "Divide Two Integers ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 18, "description": "Divide two integers without using multiplication, division and mod operator.\r\n\r\nIf it is overflow, return `2147483647`", "notice": "", "clarification": "", "example": "Given dividend = `100` and divisor = `9`, return `11`.", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}], "related_problems": [{"id": 407, "title": "Plus One", "unique_name": "plus-one", "level": 1, "accepted_rate": 32}, {"id": 408, "title": "Add Binary", "unique_name": "add-binary", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "0\n1", "total_accepted": 7583, "total_submissions": 41941, "contest": "", "has_followed_by": false}, "valid-palindrome": {"id": 415, "unique_name": "valid-palindrome", "user_status": null, "title": "Valid Palindrome", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.", "notice": "Have you consider that the string might be empty? This is a good question to ask during an interview.\r\n\r\nFor the purpose of this problem, we define empty string as valid palindrome.", "clarification": "", "example": "`\"A man, a plan, a canal: Panama\"` is a palindrome.\r\n\r\n`\"race a car\"` is not a palindrome.", "challenge": "O(n) time without extra memory.", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 893, "title": "Longest Palindromic Substring II", "unique_name": "longest-palindromic-substring-ii", "level": 3, "accepted_rate": 63}, {"id": 891, "title": "Valid Palindrome II", "unique_name": "valid-palindrome-ii", "level": 1, "accepted_rate": 44}, {"id": 745, "title": "Palindromic Ranges", "unique_name": "palindromic-ranges", "level": 1, "accepted_rate": 28}, {"id": 744, "title": "Sum of first K even-length Palindrome numbers", "unique_name": "sum-of-first-k-even-length-palindrome-numbers", "level": 2, "accepted_rate": 49}, {"id": 491, "title": "Palindrome Number", "unique_name": "palindrome-number", "level": 1, "accepted_rate": 38}, {"id": 627, "title": "Longest Palindrome", "unique_name": "longest-palindrome", "level": 1, "accepted_rate": 32}, {"id": 223, "title": "Palindrome Linked List", "unique_name": "palindrome-linked-list", "level": 2, "accepted_rate": 29}, {"id": 200, "title": "Longest Palindromic Substring", "unique_name": "longest-palindromic-substring", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "\"\"\n", "total_accepted": 16702, "total_submissions": 65497, "contest": "", "has_followed_by": false}, "valid-number": {"id": 417, "unique_name": "valid-number", "user_status": null, "title": "Valid Number", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 26, "description": "Validate if a given string is numeric.\r\n", "notice": "", "clarification": "", "example": "`\"0\"` => `true`\r\n\r\n`\" 0.1 \"` => `true`\r\n\r\n`\"abc\"` => `false`\r\n\r\n`\"1 a\"` => `false`\r\n\r\n`\"2e10\"` => `true`", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"3\"\n", "total_accepted": 3778, "total_submissions": 14443, "contest": "", "has_followed_by": false}, "integer-to-roman": {"id": 418, "unique_name": "integer-to-roman", "user_status": null, "title": "Integer to Roman", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Given an integer, convert it to a roman numeral.\r\n\r\nThe number is guaranteed to be within the range from `1` to `3999`.", "notice": "", "clarification": "What is *Roman Numeral*?\r\n\r\n- <https://en.wikipedia.org/wiki/Roman_numerals>\r\n- <https://zh.wikipedia.org/wiki/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97>\r\n- <http://baike.baidu.com/view/42061.htm>", "example": "`4` -> `IV`\r\n\r\n`12` -> `XII`\r\n\r\n`21` -> `XXI`\r\n\r\n`99` -> `XCIX`\r\n\r\nmore examples at: <http://literacy.kent.edu/Minigrants/Cinci/romanchart.htm>", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 1305, "title": "Integer to English Words", "unique_name": "integer-to-english-words", "level": 1, "accepted_rate": 39}, {"id": 688, "title": "The Number In Words", "unique_name": "the-number-in-words", "level": 2, "accepted_rate": 22}, {"id": 419, "title": "Roman to Integer ", "unique_name": "roman-to-integer", "level": 2, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "1\n", "total_accepted": 4481, "total_submissions": 9521, "contest": "", "has_followed_by": false}, "roman-to-integer": {"id": 419, "unique_name": "roman-to-integer", "user_status": null, "title": "Roman to Integer ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "Given a roman numeral, convert it to an integer.\r\n\r\nThe answer is guaranteed to be within the range from 1 to 3999.", "notice": "", "clarification": "What is *Roman Numeral*?\r\n\r\n- <https://en.wikipedia.org/wiki/Roman_numerals>\r\n- <https://zh.wikipedia.org/wiki/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97>\r\n- <http://baike.baidu.com/view/42061.htm>", "example": "`IV` -> `4`\r\n\r\n`XII` -> `12`\r\n\r\n`XXI` -> `21`\r\n\r\n`XCIX` -> `99`", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 688, "title": "The Number In Words", "unique_name": "the-number-in-words", "level": 2, "accepted_rate": 22}, {"id": 418, "title": "Integer to Roman", "unique_name": "integer-to-roman", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "\"DCXXI\"\n", "total_accepted": 5113, "total_submissions": 11479, "contest": "", "has_followed_by": false}, "count-and-say": {"id": 420, "unique_name": "count-and-say", "user_status": null, "title": "Count and Say", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "The count-and-say sequence is the sequence of integers beginning as follows:\r\n\r\n`1, 11, 21, 1211, 111221, ...`\r\n\r\n`1` is read off as `\"one 1\"` or `11`.\r\n\r\n`11` is read off as `\"two 1s\"` or `21`.\r\n\r\n`21` is read off as `\"one 2, then one 1\"` or `1211`.\r\n\r\nGiven an integer `n`, generate the `n`th sequence.", "notice": "The sequence of integers will be represented as a string.", "clarification": "", "example": "Given n = `5`, return `\"111221\"`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "1\n", "total_accepted": 8631, "total_submissions": 27955, "contest": "", "has_followed_by": false}, "simplify-path": {"id": 421, "unique_name": "simplify-path", "user_status": null, "title": "Simplify Path ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given an absolute path for a file (Unix-style), simplify it.", "notice": "", "clarification": "", "example": "`\"/home/\"`, => `\"/home\"`\r\n\r\n`\"/a/./b/../../c/\"`, => `\"/c\"`", "challenge": "* Did you consider the case where path = `\"/../\"`?\r\n\r\n    In this case, you should return `\"/\"`.\r\n\r\n* Another corner case is the path might contain multiple slashes `'/'` together, such as `\"/home//foo/\"`.\r\n\r\n    In this case, you should ignore redundant slashes and return `\"/home/foo\"`.", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"/\"", "total_accepted": 4018, "total_submissions": 17423, "contest": "", "has_followed_by": false}, "length-of-last-word": {"id": 422, "unique_name": "length-of-last-word", "user_status": null, "title": "Length of Last Word", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "Given a string s consists of upper/lower-case alphabets and empty space characters `' '`, return the length of last word in the string.\r\n\r\nIf the last word does not exist, return `0`.", "notice": "A word is defined as a character sequence consists of non-space characters only.", "clarification": "", "example": "Given s = `\"Hello World\"`, return `5`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 133, "title": "Longest Word", "unique_name": "longest-word", "level": 1, "accepted_rate": 38}], "comment_count": 0, "testcase_sample": "\"\"", "total_accepted": 8131, "total_submissions": 22610, "contest": "", "has_followed_by": false}, "valid-parentheses": {"id": 423, "unique_name": "valid-parentheses", "user_status": null, "title": "Valid Parentheses", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Given a string containing just the characters `'(', ')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.", "notice": "", "clarification": "", "example": "The brackets must close in the correct order, `\"()\"` and `\"()[]{}\"` are all valid but `\"(]\"` and `\"([)]\"` are not.", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [{"id": 427, "title": "Generate Parentheses", "unique_name": "generate-parentheses", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"[\"", "total_accepted": 13709, "total_submissions": 47207, "contest": "", "has_followed_by": false}, "evaluate-reverse-polish-notation": {"id": 424, "unique_name": "evaluate-reverse-polish-notation", "user_status": null, "title": "Evaluate Reverse Polish Notation ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Evaluate the value of an arithmetic expression in [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).\r\n\r\nValid operators are `+`, `-`, `*`, `/`. Each operand may be an integer or another expression.", "notice": "", "clarification": "", "example": "    [\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9\r\n    [\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 978, "title": "Basic Calculator", "unique_name": "basic-calculator", "level": 3, "accepted_rate": 52}, {"id": 370, "title": "Convert Expression to Reverse Polish Notation", "unique_name": "convert-expression-to-reverse-polish-notation", "level": 3, "accepted_rate": 27}, {"id": 369, "title": "Convert Expression to Polish Notation", "unique_name": "convert-expression-to-polish-notation", "level": 3, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[\"18\"]", "total_accepted": 5435, "total_submissions": 19739, "contest": "", "has_followed_by": false}, "letter-combinations-of-a-phone-number": {"id": 425, "unique_name": "letter-combinations-of-a-phone-number", "user_status": null, "title": "Letter Combinations of a Phone Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given a digit string excluded `01`, return all possible letter combinations that the number could represent.\r\n\r\nA mapping of digit to letters (just like on the telephone buttons) is given below.\r\n\r\n![Cellphone](https://lintcode-media.s3.amazonaws.com/problem/200px-Telephone-keypad2.svg.png)", "notice": "Although the above answer is in lexicographical order, your answer could be in any order you want.", "clarification": "", "example": "Given `\"23\"`\r\n\r\nReturn `[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]`", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 935, "title": "Cartesian Product", "unique_name": "cartesian-product", "level": 2, "accepted_rate": 61}], "comment_count": 0, "testcase_sample": "\"\"", "total_accepted": 8257, "total_submissions": 26241, "contest": "", "has_followed_by": false}, "restore-ip-addresses": {"id": 426, "unique_name": "restore-ip-addresses", "user_status": null, "title": "Restore IP Addresses", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a string containing only digits, restore it by returning all possible valid IP address combinations.", "notice": "", "clarification": "", "example": "Given `\"25525511135\"`, return\r\n\r\n```\r\n[\r\n  \"255.255.11.135\",\r\n  \"255.255.111.35\"\r\n]\r\n```\r\n\r\nOrder does not matter.", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 17, "title": "Subsets", "unique_name": "subsets", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "\"0000\"", "total_accepted": 4438, "total_submissions": 17646, "contest": "", "has_followed_by": false}, "generate-parentheses": {"id": 427, "unique_name": "generate-parentheses", "user_status": null, "title": "Generate Parentheses", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.", "notice": "", "clarification": "", "example": "Given `n = 3`, a solution set is:\r\n\r\n`\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"`", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 423, "title": "Valid Parentheses", "unique_name": "valid-parentheses", "level": 1, "accepted_rate": 29}, {"id": 164, "title": "Unique Binary Search Trees II ", "unique_name": "unique-binary-search-trees-ii", "level": 2, "accepted_rate": 33}, {"id": 163, "title": "Unique Binary Search Trees ", "unique_name": "unique-binary-search-trees", "level": 2, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 6355, "total_submissions": 15996, "contest": "", "has_followed_by": false}, "powx-n": {"id": 428, "unique_name": "powx-n", "user_status": null, "title": "Pow(x, n) ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Implement pow(x, n).", "notice": "You don't need to care about the precision of your answer, it's acceptable if the expected answer and your answer 's difference is smaller than `1e-3`.", "clarification": "", "example": "    Pow(2.1, 3) = 9.261\r\n    Pow(0, 1) = 0\r\n    Pow(1, 0) = 1", "challenge": "O(logn) time", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}, {"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1275, "title": "Super Pow", "unique_name": "super-pow", "level": 2, "accepted_rate": 47}, {"id": 141, "title": "Sqrt(x)", "unique_name": "sqrtx", "level": 1, "accepted_rate": 26}, {"id": 140, "title": "Fast Power", "unique_name": "fast-power", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "8.88023\n3", "total_accepted": 11445, "total_submissions": 34713, "contest": "", "has_followed_by": false}, "scramble-string": {"id": 430, "unique_name": "scramble-string", "user_status": null, "title": "Scramble String", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "Given a string `s1`, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\r\n\r\nBelow is one possible representation of `s1 = \"great\"`:\r\n\r\n        great\r\n       /    \\\r\n      gr    eat\r\n     / \\    /  \\\r\n    g   r  e   at\r\n               / \\\r\n              a   t\r\n\r\nTo scramble the string, we may choose any non-leaf node and swap its two children.\r\n\r\nFor example, if we choose the node `\"gr\"` and swap its two children, it produces a scrambled string `\"rgeat\"`.\r\n\r\n        rgeat\r\n       /    \\\r\n      rg    eat\r\n     / \\    /  \\\r\n    r   g  e   at\r\n               / \\\r\n              a   t\r\n\r\nWe say that `\"rgeat\"` is a scrambled string of `\"great\"`.\r\n\r\nSimilarly, if we continue to swap the children of nodes `\"eat\"` and `\"at\"`, it produces a scrambled string `\"rgtae\"`.\r\n\r\n        rgtae\r\n       /    \\\r\n      rg    tae\r\n     / \\    /  \\\r\n    r   g  ta  e\r\n           / \\\r\n          t   a\r\n\r\nWe say that `\"rgtae\"` is a scrambled string of `\"great\"`.\r\n\r\nGiven two strings `s1` and `s2` of the same length, determine if `s2` is a scrambled string of `s1`.", "notice": "", "clarification": "", "example": "", "challenge": "O(n<sup>3</sup>) time", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"a\"\n\"a\"", "total_accepted": 5466, "total_submissions": 15465, "contest": "", "has_followed_by": false}, "connected-component-in-undirected-graph": {"id": 431, "title": "Connected Component in Undirected Graph", "unique_name": "connected-component-in-undirected-graph", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "find-the-weak-connected-component-in-the-directed-graph": {"id": 432, "title": "Find the Weak Connected Component  in the Directed Graph", "unique_name": "find-the-weak-connected-component-in-the-directed-graph", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "number-of-islands": {"id": 433, "unique_name": "number-of-islands", "user_status": null, "title": "Number of Islands", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 26, "description": "Given a boolean 2D matrix, `0` is represented as the sea, `1` is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.\r\n\r\nFind the number of islands. ", "notice": "", "clarification": "", "example": "Given graph:\r\n\r\n    [\r\n      [1, 1, 0, 0, 0],\r\n      [0, 1, 0, 0, 1],\r\n      [0, 0, 0, 1, 1],\r\n      [0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 1]\r\n    ]\r\n\r\nreturn `3`.", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 860, "title": "Number of Distinct Islands", "unique_name": "number-of-distinct-islands", "level": 2, "accepted_rate": 41}, {"id": 804, "title": "Number of Distinct Islands II", "unique_name": "number-of-distinct-islands-ii", "level": 3, "accepted_rate": 35}, {"id": 677, "title": "Number of Big Islands", "unique_name": "number-of-big-islands", "level": 2, "accepted_rate": 23}, {"id": 663, "title": "Walls and Gates", "unique_name": "walls-and-gates", "level": 2, "accepted_rate": 36}, {"id": 477, "title": "Surrounded Regions", "unique_name": "surrounded-regions", "level": 2, "accepted_rate": 24}, {"id": 434, "title": "Number of Islands II", "unique_name": "number-of-islands-ii", "level": 3, "accepted_rate": 19}], "comment_count": 0, "testcase_sample": "[[1,1,0,0,0],[0,1,0,0,1],[0,0,0,1,1],[0,0,0,0,0],[0,0,0,0,1]]\n", "total_accepted": 23261, "total_submissions": 87773, "contest": "", "has_followed_by": false}, "number-of-islands-ii": {"id": 434, "unique_name": "number-of-islands-ii", "user_status": null, "title": "Number of Islands II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 19, "description": "Given a n,m which means the row and column of the 2D matrix and an array of pair A( size k). Originally, the 2D matrix is all 0 which means there is only sea in the matrix. The list pair has k operator and each operator has two integer A[i].x, A[i].y means that you can change the grid matrix[A[i].x][A[i].y] from sea to island. Return how many island are there in the matrix after each operator.", "notice": "0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.", "clarification": "", "example": "Given `n` = `3`, `m` = `3`, array of pair A = `[(0,0),(0,1),(2,2),(2,1)]`.\r\n\r\nreturn `[1,1,2,2]`.", "challenge": "", "tags": [{"id": 59, "name": "Union Find", "cn_name": "Union Find", "type": 21, "unique_name": "union-find", "alias": "", "problem_count": 11}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 860, "title": "Number of Distinct Islands", "unique_name": "number-of-distinct-islands", "level": 2, "accepted_rate": 41}, {"id": 804, "title": "Number of Distinct Islands II", "unique_name": "number-of-distinct-islands-ii", "level": 3, "accepted_rate": 35}, {"id": 677, "title": "Number of Big Islands", "unique_name": "number-of-big-islands", "level": 2, "accepted_rate": 23}, {"id": 629, "title": "Minimum Spanning Tree", "unique_name": "minimum-spanning-tree", "level": 3, "accepted_rate": 27}, {"id": 589, "title": "Connecting Graph", "unique_name": "connecting-graph", "level": 2, "accepted_rate": 40}, {"id": 477, "title": "Surrounded Regions", "unique_name": "surrounded-regions", "level": 2, "accepted_rate": 24}, {"id": 433, "title": "Number of Islands", "unique_name": "number-of-islands", "level": 1, "accepted_rate": 26}, {"id": 432, "title": "Find the Weak Connected Component  in the Directed Graph", "unique_name": "find-the-weak-connected-component-in-the-directed-graph", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "4\n5\n[[1,1],[0,1],[3,3],[3,4]]\n", "total_accepted": 7415, "total_submissions": 37363, "contest": "", "has_followed_by": false}, "post-office-problem": {"id": 435, "title": "Post Office Problem", "unique_name": "post-office-problem", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "maximal-square": {"id": 436, "unique_name": "maximal-square", "user_status": null, "title": "Maximal Square", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.\r\n\r\n", "notice": "", "clarification": "", "example": "For example, given the following matrix: \r\n\r\n\t1 0 1 0 0\r\n\t1 0 1 1 1\r\n\t1 1 1 1 1\r\n\t1 0 0 1 0\r\n\r\n\r\nReturn `4`. ", "challenge": "", "tags": [{"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 1044, "title": "Largest Plus Sign", "unique_name": "largest-plus-sign", "level": 2, "accepted_rate": 48}, {"id": 697, "title": "Sum of Square Numbers", "unique_name": "sum-of-square-numbers", "level": 1, "accepted_rate": 17}, {"id": 631, "title": "Maximal Square II", "unique_name": "maximal-square-ii", "level": 2, "accepted_rate": 35}, {"id": 510, "title": "Maximal Rectangle", "unique_name": "maximal-rectangle", "level": 3, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]]\n", "total_accepted": 9158, "total_submissions": 29441, "contest": "", "has_followed_by": false}, "copy-books": {"id": 437, "unique_name": "copy-books", "user_status": null, "title": "Copy Books", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 30, "description": "Given *n* books and the *i*th book has `A[i]` pages. You are given *k* people to copy the *n* books.\r\n\r\n*n* books list in a row and each person can claim a continous range of the *n* books. For example one copier can copy the books from *i*th to *j*th continously, but he can not copy the 1st book, 2nd book and 4th book (without 3rd book). \r\n\r\nThey start copying books at the same time and they all cost 1 minute to copy 1 page of a book. What's the best strategy to assign books so that the slowest copier can finish at earliest time?", "notice": "", "clarification": "", "example": "Given array A = `[3,2,4]`, k = `2`.\r\n\r\nReturn `5`( First person spends 5 minutes to copy book 1 and book 2 and second person spends 4 minutes to copy book 3. )", "challenge": "", "tags": [], "related_problems": [{"id": 1219, "title": "Heaters", "unique_name": "heaters", "level": 1, "accepted_rate": 38}], "comment_count": 0, "testcase_sample": "[3,2,4]\n2\n", "total_accepted": 9093, "total_submissions": 30111, "contest": "", "has_followed_by": false}, "copy-books-ii": {"id": 438, "title": "Copy Books II", "unique_name": "copy-books-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "segment-tree-build-ii": {"id": 439, "unique_name": "segment-tree-build-ii", "user_status": null, "title": "Segment Tree Build II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "The structure of Segment Tree is a binary tree which each node has two attributes `start` and `end` denote an segment / interval.\r\n\r\n_start_ and _end_ are both integers, they should be assigned in following rules:\r\n\r\n- The root's _start_ and _end_ is given by `build` method.\r\n- The left child of node A has `start=A.left, end=(A.left + A.right) / 2`.\r\n- The right child of node A has `start=(A.left + A.right) / 2 + 1, end=A.right`.\r\n- if _start_ equals to _end_, there will be no children for this node.\r\n\r\nImplement a `build` method with a given array, so that we can create a corresponding segment tree with every node value represent the corresponding interval max value in the array, return the root of this segment tree.", "notice": "", "clarification": "Segment Tree (a.k.a Interval Tree) is an advanced data structure which can support queries like:\r\n\r\n- which of these intervals contain a given point\r\n- which of these points are in a given interval\r\n\r\nSee wiki:\r\n[Segment Tree](https://en.wikipedia.org/wiki/Segment_tree \"Segment Tree\")\r\n[Interval Tree](https://en.wikipedia.org/wiki/Interval_tree \"Interval Tree\")\r\n", "example": "Given `[3,2,1,4]`. The segment tree will be:\r\n\r\n\t                 [0,  3] (max = 4)\r\n\t                  /            \\\r\n\t        [0,  1] (max = 3)     [2, 3]  (max = 4)\r\n\t        /        \\               /             \\\r\n    [0, 0](max = 3)  [1, 1](max = 2)[2, 2](max = 1) [3, 3] (max = 4)\r\n\r\n", "challenge": "", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}], "related_problems": [{"id": 201, "title": "Segment Tree Build", "unique_name": "segment-tree-build", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[3,2,1,4]\n", "total_accepted": 4853, "total_submissions": 11590, "contest": "", "has_followed_by": false}, "backpack-iii": {"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "implement-trie-prefix-tree": {"id": 442, "unique_name": "implement-trie-prefix-tree", "user_status": null, "title": "Implement Trie (Prefix Tree)", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Implement a trie with insert, search, and startsWith methods.", "notice": "You may assume that all inputs are consist of lowercase letters a-z.", "clarification": "", "example": "```\r\ninsert(\"lintcode\")\r\nsearch(\"code\")\r\n>>> false\r\nstartsWith(\"lint\")\r\n>>> true\r\nstartsWith(\"linterror\")\r\n>>> false\r\ninsert(\"linterror\")\r\nsearch(\"lintcode)\r\n>>> true\r\nstartsWith(\"linterror\")\r\n>>> true\r\n```", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 34, "name": "Trie", "cn_name": "Trie", "type": 21, "unique_name": "trie", "alias": "Prefix Tree", "problem_count": 11}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [{"id": 634, "title": "Word Squares", "unique_name": "word-squares", "level": 3, "accepted_rate": 31}, {"id": 623, "title": "K Edit Distance", "unique_name": "k-edit-distance", "level": 3, "accepted_rate": 30}, {"id": 559, "title": "Trie Service", "unique_name": "trie-service", "level": 2, "accepted_rate": 44}, {"id": 527, "title": "Trie Serialization", "unique_name": "trie-serialization", "level": 3, "accepted_rate": 41}, {"id": 473, "title": "Add and Search Word - Data structure design", "unique_name": "add-and-search-word-data-structure-design", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "insert(\"lintcode\")\nsearch(\"lint\")\nstartsWith(\"lint\")\n", "total_accepted": 9854, "total_submissions": 29214, "contest": "", "has_followed_by": false}, "two-sum-greater-than-target": {"id": 443, "title": "Two Sum - Greater than target", "unique_name": "two-sum-greater-than-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 7, "title": "Advanced Algorithm Term 13 - HW1", "cover": "https://lintcode-media.s3.amazonaws.com/gaosuan_1.png", "start_at": "2016-11-25T23:00:00Z"}], "no_permission": true}, "cosine-similarity": {"id": 445, "unique_name": "cosine-similarity", "user_status": null, "title": "Cosine Similarity", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Cosine similarity is a measure of similarity between two vectors of an inner product space that measures the cosine of the angle between them. The cosine of 0\u00c2\u00b0 is 1, and it is less than 1 for any other angle.\r\n\r\nSee wiki: [Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity \"\")\r\n\r\nHere is the formula:\r\n\r\n![cosine-similarity](https://lintcode-media.s3.amazonaws.com/problem/cosine-similarity.png \"\")\r\n\r\nGiven two vectors A and B with the same size, calculate the cosine similarity.\r\n\r\nReturn `2.0000` if cosine similarity is invalid (for example A = [0] and B = [0]).", "notice": "", "clarification": "", "example": "Given A = `[1, 2, 3]`, B = `[2, 3 ,4]`.\r\n\r\nReturn `0.9926`.\r\n\r\nGiven A = `[0]`, B = `[0]`.\r\n\r\nReturn `2.0000`", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,4,0]\n[1,2,3]\n", "total_accepted": 4655, "total_submissions": 14312, "contest": "", "has_followed_by": false}, "search-in-a-big-sorted-array": {"id": 447, "title": "Search in a Big Sorted Array", "unique_name": "search-in-a-big-sorted-array", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "inorder-successor-in-bst": {"id": 448, "unique_name": "inorder-successor-in-bst", "user_status": null, "title": "Inorder Successor in BST", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Given a binary search tree ([See Definition](http://www.lintcode.com/problem/validate-binary-search-tree/ \"BST\")) and a node in it, find the in-order successor of that node in the BST.\r\n\r\nIf the given node has no in-order successor in the tree, return `null`.", "notice": "It's guaranteed *p* is one node in the given tree. (You can directly compare the memory address to find p)", "clarification": "", "example": "Given tree = `[2,1]` and node = `1`:\r\n\r\n      2\r\n     /\r\n    1\r\n\r\nreturn node `2`.\r\n\r\nGiven tree = `[2,1,3]` and node = `2`:\r\n\r\n      2\r\n     / \\\r\n    1   3\r\n\r\nreturn node `3`.", "challenge": "O(h), where h is the height of the BST.", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}], "related_problems": [{"id": 915, "title": "Inorder Predecessor in BST", "unique_name": "inorder-predecessor-in-bst", "level": 2, "accepted_rate": 48}, {"id": 701, "title": "Trim a Binary Search Tree", "unique_name": "trim-a-binary-search-tree", "level": 2, "accepted_rate": 70}, {"id": 691, "title": "Recover Binary Search Tree", "unique_name": "recover-binary-search-tree", "level": 2, "accepted_rate": 20}, {"id": 95, "title": "Validate Binary Search Tree", "unique_name": "validate-binary-search-tree", "level": 2, "accepted_rate": 23}, {"id": 86, "title": "Binary Search Tree Iterator", "unique_name": "binary-search-tree-iterator", "level": 3, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "{1,#,2}\nnode with value 1\n", "total_accepted": 11986, "total_submissions": 34071, "contest": "", "has_followed_by": false}, "char-to-integer": {"id": 449, "title": "Char to Integer", "unique_name": "char-to-integer", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "reverse-nodes-in-k-group": {"id": 450, "unique_name": "reverse-nodes-in-k-group", "user_status": null, "title": "Reverse Nodes in k-Group", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\r\n\r\nIf the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.\r\n\r\nYou may not alter the values in the nodes, only nodes itself may be changed.\r\nOnly constant memory is allowed.", "notice": "", "clarification": "", "example": "Given this linked list: `1->2->3->4->5`\r\n\r\nFor k = 2, you should return: `2->1->4->3->5`\r\n\r\nFor k = 3, you should return: `3->2->1->4->5`\r\n", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 767, "title": "Reverse Array", "unique_name": "reverse-array", "level": 1, "accepted_rate": 52}, {"id": 451, "title": "Swap Nodes in Pairs", "unique_name": "swap-nodes-in-pairs", "level": 1, "accepted_rate": 36}, {"id": 170, "title": "Rotate List", "unique_name": "rotate-list", "level": 2, "accepted_rate": 25}, {"id": 36, "title": "Reverse Linked List II", "unique_name": "reverse-linked-list-ii", "level": 2, "accepted_rate": 30}, {"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "1->2->3->4->5->null\n2\n", "total_accepted": 9440, "total_submissions": 26554, "contest": "", "has_followed_by": false}, "swap-nodes-in-pairs": {"id": 451, "unique_name": "swap-nodes-in-pairs", "user_status": null, "title": "Swap Nodes in Pairs", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Given a linked list, swap every two adjacent nodes and return its head.\r\n", "notice": "", "clarification": "", "example": "Given `1->2->3->4`, you should return the list as `2->1->4->3`.\r\n\r\n", "challenge": "Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 658, "title": "Swap Without Extra Variable (Only C++)", "unique_name": "swap-without-extra-variable-only-c", "level": 1, "accepted_rate": 65}, {"id": 511, "title": "Swap Two Nodes in Linked List", "unique_name": "swap-two-nodes-in-linked-list", "level": 2, "accepted_rate": 20}, {"id": 450, "title": "Reverse Nodes in k-Group", "unique_name": "reverse-nodes-in-k-group", "level": 3, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "1->2->3->4->null\n", "total_accepted": 9229, "total_submissions": 25529, "contest": "", "has_followed_by": false}, "remove-linked-list-elements": {"id": 452, "unique_name": "remove-linked-list-elements", "user_status": null, "title": "Remove Linked List Elements", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 21, "description": "Remove all elements from a linked list of integers that have value `val`.\r\n", "notice": "", "clarification": "", "example": "Given `1->2->3->3->4->5->3`, val = 3, you should return the list as `1->2->4->5`", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 217, "title": "Remove Duplicates from Unsorted List", "unique_name": "remove-duplicates-from-unsorted-list", "level": 1, "accepted_rate": 37}, {"id": 113, "title": "Remove Duplicates from Sorted List II", "unique_name": "remove-duplicates-from-sorted-list-ii", "level": 2, "accepted_rate": 28}, {"id": 112, "title": "Remove Duplicates from Sorted List", "unique_name": "remove-duplicates-from-sorted-list", "level": 1, "accepted_rate": 38}], "comment_count": 0, "testcase_sample": "null\n2\n", "total_accepted": 23073, "total_submissions": 107960, "contest": "", "has_followed_by": false}, "flatten-binary-tree-to-linked-list": {"id": 453, "unique_name": "flatten-binary-tree-to-linked-list", "user_status": null, "title": "Flatten Binary Tree to Linked List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 34, "description": "Flatten a binary tree to a fake \"linked list\" in pre-order traversal.\r\n\r\nHere we use the *right* pointer in TreeNode as the *next* pointer in ListNode.", "notice": "Don't forget to mark the left child of each node to null. Or you will get Time Limit Exceeded or Memory Limit Exceeded.", "clarification": "", "example": "                  1\r\n                   \\\r\n         1          2\r\n        / \\          \\\r\n       2   5    =>    3\r\n      / \\   \\          \\\r\n     3   4   6          4\r\n                         \\\r\n                          5\r\n                           \\\r\n                            6", "challenge": "Do it in-place without any extra memory.", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 601, "title": "Flatten 2D Vector", "unique_name": "flatten-2d-vector", "level": 2, "accepted_rate": 47}, {"id": 528, "title": "Flatten Nested List Iterator", "unique_name": "flatten-nested-list-iterator", "level": 2, "accepted_rate": 29}, {"id": 242, "title": "Convert Binary Tree to Linked Lists by Depth", "unique_name": "convert-binary-tree-to-linked-lists-by-depth", "level": 1, "accepted_rate": 43}, {"id": 378, "title": "Convert Binary Search Tree to Doubly Linked List", "unique_name": "convert-binary-search-tree-to-doubly-linked-list", "level": 2, "accepted_rate": 31}, {"id": 106, "title": "Convert Sorted List to Binary Search Tree", "unique_name": "convert-sorted-list-to-binary-search-tree", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "{}\n", "total_accepted": 20618, "total_submissions": 59844, "contest": "", "has_followed_by": false}, "rectangle-area": {"id": 454, "unique_name": "rectangle-area", "user_status": null, "title": "Rectangle Area", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 37, "description": "Implement a `Rectangle` class which include the following attributes and methods:\r\n\r\n1. Two public attributes width and height.\r\n1. A constructor which expects two parameters *width* and *height* of type int.\r\n2. A method `getArea` which would calculate the size of the rectangle and return.", "notice": "", "clarification": "", "example": "```\r\nJava:\r\n    Rectangle rec = new Rectangle(3, 4);\r\n    rec.getArea(); // should get 12\r\n\r\nPython:\r\n    rec = Rectangle(3, 4)\r\n    rec.getArea()\r\n```", "challenge": "", "tags": [], "related_problems": [{"id": 1209, "title": "Construct the Rectangle", "unique_name": "construct-the-rectangle", "level": 1, "accepted_rate": 54}, {"id": 208, "title": "Assignment Operator Overloading (C++ Only)", "unique_name": "assignment-operator-overloading-c-only", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "0\n0\n", "total_accepted": 10490, "total_submissions": 28026, "contest": "", "has_followed_by": false}, "student-id": {"id": 455, "title": "Student ID", "unique_name": "student-id", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "reference": {"id": 456, "title": "Reference", "unique_name": "reference", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "classical-binary-search": {"id": 457, "unique_name": "classical-binary-search", "user_status": null, "title": "\bClassical Binary Search", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Find any position of a target number in a sorted array. Return -1 if target does not exist.", "notice": "", "clarification": "", "example": "Given `[1, 2, 2, 4, 5, 5]`. \r\n\r\nFor target = `2`, return 1 or 2.\r\n\r\nFor target = `5`, return 4 or 5.\r\n\r\nFor target = `6`, return -1.\r\n", "challenge": "O(logn) time", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}], "related_problems": [{"id": 459, "title": "Closest Number in Sorted Array", "unique_name": "closest-number-in-sorted-array", "level": 1, "accepted_rate": 36}, {"id": 458, "title": "Last Position of Target", "unique_name": "last-position-of-target", "level": 1, "accepted_rate": 37}, {"id": 14, "title": "First Position of Target", "unique_name": "first-position-of-target", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "[1,2,2,4,5,5]\n2\n", "total_accepted": 15560, "total_submissions": 40517, "contest": "", "has_followed_by": false}, "last-position-of-target": {"id": 458, "title": "Last Position of Target", "unique_name": "last-position-of-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "closest-number-in-sorted-array": {"id": 459, "title": "Closest Number in Sorted Array", "unique_name": "closest-number-in-sorted-array", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "find-k-closest-elements": {"id": 460, "unique_name": "find-k-closest-elements", "user_status": null, "title": "Find K Closest Elements", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a target number, a non-negative integer `k` and an integer array A sorted in ascending order, find the `k` closest numbers to target in A, sorted in ascending order by the difference between the number and target. Otherwise, sorted in ascending order by number if the difference is same.", "notice": "1. The value k is a non-negative integer and will always be smaller than the length of the sorted array.\r\n2. Length of the given array is positive and will not exceed 10^4\r\n3. Absolute value of elements in the array and x will not exceed 10^4", "clarification": "", "example": "Given A = `[1, 2, 3]`, target = `2` and k = `3`, return `[2, 1, 3]`.\r\n\r\nGiven A = `[1, 4, 6, 8]`, target = `3` and k = `3`, return `[4, 1, 6]`.", "challenge": "O(logn + k) time complexity.", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 612, "title": "K Closest Points", "unique_name": "k-closest-points", "level": 2, "accepted_rate": 22}, {"id": 459, "title": "Closest Number in Sorted Array", "unique_name": "closest-number-in-sorted-array", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[1,2,3]\n2\n3\n", "total_accepted": 8085, "total_submissions": 32012, "contest": "", "has_followed_by": false}, "kth-smallest-numbers-in-unsorted-array": {"id": 461, "title": "Kth Smallest Numbers in Unsorted Array", "unique_name": "kth-smallest-numbers-in-unsorted-array", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 7, "title": "Advanced Algorithm Term 13 - HW1", "cover": "https://lintcode-media.s3.amazonaws.com/gaosuan_1.png", "start_at": "2016-11-25T23:00:00Z"}, {"id": 6, "title": "Final Exam - 24", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-11-22T18:00:00Z"}], "no_permission": true}, "total-occurrence-of-target": {"id": 462, "title": "Total Occurrence of Target", "unique_name": "total-occurrence-of-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "sort-integers": {"id": 463, "unique_name": "sort-integers", "user_status": null, "title": "Sort Integers", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 35, "description": "Given an integer array, sort it in ascending order. Use selection sort, bubble sort, insertion sort or any O(n<sup>2</sup>) algorithm.", "notice": "", "clarification": "", "example": "Given `[3, 2, 1, 4, 5]`, return `[1, 2, 3, 4, 5]`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}], "related_problems": [{"id": 846, "title": "Multi-keyword Sort", "unique_name": "multi-keyword-sort", "level": 1, "accepted_rate": 41}, {"id": 464, "title": "Sort Integers II", "unique_name": "sort-integers-ii", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[3,2,1,4,5]\n", "total_accepted": 24950, "total_submissions": 70975, "contest": "", "has_followed_by": false}, "sort-integers-ii": {"id": 464, "unique_name": "sort-integers-ii", "user_status": null, "title": "Sort Integers II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Given an integer array, sort it in ascending order. Use quick sort, merge sort, heap sort or any O(nlogn) algorithm.", "notice": "", "clarification": "", "example": "Given `[3, 2, 1, 4, 5]`, return `[1, 2, 3, 4, 5]`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 21, "name": "Quick Sort", "cn_name": "Quick Sort", "type": 12, "unique_name": "quick-sort", "alias": "", "problem_count": 8}, {"id": 51, "name": "Merge Sort", "cn_name": "Merge Sort", "type": 12, "unique_name": "merge-sort", "alias": "", "problem_count": 2}], "related_problems": [{"id": 846, "title": "Multi-keyword Sort", "unique_name": "multi-keyword-sort", "level": 1, "accepted_rate": 41}, {"id": 463, "title": "Sort Integers", "unique_name": "sort-integers", "level": 0, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[3,2,1,4,5]\n", "total_accepted": 20759, "total_submissions": 69654, "contest": "", "has_followed_by": false}, "kth-smallest-sum-in-two-sorted-arrays": {"id": 465, "title": "Kth Smallest Sum In Two Sorted Arrays", "unique_name": "kth-smallest-sum-in-two-sorted-arrays", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 7, "title": "Advanced Algorithm Term 13 - HW1", "cover": "https://lintcode-media.s3.amazonaws.com/gaosuan_1.png", "start_at": "2016-11-25T23:00:00Z"}, {"id": 6, "title": "Final Exam - 24", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-11-22T18:00:00Z"}], "no_permission": true}, "count-linked-list-nodes": {"id": 466, "unique_name": "count-linked-list-nodes", "user_status": null, "title": "Count Linked List Nodes", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 43, "description": "Count how many nodes in a linked list.", "notice": "", "clarification": "", "example": "Given `1->3->5`, return `3`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 225, "title": "Find Node in Linked List", "unique_name": "find-node-in-linked-list", "level": 0, "accepted_rate": 45}], "comment_count": 0, "testcase_sample": "1->3->5->null\n", "total_accepted": 3876, "total_submissions": 8864, "contest": "", "has_followed_by": false}, "complete-binary-tree": {"id": 467, "title": "Complete Binary Tree", "unique_name": "complete-binary-tree", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "symmetric-binary-tree": {"id": 468, "title": "Symmetric Binary Tree", "unique_name": "symmetric-binary-tree", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "same-tree": {"id": 469, "unique_name": "same-tree", "user_status": null, "title": "Same Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 45, "description": "Check if two binary trees are identical. Identical means the two binary trees have the same structure and every identical position has the same value.", "notice": "", "clarification": "", "example": "        1             1\r\n       / \\           / \\\r\n      2   2   and   2   2\r\n     /             /\r\n    4             4\r\n\r\nare identical.\r\n\r\n        1             1\r\n       / \\           / \\\r\n      2   3   and   2   3\r\n     /               \\\r\n    4                 4\r\n\r\nare not identical.\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 470, "title": "Tweaked Identical Binary Tree", "unique_name": "tweaked-identical-binary-tree", "level": 1, "accepted_rate": 39}, {"id": 468, "title": "Symmetric Binary Tree", "unique_name": "symmetric-binary-tree", "level": 1, "accepted_rate": 41}, {"id": 467, "title": "Complete Binary Tree", "unique_name": "complete-binary-tree", "level": 1, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "{1,2,2,4}\n{1,2,2,4}\n", "total_accepted": 10643, "total_submissions": 23461, "contest": "", "has_followed_by": false}, "tweaked-identical-binary-tree": {"id": 470, "title": "Tweaked Identical Binary Tree", "unique_name": "tweaked-identical-binary-tree", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 2, "title": "LintCode Monthly Contest - Aug 2016", "cover": "https://lintcode-media.s3.amazonaws.com/cover.png", "start_at": "2016-08-15T01:30:00Z"}], "no_permission": true}, "top-k-frequent-words": {"id": 471, "unique_name": "top-k-frequent-words", "user_status": null, "title": "Top K Frequent Words", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "Given a list of words and an integer k, return the top k frequent words in the list.", "notice": "You should order the words by the frequency of them in the return list, the most frequent one comes first. If two words has the same frequency, the one with lower alphabetical order come first.", "clarification": "", "example": "Given\r\n\r\n    [\r\n        \"yes\", \"lint\", \"code\",\r\n        \"yes\", \"code\", \"baby\",\r\n        \"you\", \"baby\", \"chrome\",\r\n        \"safari\", \"lint\", \"code\",\r\n        \"body\", \"lint\", \"code\"\r\n    ]\r\n\r\nfor k = `3`, return `[\"code\", \"lint\", \"baby\"]`.\r\n\r\nfor k = `4`, return `[\"code\", \"lint\", \"baby\", \"yes\"]`,", "challenge": "Do it in O(nlogk) time and O(n) extra space.\r\n", "tags": [{"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 30, "name": "Priority Queue", "cn_name": "Priority Queue", "type": 21, "unique_name": "priority-queue", "alias": "", "problem_count": 13}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}], "related_problems": [{"id": 550, "title": "Top K Frequent Words II", "unique_name": "top-k-frequent-words-ii", "level": 3, "accepted_rate": 18}, {"id": 549, "title": "Top K Frequent Words (Map Reduce)", "unique_name": "top-k-frequent-words-map-reduce", "level": 2, "accepted_rate": 23}, {"id": 545, "title": "Top k Largest Numbers II", "unique_name": "top-k-largest-numbers-ii", "level": 2, "accepted_rate": 30}, {"id": 544, "title": "Top k Largest Numbers", "unique_name": "top-k-largest-numbers", "level": 2, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[\"yes\",\"lint\",\"code\",\"yes\",\"code\",\"baby\",\"you\",\"baby\",\"chrome\",\"safari\",\"lint\",\"code\",\"body\",\"lint\",\"code\"]\n3\n", "total_accepted": 5286, "total_submissions": 25426, "contest": "", "has_followed_by": false}, "binary-tree-path-sum-iii": {"id": 472, "title": "Binary Tree Path Sum III", "unique_name": "binary-tree-path-sum-iii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "add-and-search-word-data-structure-design": {"id": 473, "unique_name": "add-and-search-word-data-structure-design", "user_status": null, "title": "Add and Search Word - Data structure design", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Design a data structure that supports the following two operations: `addWord(word)` and `search(word)`\r\n\r\n`search(word)` can search a literal word or a regular expression string containing only letters `a-z` or `.`.\r\n\r\nA `.` means it can represent any one letter.", "notice": "You may assume that all words are consist of lowercase letters a-z.", "clarification": "", "example": "```\r\naddWord(\"bad\")\r\naddWord(\"dad\")\r\naddWord(\"mad\")\r\nsearch(\"pad\")  // return false\r\nsearch(\"bad\")  // return true\r\nsearch(\".ad\")  // return true\r\nsearch(\"b..\")  // return true\r\n```\r\n", "challenge": "", "tags": [{"id": 34, "name": "Trie", "cn_name": "Trie", "type": 21, "unique_name": "trie", "alias": "Prefix Tree", "problem_count": 11}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 623, "title": "K Edit Distance", "unique_name": "k-edit-distance", "level": 3, "accepted_rate": 30}, {"id": 442, "title": "Implement Trie (Prefix Tree)", "unique_name": "implement-trie-prefix-tree", "level": 2, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "addWord(\"a\")\nsearch(\".\")\n", "total_accepted": 8067, "total_submissions": 33038, "contest": "", "has_followed_by": false}, "lowest-common-ancestor-ii": {"id": 474, "title": "Lowest Common Ancestor II", "unique_name": "lowest-common-ancestor-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "binary-tree-maximum-path-sum-ii": {"id": 475, "title": "Binary Tree Maximum Path Sum II", "unique_name": "binary-tree-maximum-path-sum-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "stone-game": {"id": 476, "title": "Stone Game", "unique_name": "stone-game", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "surrounded-regions": {"id": 477, "unique_name": "surrounded-regions", "user_status": null, "title": "Surrounded Regions", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a 2D board containing `'X'` and `'O'`, capture all regions surrounded by `'X'`.\r\n\r\nA region is captured by flipping all `'O'`'s into `'X'`'s in that surrounded region.", "notice": "", "clarification": "", "example": "    X X X X\r\n    X O O X\r\n    X X O X\r\n    X O X X\r\n\r\nAfter capture all regions surrounded by `'X'`, the board should be:\r\n\r\n    X X X X\r\n    X X X X\r\n    X X X X\r\n    X O X X", "challenge": "", "tags": [{"id": 59, "name": "Union Find", "cn_name": "Union Find", "type": 21, "unique_name": "union-find", "alias": "", "problem_count": 11}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 663, "title": "Walls and Gates", "unique_name": "walls-and-gates", "level": 2, "accepted_rate": 36}, {"id": 589, "title": "Connecting Graph", "unique_name": "connecting-graph", "level": 2, "accepted_rate": 40}, {"id": 434, "title": "Number of Islands II", "unique_name": "number-of-islands-ii", "level": 3, "accepted_rate": 19}, {"id": 433, "title": "Number of Islands", "unique_name": "number-of-islands", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[\"XXXX\",\"XOOX\",\"XXOX\",\"XOXX\"]\n", "total_accepted": 7046, "total_submissions": 29097, "contest": "", "has_followed_by": false}, "simple-calculator": {"id": 478, "title": "Simple Calculator", "unique_name": "simple-calculator", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "second-max-of-array": {"id": 479, "unique_name": "second-max-of-array", "user_status": null, "title": "Second Max of Array", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 28, "description": "Find the second max number in a given array.", "notice": "You can assume the array contains at least two numbers.", "clarification": "", "example": "Given `[1, 3, 2, 4]`, return `3`.\r\n\r\nGiven `[1, 2]`, return `1`.", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,3,2,4]\n", "total_accepted": 4061, "total_submissions": 14012, "contest": "", "has_followed_by": false}, "binary-tree-paths": {"id": 480, "unique_name": "binary-tree-paths", "user_status": null, "title": "Binary Tree Paths", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "Given a binary tree, return all root-to-leaf paths.", "notice": "", "clarification": "", "example": "Given the following binary tree:\r\n\r\n```\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n```\r\n\r\nAll root-to-leaf paths are:\r\n\r\n```\r\n[\r\n  \"1->2->5\",\r\n  \"1->3\"\r\n]\r\n```", "challenge": "", "tags": [{"id": 46, "name": "Binary Tree Traversal", "cn_name": "Binary Tree Traversal", "type": 13, "unique_name": "binary-tree-traversal", "alias": "", "problem_count": 10}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 717, "title": "Tree Longest Path With Same Value ", "unique_name": "tree-longest-path-with-same-value", "level": 2, "accepted_rate": 16}], "comment_count": 0, "testcase_sample": "{1,2,3,#,5}\n", "total_accepted": 22030, "total_submissions": 72516, "contest": "", "has_followed_by": false}, "binary-tree-leaf-sum": {"id": 481, "title": "Binary Tree Leaf Sum", "unique_name": "binary-tree-leaf-sum", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "binary-tree-level-sum": {"id": 482, "title": "Binary Tree Level Sum", "unique_name": "binary-tree-level-sum", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "convert-linked-list-to-array-list": {"id": 483, "title": "Convert Linked List to Array List", "unique_name": "convert-linked-list-to-array-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "swap-two-integers-in-array": {"id": 484, "unique_name": "swap-two-integers-in-array", "user_status": null, "title": "Swap Two Integers in Array", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 64, "description": "Given an array and two indexes, swap the integers on the two indices.", "notice": "", "clarification": "", "example": "Given `[1,2,3,4]` and index1 = `2`, index2 = `3`. The array will change to `[1,2,4,3]` after swapping. You don't need return anything, just swap the integers in-place.", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3,4]\n2\n3\n", "total_accepted": 3806, "total_submissions": 5902, "contest": "", "has_followed_by": false}, "generate-arraylist-with-given-size": {"id": 485, "title": "Generate ArrayList with Given Size", "unique_name": "generate-arraylist-with-given-size", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "merge-k-sorted-arrays": {"id": 486, "title": "Merge K Sorted Arrays", "unique_name": "merge-k-sorted-arrays", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "name-deduplication": {"id": 487, "title": "Name Deduplication", "unique_name": "name-deduplication", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "happy-number": {"id": 488, "unique_name": "happy-number", "user_status": null, "title": "Happy Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 33, "description": "Write an algorithm to determine if a number is *happy*.\r\n\r\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.", "notice": "", "clarification": "", "example": "19 is a happy number\r\n\r\n    1^2 + 9^2 = 82\r\n    8^2 + 2^2 = 68\r\n    6^2 + 8^2 = 100\r\n    1^2 + 0^2 + 0^2 = 1", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 742, "title": "Self Dividing Numbers", "unique_name": "self-dividing-numbers", "level": 2, "accepted_rate": 15}, {"id": 569, "title": "Add Digits", "unique_name": "add-digits", "level": 1, "accepted_rate": 38}, {"id": 517, "title": "Ugly Number", "unique_name": "ugly-number", "level": 1, "accepted_rate": 36}, {"id": 147, "title": "Narcissistic Number", "unique_name": "narcissistic-number", "level": 0, "accepted_rate": 24}, {"id": 4, "title": "Ugly Number II", "unique_name": "ugly-number-ii", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "19\n", "total_accepted": 8477, "total_submissions": 25573, "contest": "", "has_followed_by": false}, "convert-array-list-to-linked-list": {"id": 489, "title": "Convert Array List to Linked List", "unique_name": "convert-array-list-to-linked-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "set-of-stacks": {"id": 490, "title": "Set of Stacks", "unique_name": "set-of-stacks", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "palindrome-number": {"id": 491, "unique_name": "palindrome-number", "user_status": null, "title": "Palindrome Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Check a positive number is a palindrome or not.\r\n\r\nA palindrome number is that if you reverse the whole number you will get exactly the same number.", "notice": "It's guaranteed the input number is a 32-bit integer, but after reversion, the number may exceed the 32-bit integer.", "clarification": "", "example": "`11`, `121`, `1`, `12321` are palindrome numbers.\r\n\r\n`23`, `32`, `1232` are not palindrome numbers.", "challenge": "", "tags": [{"id": 58, "name": "Integer", "cn_name": "Integer", "type": 1, "unique_name": "integer", "alias": "", "problem_count": 2}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 891, "title": "Valid Palindrome II", "unique_name": "valid-palindrome-ii", "level": 1, "accepted_rate": 44}, {"id": 745, "title": "Palindromic Ranges", "unique_name": "palindromic-ranges", "level": 1, "accepted_rate": 28}, {"id": 744, "title": "Sum of first K even-length Palindrome numbers", "unique_name": "sum-of-first-k-even-length-palindrome-numbers", "level": 2, "accepted_rate": 49}, {"id": 223, "title": "Palindrome Linked List", "unique_name": "palindrome-linked-list", "level": 2, "accepted_rate": 29}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "11\n", "total_accepted": 7495, "total_submissions": 19697, "contest": "", "has_followed_by": false}, "implement-queue-by-linked-list": {"id": 492, "title": "Implement Queue by Linked List", "unique_name": "implement-queue-by-linked-list", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "implement-queue-by-linked-list-ii": {"id": 493, "title": "Implement Queue by Linked List II", "unique_name": "implement-queue-by-linked-list-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "implement-stack-by-two-queues": {"id": 494, "title": "Implement Stack by Two Queues", "unique_name": "implement-stack-by-two-queues", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "implement-stack": {"id": 495, "title": "Implement Stack", "unique_name": "implement-stack", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 42, "title": "EMC", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/emc.png", "privacy": "Password required"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "toy-factory": {"id": 496, "unique_name": "toy-factory", "user_status": null, "title": "Toy Factory", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Factory is a design pattern in common usage. Please implement a `ToyFactory` which can generate proper toy based on the given type.", "notice": "", "clarification": "", "example": "```java\r\nToyFactory tf = ToyFactory();\r\nToy toy = tf.getToy('Dog');\r\ntoy.talk(); \r\n>> Wow\r\n\r\ntoy = tf.getToy('Cat');\r\ntoy.talk();\r\n>> Meow\r\n```", "challenge": "", "tags": [], "related_problems": [{"id": 497, "title": "Shape Factory", "unique_name": "shape-factory", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "\"Dog\"\n", "total_accepted": 3817, "total_submissions": 10434, "contest": "", "has_followed_by": false}, "shape-factory": {"id": 497, "title": "Shape Factory", "unique_name": "shape-factory", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "parking-lot": {"id": 498, "title": "Parking Lot", "unique_name": "parking-lot", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "word-count-map-reduce": {"id": 499, "unique_name": "word-count-map-reduce", "user_status": null, "title": "Word Count (Map Reduce)", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 43, "description": "Using map reduce to count word frequency.\r\n\r\nhttps://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html#Example%3A+WordCount+v1.0", "notice": "", "clarification": "", "example": "    chunk1: \"Google Bye GoodBye Hadoop code\"\r\n    chunk2: \"lintcode code Bye\"\r\n\r\n\r\n    Get MapReduce result:\r\n        Bye: 2\r\n        GoodBye: 1\r\n        Google: 1\r\n        Hadoop: 1\r\n        code: 2\r\n        lintcode: 1\r\n        ", "challenge": "", "tags": [{"id": 137, "name": "Big Data", "cn_name": "Big Data", "type": 1, "unique_name": "big-data", "alias": "", "problem_count": 2}, {"id": 79, "name": "Map Reduce", "cn_name": "Map Reduce", "type": 1, "unique_name": "map-reduce", "alias": "", "problem_count": 5}], "related_problems": [{"id": 554, "title": "Sort Integers (Map Reduce)", "unique_name": "sort-integers-map-reduce", "level": 1, "accepted_rate": 34}, {"id": 537, "title": "N-Gram (Map Reduce)", "unique_name": "n-gram-map-reduce", "level": 1, "accepted_rate": 55}], "comment_count": 0, "testcase_sample": "chunk1: \"Google Bye GoodBye Hadopp lintcode\"\nchunk2: \"lintcode Google code\"\nchunk3: \"Bye Bye Google\"\n", "total_accepted": 2954, "total_submissions": 6860, "contest": "", "has_followed_by": false}, "inverted-index": {"id": 500, "title": "Inverted Index", "unique_name": "inverted-index", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "design-twitter": {"id": 501, "unique_name": "design-twitter", "user_status": null, "title": "Design Twitter", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 18, "description": "Implement a simple twitter. Support the following method:\r\n\r\n1. `postTweet(user_id, tweet_text)`. Post a tweet.\r\n2. `getTimeline(user_id)`. Get the given user's most recently 10 tweets posted by himself, order by timestamp from most recent to least recent.\r\n3. `getNewsFeed(user_id)`. Get the given user's most recently 10 tweets in his news feed (posted by his friends and himself). Order by timestamp from most recent to least recent.\r\n4. `follow(from_user_id, to_user_id)`. from_user_id followed to_user_id.\r\n5. `unfollow(from_user_id, to_user_id)`. from_user_id unfollowed to to_user_id.", "notice": "", "clarification": "", "example": "```\r\npostTweet(1, \"LintCode is Good!!!\")\r\n>> 1\r\ngetNewsFeed(1)\r\n>> [1]\r\ngetTimeline(1)\r\n>> [1]\r\nfollow(2, 1)\r\ngetNewsFeed(2)\r\n>> [1]\r\nunfollow(2, 1)\r\ngetNewsFeed(2)\r\n>> []\r\n```", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "postTweet(1, \"LintCode is Good!!!\")\ngetNewsFeed(1)\ngetTimeline(1)\nfollow(2, 1)\ngetNewsFeed(2)\nunfollow(2, 1)\ngetNewsFeed(2)\n", "total_accepted": 4608, "total_submissions": 25043, "contest": "", "has_followed_by": false}, "mini-cassandra": {"id": 502, "title": "Mini Cassandra", "unique_name": "mini-cassandra", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "anagram-map-reduce": {"id": 503, "title": "Anagram (Map Reduce)", "unique_name": "anagram-map-reduce", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "inverted-index-map-reduce": {"id": 504, "unique_name": "inverted-index-map-reduce", "user_status": null, "title": "Inverted Index (Map Reduce)", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 38, "description": "Use map reduce to build inverted index for given documents.", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [], "related_problems": [{"id": 554, "title": "Sort Integers (Map Reduce)", "unique_name": "sort-integers-map-reduce", "level": 1, "accepted_rate": 34}, {"id": 500, "title": "Inverted Index", "unique_name": "inverted-index", "level": 1, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[{\"id\":1,\"content\":\"This is the content of document1\"}, {\"id\":2,\"content\":\"This is the content of document2\"}]\n", "total_accepted": 1682, "total_submissions": 4400, "contest": "", "has_followed_by": false}, "web-logger": {"id": 505, "title": "Web Logger", "unique_name": "web-logger", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "wiggle-sort-ii": {"id": 507, "unique_name": "wiggle-sort-ii", "user_status": null, "title": "Wiggle Sort II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given an unsorted array `nums`, reorder it such that \r\n\r\n```\r\nnums[0] < nums[1] > nums[2] < nums[3]....\r\n```", "notice": "You may assume all input has valid answer.", "clarification": "", "example": "Given `nums = [1, 5, 1, 1, 6, 4]`, one possible answer is `[1, 4, 1, 5, 1, 6]`. \r\n\r\nGiven `nums = [1, 3, 2, 2, 3, 1]`, one possible answer is `[2, 3, 1, 3, 1, 2]`.", "challenge": "Can you do it in O(n) time and/or in-place with O(1) extra space?", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 508, "title": "Wiggle Sort", "unique_name": "wiggle-sort", "level": 2, "accepted_rate": 41}, {"id": 148, "title": "Sort Colors", "unique_name": "sort-colors", "level": 2, "accepted_rate": 37}, {"id": 143, "title": "Sort Colors II", "unique_name": "sort-colors-ii", "level": 2, "accepted_rate": 35}, {"id": 108, "title": "Palindrome Partitioning II", "unique_name": "palindrome-partitioning-ii", "level": 2, "accepted_rate": 23}, {"id": 5, "title": "Kth Largest Element", "unique_name": "kth-largest-element", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,5,1,1,6,4]\n", "total_accepted": 2966, "total_submissions": 11641, "contest": "", "has_followed_by": false}, "wiggle-sort": {"id": 508, "unique_name": "wiggle-sort", "user_status": null, "title": "Wiggle Sort", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Given an unsorted array `nums`, reorder it in-place such that \r\n\r\n```\r\nnums[0] <= nums[1] >= nums[2] <= nums[3]....\r\n```", "notice": "Please complete the problem in-place.", "clarification": "", "example": "Given `nums = [3, 5, 2, 1, 6, 4]`, one possible answer is `[1, 6, 2, 5, 3, 4]`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 21, "name": "Quick Sort", "cn_name": "Quick Sort", "type": 12, "unique_name": "quick-sort", "alias": "", "problem_count": 8}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 507, "title": "Wiggle Sort II", "unique_name": "wiggle-sort-ii", "level": 2, "accepted_rate": 25}, {"id": 148, "title": "Sort Colors", "unique_name": "sort-colors", "level": 2, "accepted_rate": 37}, {"id": 143, "title": "Sort Colors II", "unique_name": "sort-colors-ii", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[3,5,2,1,6,4]\n", "total_accepted": 5878, "total_submissions": 14124, "contest": "", "has_followed_by": false}, "mini-yelp": {"id": 509, "title": "Mini Yelp", "unique_name": "mini-yelp", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "maximal-rectangle": {"id": 510, "unique_name": "maximal-rectangle", "user_status": null, "title": "Maximal Rectangle", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "Given a 2D `boolean` matrix filled with `False` and `True`, find the largest rectangle containing all `True` and return its area.", "notice": "", "clarification": "", "example": "Given a matrix:\r\n\r\n    [\r\n      [1, 1, 0, 0, 1],\r\n      [0, 1, 0, 0, 1],\r\n      [0, 0, 1, 1, 1],\r\n      [0, 0, 1, 1, 1],\r\n      [0, 0, 0, 0, 1]\r\n    ]\r\n\r\nreturn `6`.", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1209, "title": "Construct the Rectangle", "unique_name": "construct-the-rectangle", "level": 1, "accepted_rate": 54}, {"id": 436, "title": "Maximal Square", "unique_name": "maximal-square", "level": 2, "accepted_rate": 31}, {"id": 122, "title": "Largest Rectangle in Histogram", "unique_name": "largest-rectangle-in-histogram", "level": 3, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[[1,1,0,0,1],[0,1,0,0,1],[0,0,1,1,1],[0,0,1,1,1],[0,0,0,0,1]]\n", "total_accepted": 4502, "total_submissions": 16252, "contest": "", "has_followed_by": false}, "swap-two-nodes-in-linked-list": {"id": 511, "unique_name": "swap-two-nodes-in-linked-list", "user_status": null, "title": "Swap Two Nodes in Linked List", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "Given a linked list and two values v1 and v2. Swap the two nodes in the linked list with values v1 and v2. It's guaranteed there is no duplicate values in the linked list. If v1 or v2 does not exist in the given linked list, do nothing.", "notice": "You should swap the two nodes with values v1 and v2. Do not directly swap the values of the two nodes.", "clarification": "", "example": "Given `1->2->3->4->null` and v1 = `2`, v2 = `4`.\r\n\r\nReturn `1->4->3->2->null`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 451, "title": "Swap Nodes in Pairs", "unique_name": "swap-nodes-in-pairs", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "1->2->3->4->null\n2\n4\n", "total_accepted": 5033, "total_submissions": 24732, "contest": "", "has_followed_by": false}, "decode-ways": {"id": 512, "unique_name": "decode-ways", "user_status": null, "title": "Decode Ways", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 21, "description": "A message containing letters from `A-Z` is being encoded to numbers using the following mapping:\r\n\r\n    'A' -> 1\r\n    'B' -> 2\r\n    ...\r\n    'Z' -> 26\r\n\r\nGiven an encoded message containing digits, determine the total number of ways to decode it.", "notice": "", "clarification": "", "example": "Given encoded message `12`, it could be decoded as `AB` (1 2) or `L` (12).\r\nThe number of ways decoding `12` is 2.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 676, "title": "Decode Ways II", "unique_name": "decode-ways-ii", "level": 3, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "\"12\"\n", "total_accepted": 8106, "total_submissions": 37925, "contest": "", "has_followed_by": false}, "perfect-squares": {"id": 513, "unique_name": "perfect-squares", "user_status": null, "title": "Perfect Squares", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Given a positive integer `n`, find the least number of perfect square numbers (for example, `1, 4, 9, 16, ...`) which sum to n.", "notice": "", "clarification": "", "example": "Given n = `12`, return `3` because `12 = 4 + 4 + 4`\r\nGiven n = `13`, return `2` because `13 = 4 + 9`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 697, "title": "Sum of Square Numbers", "unique_name": "sum-of-square-numbers", "level": 1, "accepted_rate": 17}, {"id": 4, "title": "Ugly Number II", "unique_name": "ugly-number-ii", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "12\n", "total_accepted": 6992, "total_submissions": 20335, "contest": "", "has_followed_by": false}, "paint-fence": {"id": 514, "unique_name": "paint-fence", "user_status": null, "title": "Paint Fence", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "There is a fence with `n` posts, each post can be painted with one of the `k` colors.\r\nYou have to paint all the posts such that no more than two adjacent fence posts have the same color.\r\nReturn the total number of ways you can paint the fence.", "notice": "`n` and `k` are non-negative integers.", "clarification": "", "example": "Given `n`=3, `k`=2  return 6\r\n\r\n          post 1,   post 2, post 3\r\n    way1    0         0       1 \r\n    way2    0         1       0\r\n    way3    0         1       1\r\n    way4    1         0       0\r\n    way5    1         0       1\r\n    way6    1         1       0", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 534, "title": "House Robber II", "unique_name": "house-robber-ii", "level": 2, "accepted_rate": 28}, {"id": 516, "title": "Paint House II", "unique_name": "paint-house-ii", "level": 3, "accepted_rate": 28}, {"id": 515, "title": "Paint House", "unique_name": "paint-house", "level": 2, "accepted_rate": 36}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "3\n2\n", "total_accepted": 5206, "total_submissions": 16002, "contest": "", "has_followed_by": false}, "paint-house": {"id": 515, "unique_name": "paint-house", "user_status": null, "title": "Paint House", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\r\n\r\nThe cost of painting each house with a certain color is represented by a `n` x `3` cost matrix. For example, `costs[0][0]` is the cost of painting house `0` with color red; `costs[1][2]` is the cost of painting house `1` with color green, and so on... Find the minimum cost to paint all houses.", "notice": "All costs are positive integers.", "clarification": "", "example": "Given `costs` = `[[14,2,11],[11,14,5],[14,3,10]]` return `10`\r\n\r\nhouse 0 is blue, house 1 is green, house 2 is blue, `2 + 5 + 3 = 10`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 1310, "title": "Product of Array Except Self", "unique_name": "product-of-array-except-self", "level": 2, "accepted_rate": 68}, {"id": 534, "title": "House Robber II", "unique_name": "house-robber-ii", "level": 2, "accepted_rate": 28}, {"id": 516, "title": "Paint House II", "unique_name": "paint-house-ii", "level": 3, "accepted_rate": 28}, {"id": 514, "title": "Paint Fence", "unique_name": "paint-fence", "level": 1, "accepted_rate": 32}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[[14,2,11],[11,14,5],[14,3,10]]\n", "total_accepted": 4410, "total_submissions": 11958, "contest": "", "has_followed_by": false}, "paint-house-ii": {"id": 516, "unique_name": "paint-house-ii", "user_status": null, "title": "Paint House II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 28, "description": "There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\r\n\r\nThe cost of painting each house with a certain color is represented by a `n` x `k` cost matrix. For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on... Find the minimum cost to paint all houses.\r\n", "notice": "All costs are positive integers.", "clarification": "", "example": "Given `n` = 3, `k` = 3, `costs` = `[[14,2,11],[11,14,5],[14,3,10]]` return `10`\r\n\r\nhouse 0 is color 2, house 1 is color 3, house 2 is color 2, `2 + 5 + 3 = 10`", "challenge": "Could you solve it in O(nk)?", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 360, "title": "Sliding Window Median", "unique_name": "sliding-window-median", "level": 3, "accepted_rate": 18}, {"id": 515, "title": "Paint House", "unique_name": "paint-house", "level": 2, "accepted_rate": 36}, {"id": 514, "title": "Paint Fence", "unique_name": "paint-fence", "level": 1, "accepted_rate": 32}, {"id": 362, "title": "Sliding Window Maximum", "unique_name": "sliding-window-maximum", "level": 4, "accepted_rate": 27}, {"id": 50, "title": "Product of Array Exclude Itself", "unique_name": "product-of-array-exclude-itself", "level": 1, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[[14,2,11],[11,14,5],[14,3,10]]\n", "total_accepted": 3821, "total_submissions": 13260, "contest": "", "has_followed_by": false}, "ugly-number": {"id": 517, "unique_name": "ugly-number", "user_status": null, "title": "Ugly Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Write a program to check whether a given number is an `ugly` number`.\r\n\r\n`Ugly numbers` are positive numbers whose prime factors only include `2`, `3`, `5`. For example, `6`, `8` are ugly while `14` is not ugly since it includes another prime factor `7`.", "notice": "Note that `1` is typically treated as an ugly number.", "clarification": "", "example": "Given num = `8` return `true`\r\nGiven num = `14` return `false` ", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 518, "title": "Super Ugly Number", "unique_name": "super-ugly-number", "level": 2, "accepted_rate": 28}, {"id": 488, "title": "Happy Number", "unique_name": "happy-number", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "8\n", "total_accepted": 7338, "total_submissions": 19918, "contest": "", "has_followed_by": false}, "super-ugly-number": {"id": 518, "unique_name": "super-ugly-number", "user_status": null, "title": "Super Ugly Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Write a program to find the nth super ugly number.\r\n\r\nSuper ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size `k`. For example, `[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]` is the sequence of the first 12 super ugly numbers given primes = `[2, 7, 13, 19]` of size `4`.", "notice": "- `1` is a super ugly number for any given primes.\r\n- The given numbers in primes are in ascending order.\r\n- 0 < k \u2264 100, 0 < n \u2264 10^6, 0 < primes[i] < 1000", "clarification": "", "example": "Given n = `6`, primes = `[2, 7, 13, 19]`  return `13`", "challenge": "", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 517, "title": "Ugly Number", "unique_name": "ugly-number", "level": 1, "accepted_rate": 36}, {"id": 4, "title": "Ugly Number II", "unique_name": "ugly-number-ii", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "6\n[2,7,13,19]\n", "total_accepted": 3274, "total_submissions": 11332, "contest": "", "has_followed_by": false}, "consistent-hashing": {"id": 519, "title": "Consistent Hashing", "unique_name": "consistent-hashing", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "consistent-hashing-ii": {"id": 520, "title": "Consistent Hashing II", "unique_name": "consistent-hashing-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "remove-duplicate-numbers-in-array": {"id": 521, "title": "Remove Duplicate Numbers in Array", "unique_name": "remove-duplicate-numbers-in-array", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "tiny-url-ii": {"id": 522, "title": "Tiny Url II", "unique_name": "tiny-url-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "url-parser": {"id": 523, "title": "Url Parser", "unique_name": "url-parser", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "left-pad": {"id": 524, "unique_name": "left-pad", "user_status": null, "title": "Left Pad", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "You know what, left pad is javascript package and referenced by React: \r\n[Github link](https://github.com/azer/left-pad \"Left pad\")\r\n\r\nOne day his author unpublished it, then a lot of javascript projects in the world broken.\r\n\r\nYou can see from github it's only 11 lines.\r\n\r\nYou job is to implement the left pad function. If you do not know what left pad does, see examples below and guess.", "notice": "", "clarification": "", "example": "```\r\nleftpad(\"foo\", 5)\r\n>> \"  foo\"\r\n\r\nleftpad(\"foobar\", 6)\r\n>> \"foobar\"\r\n\r\nleftpad(\"1\", 2, \"0\")\r\n>> \"01\"\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "leftpad(\"foo\", 5)\n", "total_accepted": 3457, "total_submissions": 10605, "contest": "", "has_followed_by": false}, "mini-uber": {"id": 525, "title": "Mini Uber", "unique_name": "mini-uber", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "load-balancer": {"id": 526, "title": "Load Balancer", "unique_name": "load-balancer", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "trie-serialization": {"id": 527, "title": "Trie Serialization", "unique_name": "trie-serialization", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "flatten-nested-list-iterator": {"id": 528, "unique_name": "flatten-nested-list-iterator", "user_status": null, "title": "Flatten Nested List Iterator", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given a nested list of integers, implement an iterator to flatten it.\r\n\r\nEach element is either an integer, or a list -- whose elements may also be integers or other lists.", "notice": "You don't need to implement the remove method.", "clarification": "", "example": "- Given the list `[[1,1],2,[1,1]]`, By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1,1,2,1,1]`.\r\n\r\n- Given the list `[1,[4,[6]]]`, By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1,4,6]`.", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 57, "name": "Data Structure Design", "cn_name": "Data Structure Design", "type": 2, "unique_name": "data-structure-design", "alias": "", "problem_count": 11}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [{"id": 989, "title": "Array Nesting", "unique_name": "array-nesting", "level": 2, "accepted_rate": 54}, {"id": 601, "title": "Flatten 2D Vector", "unique_name": "flatten-2d-vector", "level": 2, "accepted_rate": 47}, {"id": 551, "title": "Nested List Weight Sum", "unique_name": "nested-list-weight-sum", "level": 1, "accepted_rate": 47}, {"id": 541, "title": "Zigzag Iterator II", "unique_name": "zigzag-iterator-ii", "level": 2, "accepted_rate": 36}, {"id": 540, "title": "Zigzag Iterator", "unique_name": "zigzag-iterator", "level": 2, "accepted_rate": 47}, {"id": 453, "title": "Flatten Binary Tree to Linked List", "unique_name": "flatten-binary-tree-to-linked-list", "level": 1, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[[1,1],2,[1,1]]\n", "total_accepted": 4861, "total_submissions": 16368, "contest": "", "has_followed_by": false}, "geohash": {"id": 529, "title": "Geohash", "unique_name": "geohash", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "geohash-ii": {"id": 530, "title": "Geohash II", "unique_name": "geohash-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "six-degrees": {"id": 531, "title": "Six Degrees", "unique_name": "six-degrees", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "reverse-pairs": {"id": 532, "unique_name": "reverse-pairs", "user_status": null, "title": "Reverse Pairs", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "For an array A, if i < j, and A [i] > A [j], called (A [i], A [j]) is a reverse pair.\r\nreturn total of reverse pairs in A.", "notice": "", "clarification": "", "example": "Given A = `[2, 4, 1, 3, 5]` , `(2, 1), (4, 1), (4, 3)` are reverse pairs. return `3` ", "challenge": "", "tags": [{"id": 51, "name": "Merge Sort", "cn_name": "Merge Sort", "type": 12, "unique_name": "merge-sort", "alias": "", "problem_count": 2}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[2,4,1,3,5]\n", "total_accepted": 5141, "total_submissions": 20584, "contest": "", "has_followed_by": false}, "two-sum-closest-to-target": {"id": 533, "title": "Two Sum - Closest to target", "unique_name": "two-sum-closest-to-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "house-robber-ii": {"id": 534, "unique_name": "house-robber-ii", "user_status": null, "title": "House Robber II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are **arranged in a circle**. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.\r\n\r\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight **without alerting the police**.", "notice": "This is an extension of [House Robber](http://www.lintcode.com/problem/house-robber/ \"House Robber\").", "clarification": "", "example": "nums = `[3,6,4]`, return `6`", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 1142, "title": "Non-negative Integers without Consecutive Ones", "unique_name": "non-negative-integers-without-consecutive-ones", "level": 3, "accepted_rate": 70}, {"id": 866, "title": "Coin Path", "unique_name": "coin-path", "level": 3, "accepted_rate": 35}, {"id": 535, "title": "House Robber III", "unique_name": "house-robber-iii", "level": 2, "accepted_rate": 32}, {"id": 515, "title": "Paint House", "unique_name": "paint-house", "level": 2, "accepted_rate": 36}, {"id": 514, "title": "Paint Fence", "unique_name": "paint-fence", "level": 1, "accepted_rate": 32}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[3,6,4]\n", "total_accepted": 4658, "total_submissions": 16252, "contest": "", "has_followed_by": false}, "house-robber-iii": {"id": 535, "unique_name": "house-robber-iii", "user_status": null, "title": "House Robber III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the \"root.\" Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that \"all houses in this place forms a binary tree\". It will automatically contact the police if two directly-linked houses were broken into on the same night.\r\n\r\nDetermine the maximum amount of money the thief can rob tonight without alerting the police.", "notice": "", "clarification": "", "example": "      3\r\n     / \\\r\n    2   3\r\n     \\   \\ \r\n      3   1\r\n\r\nMaximum amount of money the thief can rob = 3 + 3 + 1 = 7.\r\n\r\n\r\n        3\r\n       / \\\r\n      4   5\r\n     / \\   \\ \r\n    1   3   1\r\n\r\nMaximum amount of money the thief can rob = 4 + 5 = 9.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 866, "title": "Coin Path", "unique_name": "coin-path", "level": 3, "accepted_rate": 35}, {"id": 535, "title": "House Robber III", "unique_name": "house-robber-iii", "level": 2, "accepted_rate": 32}, {"id": 534, "title": "House Robber II", "unique_name": "house-robber-ii", "level": 2, "accepted_rate": 28}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "{3,2,3,#,3,#,1}\n", "total_accepted": 2763, "total_submissions": 8620, "contest": "", "has_followed_by": false}, "n-gram-map-reduce": {"id": 537, "title": "N-Gram (Map Reduce)", "unique_name": "n-gram-map-reduce", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "memcache": {"id": 538, "title": "Memcache", "unique_name": "memcache", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "move-zeroes": {"id": 539, "unique_name": "move-zeroes", "user_status": null, "title": "Move Zeroes", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 37, "description": "Given an array `nums`, write a function to move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.", "notice": "1. You must do this **in-place** without making a copy of the array.\r\n2. Minimize the total number of operations.", "clarification": "", "example": "Given `nums = [0, 1, 0, 3, 12]`, after calling your function, `nums` should be `[1, 3, 12, 0, 0]`.", "challenge": "", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 172, "title": "Remove Element", "unique_name": "remove-element", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[0,1,0,3,12]\n", "total_accepted": 12258, "total_submissions": 32831, "contest": "", "has_followed_by": false}, "zigzag-iterator": {"id": 540, "unique_name": "zigzag-iterator", "user_status": null, "title": "Zigzag Iterator", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Given two **1d** vectors, implement an iterator to return their elements alternately.", "notice": "", "clarification": "", "example": "Given two 1d vectors:\r\n\r\n    v1 = [1, 2]\r\n    v2 = [3, 4, 5, 6]\r\n\r\nBy calling next repeatedly until hasNext returns `false`, the order of elements returned by next should be: `[1, 3, 2, 4, 5, 6]`.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 601, "title": "Flatten 2D Vector", "unique_name": "flatten-2d-vector", "level": 2, "accepted_rate": 47}, {"id": 541, "title": "Zigzag Iterator II", "unique_name": "zigzag-iterator-ii", "level": 2, "accepted_rate": 36}, {"id": 528, "title": "Flatten Nested List Iterator", "unique_name": "flatten-nested-list-iterator", "level": 2, "accepted_rate": 29}, {"id": 86, "title": "Binary Search Tree Iterator", "unique_name": "binary-search-tree-iterator", "level": 3, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[1,2]\n[3,4,5,6]\n", "total_accepted": 2017, "total_submissions": 4273, "contest": "", "has_followed_by": false}, "zigzag-iterator-ii": {"id": 541, "title": "Zigzag Iterator II", "unique_name": "zigzag-iterator-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "kth-largest-in-n-arrays": {"id": 543, "title": "Kth Largest in N Arrays", "unique_name": "kth-largest-in-n-arrays", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 7, "title": "Advanced Algorithm Term 13 - HW1", "cover": "https://lintcode-media.s3.amazonaws.com/gaosuan_1.png", "start_at": "2016-11-25T23:00:00Z"}], "no_permission": true}, "top-k-largest-numbers": {"id": 544, "title": "Top k Largest Numbers", "unique_name": "top-k-largest-numbers", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 34, "title": "VMware", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/vmware.png", "privacy": "Password required"}, {"id": 50, "title": "Baidu", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/baidu.jpeg", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "top-k-largest-numbers-ii": {"id": 545, "title": "Top k Largest Numbers II", "unique_name": "top-k-largest-numbers-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 50, "title": "Baidu", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/baidu.jpeg", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 8, "title": "Algorithm Exam #26", "cover": "https://lintcode-media.s3.amazonaws.com/%E7%AE%97%E6%B3%95-S-01.png", "start_at": "2017-03-26T00:00:00Z"}], "no_permission": true}, "implement-queue-by-interface": {"id": 546, "title": "Implement Queue by Interface", "unique_name": "implement-queue-by-interface", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "intersection-of-two-arrays": {"id": 547, "unique_name": "intersection-of-two-arrays", "user_status": null, "title": "Intersection of Two Arrays", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given two arrays, write a function to compute their intersection.", "notice": "- Each element in the result must be unique.\r\n- The result can be in any order.", "clarification": "", "example": "Given *nums1* = `[1, 2, 2, 1]`, *nums2* = `[2, 2]`, return `[2]`.", "challenge": "Can you implement it in *three* different algorithms?", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 103, "name": "Two Sigma", "cn_name": "Two Sigma", "type": 3, "unique_name": "two-sigma", "alias": "", "problem_count": 5}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 548, "title": "Intersection of Two Arrays II", "unique_name": "intersection-of-two-arrays-ii", "level": 1, "accepted_rate": 24}, {"id": 248, "title": "Count of Smaller Number", "unique_name": "count-of-smaller-number", "level": 2, "accepted_rate": 21}, {"id": 6, "title": "Merge Two Sorted Arrays", "unique_name": "merge-two-sorted-arrays", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[1,2,2,1]\n[2,2]\n", "total_accepted": 14027, "total_submissions": 54471, "contest": "", "has_followed_by": false}, "intersection-of-two-arrays-ii": {"id": 548, "unique_name": "intersection-of-two-arrays-ii", "user_status": null, "title": "Intersection of Two Arrays II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 24, "description": "Given two arrays, write a function to compute their intersection.", "notice": "- Each element in the result should appear as many times as it shows in both arrays.\r\n- The result can be in any order.\r\n", "clarification": "", "example": "Given *nums1* = `[1, 2, 2, 1]`, *nums2* = `[2, 2]`, return `[2, 2]`.", "challenge": "- What if the given array is already sorted? How would you optimize your algorithm?\r\n- What if nums1's size is small compared to num2's size? Which algorithm is better?\r\n- What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\r\n", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 547, "title": "Intersection of Two Arrays", "unique_name": "intersection-of-two-arrays", "level": 1, "accepted_rate": 25}, {"id": 248, "title": "Count of Smaller Number", "unique_name": "count-of-smaller-number", "level": 2, "accepted_rate": 21}, {"id": 6, "title": "Merge Two Sorted Arrays", "unique_name": "merge-two-sorted-arrays", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[1,2,2,1]\n[2,2]\n", "total_accepted": 7236, "total_submissions": 29633, "contest": "", "has_followed_by": false}, "top-k-frequent-words-map-reduce": {"id": 549, "unique_name": "top-k-frequent-words-map-reduce", "user_status": null, "title": "Top K Frequent Words (Map Reduce)", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Find top k frequent words with map reduce framework.\r\n\r\nThe mapper's key is the document id, value is the content of the document, words in a document are split by spaces.\r\n\r\nFor reducer, the output should be at most k key-value pairs, which are the top k words and their frequencies in this reducer. The judge will take care about how to merge different reducers' results to get the global top k frequent words, so you don't need to care about that part.\r\n\r\nThe *k* is given in the constructor of TopK class.", "notice": "For the words with same frequency, rank them with alphabet.", "clarification": "", "example": "Given document A = \r\n```\r\nlintcode is the best online judge\r\nI love lintcode\r\n```\r\nand document B = \r\n```\r\nlintcode is an online judge for coding interview\r\nyou can test your code online at lintcode\r\n```\r\n\r\nThe top 2 words and their frequencies should be\r\n```\r\nlintcode, 4\r\nonline, 3\r\n```", "challenge": "", "tags": [{"id": 137, "name": "Big Data", "cn_name": "Big Data", "type": 1, "unique_name": "big-data", "alias": "", "problem_count": 2}, {"id": 79, "name": "Map Reduce", "cn_name": "Map Reduce", "type": 1, "unique_name": "map-reduce", "alias": "", "problem_count": 5}], "related_problems": [{"id": 554, "title": "Sort Integers (Map Reduce)", "unique_name": "sort-integers-map-reduce", "level": 1, "accepted_rate": 34}, {"id": 550, "title": "Top K Frequent Words II", "unique_name": "top-k-frequent-words-ii", "level": 3, "accepted_rate": 18}, {"id": 471, "title": "Top K Frequent Words", "unique_name": "top-k-frequent-words", "level": 2, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "2\n[{\"id\":1,\"content\":\"lintcode is the best online judge I love lintcode\"}, {\"id\":2,\"content\":\"lintcode is an online judge for coding interview you can test your code online at lintcode\"}]\n", "total_accepted": 1650, "total_submissions": 6969, "contest": "", "has_followed_by": false}, "top-k-frequent-words-ii": {"id": 550, "title": "Top K Frequent Words II", "unique_name": "top-k-frequent-words-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "nested-list-weight-sum": {"id": 551, "unique_name": "nested-list-weight-sum", "user_status": null, "title": "Nested List Weight Sum", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 47, "description": "Given a nested list of integers, return the sum of all integers in the list weighted by their depth. Each element is either an integer, or a list -- whose elements may also be integers or other lists.", "notice": "", "clarification": "", "example": "Given the list `[[1,1],2,[1,1]]`, return `10`. (four 1's at depth 2, one 2 at depth 1, 4 * 1 * 2 + 1 * 2 * 1 = 10)\r\nGiven the list `[1,[4,[6]]]`, return `27`. (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4 * 2 + 6 * 3 = 27)", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 989, "title": "Array Nesting", "unique_name": "array-nesting", "level": 2, "accepted_rate": 54}, {"id": 528, "title": "Flatten Nested List Iterator", "unique_name": "flatten-nested-list-iterator", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[[1,1],2,[1,1]]\n", "total_accepted": 2871, "total_submissions": 6005, "contest": "", "has_followed_by": false}, "create-maximum-number": {"id": 552, "unique_name": "create-maximum-number", "user_status": null, "title": "Create Maximum Number", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 16, "description": "Given two arrays of length `m` and `n` with digits `0-9` representing two numbers. Create the maximum number of length `k <= m + n` from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the `k` digits. You should try to optimize your time and space complexity.", "notice": "", "clarification": "", "example": "Given nums1 = `[3, 4, 6, 5]`, nums2 = `[9, 1, 2, 5, 8, 3]`, k = `5`\r\nreturn `[9, 8, 6, 5, 3]`\r\n\r\nGiven nums1 = `[6, 7]`, nums2 = `[6, 0, 4]`, k = `5`\r\nreturn `[6, 7, 6, 0, 4]`\r\n\r\nGiven nums1 = `[3, 9]`, nums2 = `[8, 9]`, k = `3`\r\nreturn `[9, 8, 9]`", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,4,6,5]\n[9,1,2,5,8,3]\n5\n", "total_accepted": 1364, "total_submissions": 8311, "contest": "", "has_followed_by": false}, "bomb-enemy": {"id": 553, "unique_name": "bomb-enemy", "user_status": null, "title": "Bomb Enemy", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given a 2D grid, each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'` (the number zero), return the maximum enemies you can kill using one bomb.\r\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.\r\n", "notice": "You can only put the bomb at an empty cell.", "clarification": "", "example": "Given a grid:\r\n\r\n    0 E 0 0\r\n    E 0 W E\r\n    0 E 0 0\r\n\r\nreturn `3`. (Placing a bomb at (1,1) kills 3 enemies)", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"0E00\",\"E0WE\",\"0E00\"]\n", "total_accepted": 1953, "total_submissions": 5913, "contest": "", "has_followed_by": false}, "sort-integers-map-reduce": {"id": 554, "title": "Sort Integers (Map Reduce)", "unique_name": "sort-integers-map-reduce", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "counting-bloom-filter": {"id": 555, "title": "Counting Bloom Filter", "unique_name": "counting-bloom-filter", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "standard-bloom-filter": {"id": 556, "title": "Standard Bloom Filter", "unique_name": "standard-bloom-filter", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "count-characters": {"id": 557, "title": "Count Characters", "unique_name": "count-characters", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "sliding-window-matrix-maximum": {"id": 558, "title": "Sliding Window Matrix Maximum", "unique_name": "sliding-window-matrix-maximum", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "trie-service": {"id": 559, "title": "Trie Service", "unique_name": "trie-service", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "friendship-service": {"id": 560, "title": "Friendship Service", "unique_name": "friendship-service", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "backpack-iv": {"id": 562, "title": "Backpack IV", "unique_name": "backpack-iv", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "backpack-v": {"id": 563, "title": "Backpack V", "unique_name": "backpack-v", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "combination-sum-iv": {"id": 564, "unique_name": "combination-sum-iv", "user_status": null, "title": "Combination Sum IV ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given an integer array `nums` with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer `target`.", "notice": "A number in the array can be used multiple times in the combination. \r\nDifferent orders are counted as different combinations.", "clarification": "", "example": "Given nums = `[1, 2, 4]`, target = `4`\r\n\r\n    The possible combination ways are:\r\n    [1, 1, 1, 1]\r\n    [1, 1, 2]\r\n    [1, 2, 1]\r\n    [2, 1, 1]\r\n    [2, 2]\r\n    [4]\r\n\r\nreturn `6`", "challenge": "", "tags": [{"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 800, "title": "Backpack IX", "unique_name": "backpack-ix", "level": 2, "accepted_rate": 45}, {"id": 740, "title": "Coin Change 2", "unique_name": "coin-change-2", "level": 2, "accepted_rate": 32}, {"id": 669, "title": "Coin Change", "unique_name": "coin-change", "level": 2, "accepted_rate": 31}, {"id": 563, "title": "Backpack V", "unique_name": "backpack-v", "level": 2, "accepted_rate": 47}, {"id": 562, "title": "Backpack IV", "unique_name": "backpack-iv", "level": 2, "accepted_rate": 43}, {"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "level": 3, "accepted_rate": 57}, {"id": 125, "title": "Backpack II", "unique_name": "backpack-ii", "level": 2, "accepted_rate": 41}, {"id": 92, "title": "Backpack", "unique_name": "backpack", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,2,4]\n4\n", "total_accepted": 4332, "total_submissions": 12766, "contest": "", "has_followed_by": false}, "heart-beat": {"id": 565, "title": "Heart Beat", "unique_name": "heart-beat", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "gfs-client": {"id": 566, "title": "GFS Client", "unique_name": "gfs-client", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 8, "title": "System Design", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/sys-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 10, "title": "Big Data", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/bigdata-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "add-digits": {"id": 569, "unique_name": "add-digits", "user_status": null, "title": "Add Digits", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Given a non-negative integer `num`, repeatedly add all its digits until the result has only one digit.", "notice": "", "clarification": "", "example": "Given `num` = 38.\r\nThe process is like: `3 + 8 = 11`, `1 + 1` = `2`. Since `2` has only one digit, return `2`.", "challenge": "Could you do it without any loop/recursion in O(1) runtime?", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 488, "title": "Happy Number", "unique_name": "happy-number", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "38\n", "total_accepted": 5048, "total_submissions": 13003, "contest": "", "has_followed_by": false}, "find-the-missing-number-ii": {"id": 570, "unique_name": "find-the-missing-number-ii", "user_status": null, "title": "Find the Missing Number II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Giving a string with number from 1-`n` in random order, but miss `1` number.Find that number.", "notice": "n <= 30", "clarification": "", "example": "Given n = `20`, str = `19201234567891011121314151618`\r\n\r\nreturn `17`", "challenge": "", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 681, "title": "First Missing Prime Number", "unique_name": "first-missing-prime-number", "level": 2, "accepted_rate": 27}, {"id": 633, "title": "Find the Duplicate Number", "unique_name": "find-the-duplicate-number", "level": 2, "accepted_rate": 35}, {"id": 196, "title": "Missing Number", "unique_name": "missing-number", "level": 2, "accepted_rate": 34}, {"id": 189, "title": "First Missing Positive ", "unique_name": "first-missing-positive", "level": 2, "accepted_rate": 23}, {"id": 237, "title": "Missing Integer", "unique_name": "missing-integer", "level": 1, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "20\n\"19201234567891011121314151618\"\n", "total_accepted": 3383, "total_submissions": 13125, "contest": "", "has_followed_by": false}, "build-post-office-ii": {"id": 573, "title": "Build Post Office II", "unique_name": "build-post-office-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "build-post-office": {"id": 574, "title": "Build Post Office", "unique_name": "build-post-office", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "decode-string": {"id": 575, "unique_name": "decode-string", "user_status": null, "title": "Decode String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given an expression `s` includes numbers, letters and brackets. Number represents the number of repetitions inside the brackets(can be a string or another expression)\u00ef\u00bc\u017dPlease expand expression to be a string.", "notice": "", "clarification": "", "example": "s = `abc3[a]` return `abcaaa`\r\ns = `3[abc]` return `abcabcabc`\r\ns = `4[ac]dy`, return `acacacacdy`\r\ns = `3[2[ad]3[pf]]xyz`, return `adadpfpfpfadadpfpfpfadadpfpfpfxyz`", "challenge": "Can you do it without recursion?", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 53, "name": "Non Recursion", "cn_name": "Non Recursion", "type": 13, "unique_name": "non-recursion", "alias": "", "problem_count": 5}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 104, "name": "Coupang", "cn_name": "Coupang", "type": 3, "unique_name": "coupang", "alias": "", "problem_count": 8}], "related_problems": [{"id": 885, "title": "Encode String with Shortest Length", "unique_name": "encode-string-with-shortest-length", "level": 3, "accepted_rate": 44}, {"id": 367, "title": "Expression Tree Build", "unique_name": "expression-tree-build", "level": 3, "accepted_rate": 23}, {"id": 368, "title": "Expression Evaluation", "unique_name": "expression-evaluation", "level": 3, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"3[abc]\"\n", "total_accepted": 5633, "total_submissions": 20034, "contest": "", "has_followed_by": false}, "merge-k-sorted-interval-lists": {"id": 577, "title": "Merge K Sorted Interval Lists", "unique_name": "merge-k-sorted-interval-lists", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "lowest-common-ancestor-iii": {"id": 578, "title": "Lowest Common Ancestor III", "unique_name": "lowest-common-ancestor-iii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}], "contest_set": [{"id": 4, "title": "Algorithm Mid-term Test 23", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-09-18T15:00:00Z"}], "no_permission": true}, "longest-repeating-subsequence": {"id": 581, "title": "Longest Repeating Subsequence", "unique_name": "longest-repeating-subsequence", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 6, "title": "Final Exam - 24", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-11-22T18:00:00Z"}], "no_permission": true}, "word-break-ii": {"id": 582, "unique_name": "word-break-ii", "user_status": null, "title": "Word Break II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 22, "description": "Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.\r\n\r\nReturn all such possible sentences.", "notice": "", "clarification": "", "example": "Gieve s = `lintcode`,\r\ndict = `[\"de\", \"ding\", \"co\", \"code\", \"lint\"]`.\r\n\r\nA solution is `[\"lint code\", \"lint co de\"]`.\r\n", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 680, "title": "Split String", "unique_name": "split-string", "level": 1, "accepted_rate": 29}, {"id": 107, "title": "Word Break", "unique_name": "word-break", "level": 2, "accepted_rate": 14}], "comment_count": 0, "testcase_sample": "\"lintcode\"\n[\"de\",\"ding\",\"co\",\"code\",\"lint\"]\n", "total_accepted": 4882, "total_submissions": 21371, "contest": "", "has_followed_by": false}, "drop-eggs-ii": {"id": 584, "title": "Drop Eggs II", "unique_name": "drop-eggs-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 13, "title": "BAT\u9ad8\u9891\u9762\u8bd5\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/BAT.jpg", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 51, "title": "Tencent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/tencent.jpg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "maximum-number-in-mountain-sequence": {"id": 585, "title": "Maximum Number in Mountain Sequence", "unique_name": "maximum-number-in-mountain-sequence", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 6, "title": "Final Exam - 24", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-11-22T18:00:00Z"}], "no_permission": true}, "sqrtx-ii": {"id": 586, "title": "Sqrt(x) II", "unique_name": "sqrtx-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 6, "title": "Final Exam - 24", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa.jpg", "start_at": "2016-11-22T18:00:00Z"}], "no_permission": true}, "two-sum-unique-pairs": {"id": 587, "title": "Two Sum - Unique pairs", "unique_name": "two-sum-unique-pairs", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "partition-equal-subset-sum": {"id": 588, "unique_name": "partition-equal-subset-sum", "user_status": null, "title": "Partition Equal Subset Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given a `non-empty` array containing `only positive integers`, find if the array can be partitioned into `two` subsets such that the sum of elements in both subsets is equal.", "notice": "Each of the array element will not exceed 100.\r\nThe array size will not exceed 200.", "clarification": "", "example": "Given nums = `[1, 5, 11, 5]`, return `true`\r\ntwo subsets: [1, 5, 5], [11]\r\n\r\nGiven nums = `[1, 2, 3, 9]`, return `false`", "challenge": "", "tags": [{"id": 95, "name": "eBay", "cn_name": "eBay", "type": 3, "unique_name": "ebay", "alias": "", "problem_count": 3}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 562, "title": "Backpack IV", "unique_name": "backpack-iv", "level": 2, "accepted_rate": 43}, {"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "level": 3, "accepted_rate": 57}, {"id": 125, "title": "Backpack II", "unique_name": "backpack-ii", "level": 2, "accepted_rate": 41}, {"id": 92, "title": "Backpack", "unique_name": "backpack", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,5,11,5]\n", "total_accepted": 1101, "total_submissions": 3502, "contest": "", "has_followed_by": false}, "connecting-graph": {"id": 589, "title": "Connecting Graph", "unique_name": "connecting-graph", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "connecting-graph-ii": {"id": 590, "title": "Connecting Graph II", "unique_name": "connecting-graph-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "connecting-graph-iii": {"id": 591, "unique_name": "connecting-graph-iii", "user_status": null, "title": "Connecting Graph III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 52, "description": "Given `n` nodes in a graph labeled from `1` to `n`. There is no edges in the graph at beginning.\r\n\r\nYou need to support the following method:\r\n1. `connect(a, b)`, an edge to connect node a and node b\r\n2. `query()`, Returns the number of connected component in the graph", "notice": "", "clarification": "", "example": "    5 // n = 5\r\n    query() return 5\r\n    connect(1, 2)\r\n    query() return 4\r\n    connect(2, 4)\r\n    query() return 3\r\n    connect(1, 4)\r\n    query() return 3", "challenge": "", "tags": [{"id": 59, "name": "Union Find", "cn_name": "Union Find", "type": 21, "unique_name": "union-find", "alias": "", "problem_count": 11}], "related_problems": [{"id": 629, "title": "Minimum Spanning Tree", "unique_name": "minimum-spanning-tree", "level": 3, "accepted_rate": 27}, {"id": 590, "title": "Connecting Graph II", "unique_name": "connecting-graph-ii", "level": 2, "accepted_rate": 39}, {"id": 589, "title": "Connecting Graph", "unique_name": "connecting-graph", "level": 2, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "ConnectingGraph3(5)\nquery()\nconnect(1, 2)\nquery()\nconnect(2, 4)\nquery()\nconnect(1, 4)\nquery()\n", "total_accepted": 3297, "total_submissions": 6277, "contest": "", "has_followed_by": false}, "stone-game-ii": {"id": 593, "title": "Stone Game II", "unique_name": "stone-game-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "strstr-ii": {"id": 594, "unique_name": "strstr-ii", "user_status": null, "title": "strStr II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 26, "description": "Implement `strStr` function in O(n + m) time.\r\n\r\n`strStr` return the first index of the target string in a source string. The length of the target string is *m* and the length of the source string is *n*.\r\nIf target does not exist in source, just return -1.", "notice": "", "clarification": "", "example": "Given source = `abcdef`, target = `bcd`, return `1`.", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 13, "title": "Implement strStr()", "unique_name": "implement-strstr", "level": 1, "accepted_rate": 19}], "comment_count": 0, "testcase_sample": "\"abcdef\"\n\"bcd\"\n", "total_accepted": 5295, "total_submissions": 20290, "contest": "", "has_followed_by": false}, "binary-tree-longest-consecutive-sequence": {"id": 595, "unique_name": "binary-tree-longest-consecutive-sequence", "user_status": null, "title": "Binary Tree Longest Consecutive Sequence", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Given a binary tree, find the length of the longest consecutive sequence path.\r\n\r\nThe path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (`cannot be the reverse`).", "notice": "", "clarification": "", "example": "For example,\r\n```\r\n   1\r\n    \\\r\n     3\r\n    / \\\r\n   2   4\r\n        \\\r\n         5\r\n```\r\nLongest consecutive sequence path is `3-4-5`, so return `3`.\r\n```\r\n   2\r\n    \\\r\n     3\r\n    / \r\n   2    \r\n  / \r\n 1\r\n```\r\nLongest consecutive sequence path is `2-3`,not`3-2-1`, so return `2`.", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 717, "title": "Tree Longest Path With Same Value ", "unique_name": "tree-longest-path-with-same-value", "level": 2, "accepted_rate": 16}, {"id": 619, "title": "Binary Tree Longest Consecutive Sequence III", "unique_name": "binary-tree-longest-consecutive-sequence-iii", "level": 2, "accepted_rate": 39}, {"id": 614, "title": "Binary Tree Longest Consecutive Sequence II", "unique_name": "binary-tree-longest-consecutive-sequence-ii", "level": 2, "accepted_rate": 33}, {"id": 596, "title": "Minimum Subtree", "unique_name": "minimum-subtree", "level": 1, "accepted_rate": 35}, {"id": 124, "title": "Longest Consecutive Sequence", "unique_name": "longest-consecutive-sequence", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "{1,#,3,2,4,#,#,#,5}\n", "total_accepted": 7328, "total_submissions": 22257, "contest": "", "has_followed_by": false}, "minimum-subtree": {"id": 596, "title": "Minimum Subtree", "unique_name": "minimum-subtree", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "subtree-with-maximum-average": {"id": 597, "title": "Subtree with Maximum Average", "unique_name": "subtree-with-maximum-average", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "zombie-in-matrix": {"id": 598, "title": "Zombie in Matrix ", "unique_name": "zombie-in-matrix", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "insert-into-a-cyclic-sorted-list": {"id": 599, "unique_name": "insert-into-a-cyclic-sorted-list", "user_status": null, "title": "Insert into a Cyclic Sorted List", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 22, "description": "Given a node from a cyclic linked list which has been sorted, write a function to insert a value into the list such that it remains a cyclic sorted list. The given node can be any single node in the list. Return the inserted new node.", "notice": "`3->5->1` is a cyclic list, so `3` is next node of `1`.\r\n`3->5->1` is same with `5->1->3`", "clarification": "", "example": "Given a list, and insert a value `4`:\r\n`3->5->1`\r\nReturn `5->1->3->4`\r\n", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [{"id": 219, "title": "Insert Node in Sorted Linked List", "unique_name": "insert-node-in-sorted-linked-list", "level": 0, "accepted_rate": 22}, {"id": 173, "title": "Insertion Sort List", "unique_name": "insertion-sort-list", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "3->5->1\n4\n", "total_accepted": 5959, "total_submissions": 26694, "contest": "", "has_followed_by": false}, "smallest-rectangle-enclosing-black-pixels": {"id": 600, "unique_name": "smallest-rectangle-enclosing-black-pixels", "user_status": null, "title": "Smallest Rectangle Enclosing Black Pixels", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 27, "description": "An image is represented by a binary matrix with `0` as a white pixel and `1` as a black pixel. The black pixels are connected, i.e., there is only one black region. Pixels are connected horizontally and vertically. Given the location `(x, y)` of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.", "notice": "", "clarification": "", "example": "For example, given the following image:\r\n```\r\n[\r\n  \"0010\",\r\n  \"0110\",\r\n  \"0100\"\r\n]\r\n```\r\nand x = `0`, y = `2`,\r\nReturn `6`.", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"0010\",\"0110\",\"0100\"]\n0\n2\n", "total_accepted": 4900, "total_submissions": 17723, "contest": "", "has_followed_by": false}, "flatten-2d-vector": {"id": 601, "unique_name": "flatten-2d-vector", "user_status": null, "title": "Flatten 2D Vector", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Implement an iterator to flatten a 2d vector.", "notice": "", "clarification": "", "example": "Given 2d vector =\r\n```\r\n[\r\n  [1,2],\r\n  [3],\r\n  [4,5,6]\r\n]\r\n```\r\nBy calling next repeatedly until hasNext returns false, the order of elements returned by next should be: `[1,2,3,4,5,6]`.", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 540, "title": "Zigzag Iterator", "unique_name": "zigzag-iterator", "level": 2, "accepted_rate": 47}, {"id": 528, "title": "Flatten Nested List Iterator", "unique_name": "flatten-nested-list-iterator", "level": 2, "accepted_rate": 29}, {"id": 453, "title": "Flatten Binary Tree to Linked List", "unique_name": "flatten-binary-tree-to-linked-list", "level": 1, "accepted_rate": 34}, {"id": 22, "title": "Flatten List", "unique_name": "flatten-list", "level": 1, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[[1,2],[3],[4,5,6]]\n", "total_accepted": 2522, "total_submissions": 5312, "contest": "", "has_followed_by": false}, "russian-doll-envelopes": {"id": 602, "unique_name": "russian-doll-envelopes", "user_status": null, "title": "Russian Doll Envelopes", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 19, "description": "You have a number of envelopes with widths and heights given as a pair of integers `(w, h)`. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.\r\n\r\nWhat is the maximum number of envelopes can you Russian doll? (put one inside other)", "notice": "", "clarification": "", "example": "Given envelopes = `[[5,4],[6,4],[6,7],[2,3]]`, \r\nthe maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 76, "title": "Longest Increasing Subsequence", "unique_name": "longest-increasing-subsequence", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[[5,4],[6,4],[6,7],[2,3]]\n", "total_accepted": 2073, "total_submissions": 10819, "contest": "", "has_followed_by": false}, "largest-divisible-subset": {"id": 603, "unique_name": "largest-divisible-subset", "user_status": null, "title": "Largest Divisible Subset", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Given a set of `distinct positive` integers, find the largest subset such that every pair `(Si, Sj)` of elements in this subset satisfies: `Si % Sj = 0` or `Sj % Si = 0`.", "notice": "If there are multiple solutions, return any subset is fine.", "clarification": "", "example": "Given nums =  `[1,2,3]`, return `[1,2]` or `[1,3]`\r\n\r\nGiven nums = `[1,2,4,8]`, return `[1,2,4,8]`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 76, "title": "Longest Increasing Subsequence", "unique_name": "longest-increasing-subsequence", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[1,2,3]\n", "total_accepted": 3896, "total_submissions": 10999, "contest": "", "has_followed_by": false}, "window-sum": {"id": 604, "title": "Window Sum", "unique_name": "window-sum", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 11, "title": "Amazon OA High Frequent 9 Problems", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Amazon-logo.jpg", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [{"id": 8, "title": "Algorithm Exam #26", "cover": "https://lintcode-media.s3.amazonaws.com/%E7%AE%97%E6%B3%95-S-01.png", "start_at": "2017-03-26T00:00:00Z"}], "no_permission": true}, "sequence-reconstruction": {"id": 605, "unique_name": "sequence-reconstruction", "user_status": null, "title": "Sequence Reconstruction", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "Check whether the original sequence `org` can be uniquely reconstructed from the sequences in `seqs`. The org sequence is a permutation of the integers from 1 to n, with 1 \u2264 n \u2264 10^4. Reconstruction means building a shortest common supersequence of the sequences in `seqs` (i.e., a shortest sequence so that all sequences in `seqs` are subsequences of it). Determine whether there is only one sequence that can be reconstructed from `seqs` and it is the `org` sequence.", "notice": "", "clarification": "", "example": "```\r\nGiven org = [1,2,3], seqs = [[1,2],[1,3]]\r\nReturn false\r\nExplanation:\r\n[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.\r\n\r\nGiven org = [1,2,3], seqs = [[1,2]]\r\nReturn false\r\nExplanation:\r\nThe reconstructed sequence can only be [1,2].\r\n\r\nGiven org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]\r\nReturn true\r\nExplanation:\r\nThe sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].\r\n\r\nGiven org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]\r\nReturn true\r\n```", "challenge": "", "tags": [{"id": 80, "name": "Topological Sort", "cn_name": "Topological Sort", "type": 1, "unique_name": "topological-sort", "alias": "", "problem_count": 7}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 815, "title": "Course Schedule IV", "unique_name": "course-schedule-iv", "level": 3, "accepted_rate": 50}, {"id": 616, "title": "Course Schedule II", "unique_name": "course-schedule-ii", "level": 2, "accepted_rate": 23}, {"id": 127, "title": "Topological Sorting", "unique_name": "topological-sorting", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "[1,2,3]\n[[1,2],[1,3]]\n", "total_accepted": 4415, "total_submissions": 21262, "contest": "", "has_followed_by": false}, "kth-largest-element-ii": {"id": 606, "title": "Kth Largest Element II", "unique_name": "kth-largest-element-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "two-sum-iii-data-structure-design": {"id": 607, "unique_name": "two-sum-iii-data-structure-design", "user_status": null, "title": "Two Sum III - Data structure design", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "Design and implement a TwoSum class. It should support the following operations: `add` and `find`.\r\n\r\n`add` - Add the number to an internal data structure.\r\n`find` - Find if there exists any pair of numbers which sum is equal to the value.", "notice": "", "clarification": "", "example": "```\r\nadd(1); add(3); add(5);\r\nfind(4) // return true\r\nfind(7) // return false\r\n```", "challenge": "", "tags": [{"id": 57, "name": "Data Structure Design", "cn_name": "Data Structure Design", "type": 2, "unique_name": "data-structure-design", "alias": "", "problem_count": 11}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 608, "title": "Two Sum II - Input array is sorted ", "unique_name": "two-sum-ii-input-array-is-sorted", "level": 2, "accepted_rate": 49}, {"id": 648, "title": "Unique Word Abbreviation", "unique_name": "unique-word-abbreviation", "level": 2, "accepted_rate": 28}, {"id": 610, "title": "Two Sum - Difference equals to target ", "unique_name": "two-sum-difference-equals-to-target", "level": 2, "accepted_rate": 26}, {"id": 609, "title": "Two Sum - Less than or equal to target", "unique_name": "two-sum-less-than-or-equal-to-target", "level": 2, "accepted_rate": 41}, {"id": 587, "title": "Two Sum - Unique pairs", "unique_name": "two-sum-unique-pairs", "level": 2, "accepted_rate": 35}, {"id": 533, "title": "Two Sum - Closest to target", "unique_name": "two-sum-closest-to-target", "level": 2, "accepted_rate": 44}, {"id": 443, "title": "Two Sum - Greater than target", "unique_name": "two-sum-greater-than-target", "level": 2, "accepted_rate": 39}, {"id": 56, "title": "Two Sum", "unique_name": "two-sum", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "add(1)\nadd(3)\nadd(5)\nfind(4)\nfind(7)\n", "total_accepted": 6635, "total_submissions": 18433, "contest": "", "has_followed_by": false}, "two-sum-ii-input-array-is-sorted": {"id": 608, "unique_name": "two-sum-ii-input-array-is-sorted", "user_status": null, "title": "Two Sum II - Input array is sorted ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Given an array of integers that is already *sorted in ascending order*, find two numbers such that they add up to a specific target number.\r\n\r\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.", "notice": "You may assume that each input would have exactly one solution.", "clarification": "", "example": "Given nums = `[2, 7, 11, 15]`, target = `9`\r\nreturn `[1, 2]`", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 689, "title": "Two Sum IV - Input is a BST", "unique_name": "two-sum-iv-input-is-a-bst", "level": 2, "accepted_rate": 31}, {"id": 610, "title": "Two Sum - Difference equals to target ", "unique_name": "two-sum-difference-equals-to-target", "level": 2, "accepted_rate": 26}, {"id": 609, "title": "Two Sum - Less than or equal to target", "unique_name": "two-sum-less-than-or-equal-to-target", "level": 2, "accepted_rate": 41}, {"id": 607, "title": "Two Sum III - Data structure design", "unique_name": "two-sum-iii-data-structure-design", "level": 1, "accepted_rate": 35}, {"id": 587, "title": "Two Sum - Unique pairs", "unique_name": "two-sum-unique-pairs", "level": 2, "accepted_rate": 35}, {"id": 533, "title": "Two Sum - Closest to target", "unique_name": "two-sum-closest-to-target", "level": 2, "accepted_rate": 44}, {"id": 443, "title": "Two Sum - Greater than target", "unique_name": "two-sum-greater-than-target", "level": 2, "accepted_rate": 39}, {"id": 56, "title": "Two Sum", "unique_name": "two-sum", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[2,7,11,15]\n9", "total_accepted": 8342, "total_submissions": 16768, "contest": "", "has_followed_by": false}, "two-sum-less-than-or-equal-to-target": {"id": 609, "title": "Two Sum - Less than or equal to target", "unique_name": "two-sum-less-than-or-equal-to-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "two-sum-difference-equals-to-target": {"id": 610, "title": "Two Sum - Difference equals to target ", "unique_name": "two-sum-difference-equals-to-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "knight-shortest-path": {"id": 611, "title": "Knight Shortest Path", "unique_name": "knight-shortest-path", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "k-closest-points": {"id": 612, "title": "K Closest Points", "unique_name": "k-closest-points", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 44, "title": "Oracle", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/oracle.jpg", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 11, "title": "Amazon OA High Frequent 9 Problems", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Amazon-logo.jpg", "privacy": "Password required"}, {"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "high-five": {"id": 613, "title": "High Five", "unique_name": "high-five", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 11, "title": "Amazon OA High Frequent 9 Problems", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Amazon-logo.jpg", "privacy": "Password required"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "binary-tree-longest-consecutive-sequence-ii": {"id": 614, "unique_name": "binary-tree-longest-consecutive-sequence-ii", "user_status": null, "title": "Binary Tree Longest Consecutive Sequence II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given a binary tree, find the length of the longest consecutive sequence path.\r\nThe path could be start and end at any node in the tree", "notice": "", "clarification": "", "example": "```\r\n    1\r\n   / \\\r\n  2   0\r\n /\r\n3\r\n```\r\nReturn `4` // `0-1-2-3`", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 717, "title": "Tree Longest Path With Same Value ", "unique_name": "tree-longest-path-with-same-value", "level": 2, "accepted_rate": 16}, {"id": 619, "title": "Binary Tree Longest Consecutive Sequence III", "unique_name": "binary-tree-longest-consecutive-sequence-iii", "level": 2, "accepted_rate": 39}, {"id": 595, "title": "Binary Tree Longest Consecutive Sequence", "unique_name": "binary-tree-longest-consecutive-sequence", "level": 1, "accepted_rate": 32}, {"id": 472, "title": "Binary Tree Path Sum III", "unique_name": "binary-tree-path-sum-iii", "level": 3, "accepted_rate": 38}], "comment_count": 0, "testcase_sample": "{1,2,0,3}\n", "total_accepted": 2917, "total_submissions": 8675, "contest": "", "has_followed_by": false}, "course-schedule": {"id": 615, "unique_name": "course-schedule", "user_status": null, "title": "Course Schedule", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "There are a total of n courses you have to take, labeled from `0` to `n - 1`.\r\n\r\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\r\n\r\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?", "notice": "", "clarification": "", "example": "Given n = `2`, prerequisites = `[[1,0]]`\r\nReturn `true`\r\n\r\nGiven n = `2`, prerequisites = `[[1,0],[0,1]]`\r\nReturn `false`\r\n", "challenge": "", "tags": [{"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 80, "name": "Topological Sort", "cn_name": "Topological Sort", "type": 1, "unique_name": "topological-sort", "alias": "", "problem_count": 7}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}], "related_problems": [{"id": 815, "title": "Course Schedule IV", "unique_name": "course-schedule-iv", "level": 3, "accepted_rate": 50}, {"id": 696, "title": "Course Schedule III", "unique_name": "course-schedule-iii", "level": 3, "accepted_rate": 23}, {"id": 616, "title": "Course Schedule II", "unique_name": "course-schedule-ii", "level": 2, "accepted_rate": 23}, {"id": 127, "title": "Topological Sorting", "unique_name": "topological-sorting", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "2\n[[1,0]]\n", "total_accepted": 6290, "total_submissions": 24775, "contest": "", "has_followed_by": false}, "course-schedule-ii": {"id": 616, "unique_name": "course-schedule-ii", "user_status": null, "title": "Course Schedule II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "There are a total of n courses you have to take, labeled from `0` to `n - 1`.\r\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: `[0,1]`\r\n\r\nGiven the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.\r\n\r\nThere may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.", "notice": "", "clarification": "", "example": "Given n = `2`, prerequisites = `[[1,0]]`\r\nReturn `[0,1]`\r\n\r\nGiven n = 4, prerequisites = `[1,0],[2,0],[3,1],[3,2]]`\r\nReturn `[0,1,2,3]` or `[0,2,1,3]`", "challenge": "", "tags": [{"id": 80, "name": "Topological Sort", "cn_name": "Topological Sort", "type": 1, "unique_name": "topological-sort", "alias": "", "problem_count": 7}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 916, "title": "Palindrome Permutation", "unique_name": "palindrome-permutation", "level": 1, "accepted_rate": 58}, {"id": 892, "title": "Alien Dictionary", "unique_name": "alien-dictionary", "level": 3, "accepted_rate": 21}, {"id": 815, "title": "Course Schedule IV", "unique_name": "course-schedule-iv", "level": 3, "accepted_rate": 50}, {"id": 696, "title": "Course Schedule III", "unique_name": "course-schedule-iii", "level": 3, "accepted_rate": 23}, {"id": 615, "title": "Course Schedule", "unique_name": "course-schedule", "level": 2, "accepted_rate": 25}, {"id": 605, "title": "Sequence Reconstruction", "unique_name": "sequence-reconstruction", "level": 2, "accepted_rate": 20}, {"id": 127, "title": "Topological Sorting", "unique_name": "topological-sorting", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "2\n[[1,0]]\n", "total_accepted": 9885, "total_submissions": 42794, "contest": "", "has_followed_by": false}, "maximum-average-subarray-ii": {"id": 617, "unique_name": "maximum-average-subarray-ii", "user_status": null, "title": "Maximum Average Subarray II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 19, "description": "Given an array with positive and negative numbers, find the `maximum average subarray` which length should be greater or equal to given length `k`.", "notice": "It's guaranteed that the size of the array is greater or equal to *k*.", "clarification": "", "example": "Given nums = `[1, 12, -5, -6, 50, 3]`, k = `3`\r\n\r\nReturn `15.667` // (-6 + 50 + 3) / 3 = 15.667", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 17, "name": "Subarray", "cn_name": "Subarray", "type": 1, "unique_name": "subarray", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 868, "title": "Maximum Average Subarray I", "unique_name": "maximum-average-subarray-i", "level": 1, "accepted_rate": 39}, {"id": 621, "title": "Maximum Subarray V", "unique_name": "maximum-subarray-v", "level": 3, "accepted_rate": 29}, {"id": 620, "title": "Maximum Subarray IV", "unique_name": "maximum-subarray-iv", "level": 2, "accepted_rate": 36}, {"id": 41, "title": "Maximum Subarray", "unique_name": "maximum-subarray", "level": 1, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[1,12,-5,-6,50,3]\n3\n", "total_accepted": 4914, "total_submissions": 25571, "contest": "", "has_followed_by": false}, "search-graph-nodes": {"id": 618, "title": "Search Graph Nodes", "unique_name": "search-graph-nodes", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "binary-tree-longest-consecutive-sequence-iii": {"id": 619, "title": "Binary Tree Longest Consecutive Sequence III", "unique_name": "binary-tree-longest-consecutive-sequence-iii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "maximum-subarray-iv": {"id": 620, "title": "Maximum Subarray IV", "unique_name": "maximum-subarray-iv", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "maximum-subarray-v": {"id": 621, "title": "Maximum Subarray V", "unique_name": "maximum-subarray-v", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "frog-jump": {"id": 622, "unique_name": "frog-jump", "user_status": null, "title": "Frog Jump", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 31, "description": "A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\r\n\r\nGiven a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.\r\n\r\nIf the frog's last jump was k units, then its next jump must be either `k - 1`, `k`, or `k + 1` units. Note that the frog can only jump in the forward direction.", "notice": "- The number of stones is \u00e2\u2030\u00a5 `2` and is < `1100`.\r\n- Each stone's position will be a non-negative integer < `2^31`.\r\n- The first stone's position is always `0`.", "clarification": "", "example": "```\r\nGiven stones = [0,1,3,5,6,8,12,17]\r\n\r\nThere are a total of 8 stones.\r\nThe first stone at the 0th unit, second stone at the 1st unit,\r\nthird stone at the 3rd unit, and so on...\r\nThe last stone at the 17th unit.\r\n\r\nReturn true. The frog can jump to the last stone by jumping \r\n1 unit to the 2nd stone, then 2 units to the 3rd stone, then \r\n2 units to the 4th stone, then 3 units to the 6th stone, \r\n4 units to the 7th stone, and 5 units to the 8th stone.\r\n\r\nGiven stones = `[0,1,2,3,4,8,9,11]`\r\n\r\nReturn false. There is no way to jump to the last stone as \r\nthe gap between the 5th and 6th stone is too large.\r\n```", "challenge": "", "tags": [{"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 76, "title": "Longest Increasing Subsequence", "unique_name": "longest-increasing-subsequence", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[0,1,3,5,6,8,12,17]\n", "total_accepted": 1977, "total_submissions": 6334, "contest": "", "has_followed_by": false}, "k-edit-distance": {"id": 623, "title": "K Edit Distance", "unique_name": "k-edit-distance", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "remove-substrings": {"id": 624, "title": "Remove Substrings", "unique_name": "remove-substrings", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "partition-array-ii": {"id": 625, "title": "Partition Array II", "unique_name": "partition-array-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "rectangle-overlap": {"id": 626, "unique_name": "rectangle-overlap", "user_status": null, "title": "Rectangle Overlap", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 42, "description": "Given two rectangles, find if the given two rectangles overlap or not.", "notice": "l1: Top Left coordinate of first rectangle.\r\nr1: Bottom Right coordinate of first rectangle.\r\nl2: Top Left coordinate of second rectangle.\r\nr2: Bottom Right coordinate of second rectangle.\r\n\r\nl1 != r2 and l2 != r2", "clarification": "", "example": "Given l1 = `[0, 8]`, r1 = `[8, 0]`, l2 = `[6, 6]`, r2 = `[10, 0]`, return `true`\r\n\r\nGiven l1 = `[0, 8]`, r1 = `[8, 0]`, l2 = `[9, 6]`, r2 = `[10, 0]`, return ``false`", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[0,8]\n[8,0]\n[6,6]\n[10,0]\n", "total_accepted": 2450, "total_submissions": 5785, "contest": "", "has_followed_by": false}, "longest-palindrome": {"id": 627, "unique_name": "longest-palindrome", "user_status": null, "title": "Longest Palindrome", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.\r\n\r\nThis is case sensitive, for example `\"Aa\"` is not considered a palindrome here.", "notice": "Assume the length of given string will not exceed `1010`.", "clarification": "", "example": "Given s = `\"abccccdd\"` return `7`\r\n\r\nOne longest palindrome that can be built is `\"dccaccd\"`, whose length is `7`.", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 916, "title": "Palindrome Permutation", "unique_name": "palindrome-permutation", "level": 1, "accepted_rate": 58}, {"id": 891, "title": "Valid Palindrome II", "unique_name": "valid-palindrome-ii", "level": 1, "accepted_rate": 44}, {"id": 745, "title": "Palindromic Ranges", "unique_name": "palindromic-ranges", "level": 1, "accepted_rate": 28}, {"id": 678, "title": "Shortest Palindrome", "unique_name": "shortest-palindrome", "level": 2, "accepted_rate": 24}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "\"abccccdd\"\n", "total_accepted": 7521, "total_submissions": 23385, "contest": "", "has_followed_by": false}, "maximum-subtree": {"id": 628, "title": "Maximum Subtree", "unique_name": "maximum-subtree", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 11, "title": "Amazon OA High Frequent 9 Problems", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Amazon-logo.jpg", "privacy": "Password required"}, {"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "minimum-spanning-tree": {"id": 629, "title": "Minimum Spanning Tree", "unique_name": "minimum-spanning-tree", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 9, "title": "Java & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/java-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 13, "title": "BAT\u9ad8\u9891\u9762\u8bd5\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/BAT.jpg", "privacy": "Password required"}, {"id": 11, "title": "Amazon OA High Frequent 9 Problems", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Amazon-logo.jpg", "privacy": "Password required"}, {"id": 30, "title": "Python & Basic Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/pythonsauqre.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "knight-shortest-path-ii": {"id": 630, "title": "Knight Shortest Path II", "unique_name": "knight-shortest-path-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}, {"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "maximal-square-ii": {"id": 631, "title": "Maximal Square II", "unique_name": "maximal-square-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "binary-tree-maximum-node": {"id": 632, "unique_name": "binary-tree-maximum-node", "user_status": null, "title": "Binary Tree Maximum Node", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 24, "description": "Find the maximum node in a binary tree, return the node.", "notice": "", "clarification": "", "example": "Given a binary tree:\r\n\r\n```\r\n     1\r\n   /   \\\r\n -5     2\r\n / \\   /  \\\r\n0   3 -4  -5 \r\n``` \r\n\r\nreturn the node with value `3`.", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}], "related_problems": [{"id": 628, "title": "Maximum Subtree", "unique_name": "maximum-subtree", "level": 1, "accepted_rate": 45}, {"id": 597, "title": "Subtree with Maximum Average", "unique_name": "subtree-with-maximum-average", "level": 1, "accepted_rate": 27}, {"id": 596, "title": "Minimum Subtree", "unique_name": "minimum-subtree", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "{1,-5,3,1,2,-4,-5}\n", "total_accepted": 8455, "total_submissions": 34845, "contest": "", "has_followed_by": false}, "find-the-duplicate-number": {"id": 633, "unique_name": "find-the-duplicate-number", "user_status": null, "title": "Find the Duplicate Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "Given an array `nums` containing `n + 1` integers where each integer is between `1` and `n` (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.", "notice": "1. You must not modify the array (assume the array is read only).\r\n2. You must use only constant, O(1) extra space.\r\n3. Your runtime complexity should be less than O(n^2).\r\n4. There is only one duplicate number in the array, but it could be repeated more than once.", "clarification": "", "example": "Given `nums` = `[5,5,4,3,2,1]` return `5`\r\nGiven `nums` = `[5,4,4,3,2,1]` return `4`", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1112, "title": "Set Mismatch", "unique_name": "set-mismatch", "level": 1, "accepted_rate": 49}, {"id": 570, "title": "Find the Missing Number II", "unique_name": "find-the-missing-number-ii", "level": 2, "accepted_rate": 25}, {"id": 196, "title": "Missing Number", "unique_name": "missing-number", "level": 2, "accepted_rate": 34}, {"id": 189, "title": "First Missing Positive ", "unique_name": "first-missing-positive", "level": 2, "accepted_rate": 23}, {"id": 103, "title": "Linked List Cycle II ", "unique_name": "linked-list-cycle-ii", "level": 3, "accepted_rate": 37}, {"id": 82, "title": "Single Number", "unique_name": "single-number", "level": 1, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "[1,1]\n", "total_accepted": 3526, "total_submissions": 10021, "contest": "", "has_followed_by": false}, "word-squares": {"id": 634, "unique_name": "word-squares", "user_status": null, "title": "Word Squares", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 31, "description": "Given a set of words **without duplicates**, find all [`word squares`](https://en.wikipedia.org/wiki/Word_square \"Word square\") you can build from them.\n\nA sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 \u00e2\u2030\u00a4 k < max(numRows, numColumns).\n\nFor example, the word sequence `[\"ball\",\"area\",\"lead\",\"lady\"]` forms a word square because each word reads the same both horizontally and vertically.\n```\nb a l l\na r e a\nl e a d\nl a d y\n```", "notice": "- There are at least 1 and at most 1000 words.\r\n- All words will have the exact same length.\r\n- Word length is at least 1 and at most 5.\r\n- Each word contains only lowercase English alphabet `a-z`.", "clarification": "", "example": "```\r\nGiven a set [\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\r\nreturn [[\"wall\",\"area\",\"lead\",\"lady\"],[\"ball\",\"area\",\"lead\",\"lady\"]]\r\nExplanation:\r\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\r\n\r\nGiven a set [\"abat\",\"baba\",\"atan\",\"atal\"]\r\nreturn [[\"baba\",\"abat\",\"baba\",\"atan\"],[\"baba\",\"abat\",\"baba\",\"atal\"]]\r\nExplanation:\r\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\r\n```", "challenge": "", "tags": [{"id": 34, "name": "Trie", "cn_name": "Trie", "type": 21, "unique_name": "trie", "alias": "Prefix Tree", "problem_count": 11}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 888, "title": "Valid Word Square", "unique_name": "valid-word-square", "level": 1, "accepted_rate": 64}, {"id": 635, "title": "Boggle Game", "unique_name": "boggle-game", "level": 3, "accepted_rate": 20}, {"id": 623, "title": "K Edit Distance", "unique_name": "k-edit-distance", "level": 3, "accepted_rate": 30}, {"id": 442, "title": "Implement Trie (Prefix Tree)", "unique_name": "implement-trie-prefix-tree", "level": 2, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n", "total_accepted": 2094, "total_submissions": 6566, "contest": "", "has_followed_by": false}, "boggle-game": {"id": 635, "title": "Boggle Game", "unique_name": "boggle-game", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 4, "title": "Advanced Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/gaosuan.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "132-pattern": {"id": 636, "unique_name": "132-pattern", "user_status": null, "title": "132 Pattern", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 21, "description": "Given a sequence of n integers a1, a2, ..., an, a `132` pattern is a subsequence ai, aj, ak such that `i` < `j` < `k` and `ai` < `ak` < `aj`. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.\r\n\r\n`n` will be less than `20,000`.", "notice": "", "clarification": "", "example": "Given nums = `[1, 2, 3, 4]`\r\nreturn `False` // There is no 132 pattern in the sequence.\r\n\r\nGiven nums = `[3, 1, 4, 2]`\r\nreturn `True` // There is a 132 pattern in the sequence: [1, 4, 2].", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 12, "title": "Min Stack", "unique_name": "min-stack", "level": 2, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "[1,2,3,4]\n", "total_accepted": 1361, "total_submissions": 6182, "contest": "", "has_followed_by": false}, "valid-word-abbreviation": {"id": 637, "unique_name": "valid-word-abbreviation", "user_status": null, "title": "Valid Word Abbreviation", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 26, "description": "Given a **non-empty** string `word` and an abbreviation `abbr`, return whether the string matches with the given abbreviation.\r\n\r\nA string such as `\"word\"` contains only the following valid abbreviations:\r\n```\r\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\r\n```", "notice": "Notice that only the above abbreviations are valid abbreviations of the string `word`. Any other string is not a valid abbreviation of `word`.", "clarification": "", "example": "Example 1:\r\n```\r\nGiven s = \"internationalization\", abbr = \"i12iz4n\":\r\nReturn true.\r\n```\r\nExample 2:\r\n```\r\nGiven s = \"apple\", abbr = \"a2e\":\r\nReturn false.\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 779, "title": "Generalized Abbreviation", "unique_name": "generalized-abbreviation", "level": 2, "accepted_rate": 38}, {"id": 639, "title": "Word Abbreviation", "unique_name": "word-abbreviation", "level": 3, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "\"internationalization\"\n\"i12iz4n\"\n", "total_accepted": 2396, "total_submissions": 8964, "contest": "", "has_followed_by": false}, "isomorphic-strings": {"id": 638, "unique_name": "isomorphic-strings", "user_status": null, "title": "Isomorphic Strings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 31, "description": "Given two strings **s** and **t**, determine if they are isomorphic.\r\n\r\nTwo strings are isomorphic if the characters in s can be replaced to get t.\r\n\r\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.", "notice": "You may assume both s and t have the `same length`.", "clarification": "", "example": "Given s = `\"egg\"`, t = `\"add\"`, return `true`.\r\n\r\nGiven s = `\"foo\"`, t = `\"bar\"`, return `false`.\r\n\r\nGiven s = `\"paper\"`, t = `\"title\"`, return `true`.", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 1038, "title": "Jewels and Stones", "unique_name": "jewels-and-stones", "level": 1, "accepted_rate": 86}, {"id": 171, "title": "Anagrams", "unique_name": "anagrams", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"egg\"\n\"add\"\n", "total_accepted": 4098, "total_submissions": 13216, "contest": "", "has_followed_by": false}, "word-abbreviation": {"id": 639, "unique_name": "word-abbreviation", "user_status": null, "title": "Word Abbreviation", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 33, "description": "Given an array of n distinct non-empty strings, you need to generate **minimal** possible abbreviations for every word following rules below.\r\n\r\n1. Begin with the first character and then the number of characters abbreviated, which followed by the last character.\r\n2. If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.\r\n3. If the abbreviation doesn't make the word shorter, then keep it as original.\r\n", "notice": "1. Both n and the length of each word will not exceed 400.\r\n2. The length of each word is greater than 1.\r\n3. The words consist of lowercase English letters only.\r\n4. The return answers should be in the same order as the original array.", "clarification": "", "example": "```\r\nGiven dict = [\"like\", \"god\", \"internal\", \"me\", \"internet\", \"interval\", \"intension\", \"face\", \"intrusion\"]\r\nreturn [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\r\n```", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 779, "title": "Generalized Abbreviation", "unique_name": "generalized-abbreviation", "level": 2, "accepted_rate": 38}, {"id": 637, "title": "Valid Word Abbreviation", "unique_name": "valid-word-abbreviation", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\n", "total_accepted": 1542, "total_submissions": 4640, "contest": "", "has_followed_by": false}, "one-edit-distance": {"id": 640, "unique_name": "one-edit-distance", "user_status": null, "title": "One Edit Distance", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Given two strings S and T, determine if they are both one edit distance apart.", "notice": "", "clarification": "", "example": "Given s = `\"aDb\"`, t = `\"adb\"`\r\nreturn `true`", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 119, "title": "Edit Distance", "unique_name": "edit-distance", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "\"aDb\"\n\"adb\"\n", "total_accepted": 3200, "total_submissions": 10556, "contest": "", "has_followed_by": false}, "missing-ranges": {"id": 641, "unique_name": "missing-ranges", "user_status": null, "title": "Missing Ranges", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 21, "description": "Given a sorted integer array where **the range of elements are in the inclusive range [lower, upper]**, return its missing ranges.", "notice": "", "clarification": "", "example": "Given nums = `[0, 1, 3, 50, 75]`, lower = `0` and upper = `99`\r\nreturn `[\"2\", \"4->49\", \"51->74\", \"76->99\"]`.", "challenge": "", "tags": [{"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1315, "title": "Summary Ranges", "unique_name": "summary-ranges", "level": 2, "accepted_rate": 62}], "comment_count": 0, "testcase_sample": "[0,1,3,50,75]\n0\n99\n", "total_accepted": 1855, "total_submissions": 8697, "contest": "", "has_followed_by": false}, "moving-average-from-data-stream": {"id": 642, "unique_name": "moving-average-from-data-stream", "user_status": null, "title": "Moving Average from Data Stream", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.", "notice": "", "clarification": "", "example": "```\r\nMovingAverage m = new MovingAverage(3);\r\nm.next(1) = 1 // return 1.00000\r\nm.next(10) = (1 + 10) / 2 // return 5.50000\r\nm.next(3) = (1 + 10 + 3) / 3 // return 4.66667\r\nm.next(5) = (10 + 3 + 5) / 3 // return 6.00000\r\n```", "challenge": "", "tags": [{"id": 97, "name": "Data Stream", "cn_name": "Data Stream", "type": 1, "unique_name": "data-stream", "alias": "", "problem_count": 9}, {"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 692, "title": "Sliding Window Unique Elements Sum", "unique_name": "sliding-window-unique-elements-sum", "level": 2, "accepted_rate": 14}, {"id": 685, "title": "First Unique Number In Stream", "unique_name": "first-unique-number-in-stream", "level": 2, "accepted_rate": 25}, {"id": 604, "title": "Window Sum", "unique_name": "window-sum", "level": 1, "accepted_rate": 34}, {"id": 546, "title": "Implement Queue by Interface", "unique_name": "implement-queue-by-interface", "level": 1, "accepted_rate": 30}, {"id": 492, "title": "Implement Queue by Linked List", "unique_name": "implement-queue-by-linked-list", "level": 1, "accepted_rate": 36}, {"id": 81, "title": "Find Median from Data Stream", "unique_name": "find-median-from-data-stream", "level": 3, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "MovingAverage(3)\nnext(1)\nnext(10)\nnext(3)\nnext(5)\n", "total_accepted": 3406, "total_submissions": 9384, "contest": "", "has_followed_by": false}, "longest-absolute-file-path": {"id": 643, "unique_name": "longest-absolute-file-path", "user_status": null, "title": "Longest Absolute File Path", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Suppose we abstract our file system by a string in the following manner:\r\n\r\nThe string `\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"` represents:\r\n```\r\ndir\r\n    subdir1\r\n    subdir2\r\n        file.ext\r\n```\r\nThe directory `dir` contains an empty sub-directory `subdir1` and a sub-directory `subdir2` containing a file file.ext.\r\n\r\nThe string\r\n```\r\n\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\r\n``` \r\nrepresents:\r\n```\r\ndir\r\n    subdir1\r\n        file1.ext\r\n        subsubdir1\r\n    subdir2\r\n        subsubdir2\r\n            file2.ext\r\n```\r\nThe directory `dir` contains two sub-directories `subdir1` and `subdir2`. `subdir1` contains a file file1.ext and an empty second-level sub-directory `subsubdir1`. `subdir2` contains a second-level sub-directory `subsubdir2` containing a file `file2.ext`.\r\n\r\nWe are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is `\"dir/subdir2/subsubdir2/file2.ext\"`, and its length is `32` (not including the double quotes).\r\n\r\nGiven a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return `0`.\r\n\r\n", "notice": "- The name of a file contains at least a `.` and an extension.\r\n- The name of a directory or sub-directory will not contain a `.`.\r\n- Time complexity required: `O(n)` where n is the size of the input string.\r\n- Notice that `a/aa/aaa/file1.txt` is not the longest file path, if there is another path `aaaaaaaaaaaaaaaaaaaaa/sth.png`.", "clarification": "", "example": "Give input = `\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"` return  `20`", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n", "total_accepted": 2622, "total_submissions": 8008, "contest": "", "has_followed_by": false}, "strobogrammatic-number": {"id": 644, "unique_name": "strobogrammatic-number", "user_status": null, "title": "Strobogrammatic Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 33, "description": "A mirror number is a number that looks the same when rotated 180 degrees (looked at upside down).\r\n\r\nWrite a function to determine if a number is mirror. The number is represented as a string.\r\n\r\n", "notice": "", "clarification": "", "example": "For example, the numbers \"69\", \"88\", and \"818\" are all mirror numbers.\r\nGiven num = `\"69\"` return `true`\r\nGiven num = `\"68\"` return `false`\r\n ", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 776, "title": "Strobogrammatic Number II", "unique_name": "strobogrammatic-number-ii", "level": 2, "accepted_rate": 30}, {"id": 742, "title": "Self Dividing Numbers", "unique_name": "self-dividing-numbers", "level": 2, "accepted_rate": 15}], "comment_count": 0, "testcase_sample": "\"69\"\n", "total_accepted": 1965, "total_submissions": 5887, "contest": "", "has_followed_by": false}, "find-the-celebrity": {"id": 645, "unique_name": "find-the-celebrity", "user_status": null, "title": "Find the Celebrity", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Suppose you are at a party with `n` people (labeled from `0` to `n - 1`) and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know him/her but he/she does not know any of them.\r\n\r\nNow you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: \"Hi, A. Do you know B?\" to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).\r\n\r\nYou are given a helper function `bool knows(a, b)` which tells you whether A knows B. Implement a function `int findCelebrity(n)`, your function should minimize the number of calls to `knows`.", "notice": "There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return `-1`.", "clarification": "", "example": "Given n = `2`\r\n```\r\n2 // next n * (n - 1) lines \r\n0 knows 1\r\n1 does not know 0\r\n```\r\nreturn `1` // 1 is celebrity", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "2\n0 knows 1\n1 does not know 0\n", "total_accepted": 1826, "total_submissions": 4564, "contest": "", "has_followed_by": false}, "first-position-unique-character": {"id": 646, "unique_name": "first-position-unique-character", "user_status": null, "title": "First Position Unique Character", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 33, "description": "Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return `-1`.", "notice": "", "clarification": "", "example": "Given s = `\"lintcode\"`, return `0`.\r\n\r\nGiven s = `\"lovelintcode\"`, return `2`.", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 960, "title": "First Unique Number in a Stream II", "unique_name": "first-unique-number-in-a-stream-ii", "level": 2, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "\"lintcode\"\n", "total_accepted": 3501, "total_submissions": 10538, "contest": "", "has_followed_by": false}, "find-all-anagrams-in-a-string": {"id": 647, "unique_name": "find-all-anagrams-in-a-string", "user_status": null, "title": "Find All Anagrams in a String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given a string `s` and a **non-empty** string `p`, find all the start indices of `p`'s anagrams in `s`.\r\n\r\nStrings consists of lowercase English letters only and the length of both strings **s** and **p** will not be larger than 40,000.\r\n\r\nThe order of output does not matter.", "notice": "", "clarification": "", "example": "Given s =  `\"cbaebabacd\"` p = `\"abc\"`\r\n\r\nreturn `[0, 6]`\r\n\r\n\r\n```\r\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\r\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 1169, "title": "Permutation in String", "unique_name": "permutation-in-string", "level": 2, "accepted_rate": 51}, {"id": 772, "title": "Group Anagrams", "unique_name": "group-anagrams", "level": 2, "accepted_rate": 41}, {"id": 171, "title": "Anagrams", "unique_name": "anagrams", "level": 2, "accepted_rate": 24}, {"id": 158, "title": "Valid Anagram", "unique_name": "valid-anagram", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "\"abab\"\n\"ab\"\n", "total_accepted": 3496, "total_submissions": 13485, "contest": "", "has_followed_by": false}, "unique-word-abbreviation": {"id": 648, "unique_name": "unique-word-abbreviation", "user_status": null, "title": "Unique Word Abbreviation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "An abbreviation of a word follows the form <first letter><number><last letter>. Below are some examples of word abbreviations:\r\n```\r\na) it                      --> it    (no abbreviation)\r\n\r\n     1\r\nb) d|o|g                   --> d1g\r\n\r\n              1    1  1\r\n     1---5----0----5--8\r\nc) i|nternationalizatio|n  --> i18n\r\n\r\n              1\r\n     1---5----0\r\nd) l|ocalizatio|n          --> l10n\r\n```\r\nAssume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word's abbreviation is unique if no other word from the dictionary has the same abbreviation.\r\n\r\n", "notice": "", "clarification": "", "example": "Given dictionary = `[ \"deer\", \"door\", \"cake\", \"card\" ]`\r\nisUnique(\"dear\") // return false\r\nisUnique(\"cart\") // return true\r\nisUnique(\"cane\") // return false\r\nisUnique(\"make\") // return true", "challenge": "", "tags": [{"id": 57, "name": "Data Structure Design", "cn_name": "Data Structure Design", "type": 2, "unique_name": "data-structure-design", "alias": "", "problem_count": 11}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 779, "title": "Generalized Abbreviation", "unique_name": "generalized-abbreviation", "level": 2, "accepted_rate": 38}, {"id": 607, "title": "Two Sum III - Data structure design", "unique_name": "two-sum-iii-data-structure-design", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[\"deer\",\"door\",\"cake\",\"card\"]\nisUnique(\"dear\")\nisUnique(\"cart\")\nisUnique(\"cane\")\nisUnique(\"make\")\n", "total_accepted": 1383, "total_submissions": 4825, "contest": "", "has_followed_by": false}, "binary-tree-upside-down": {"id": 649, "unique_name": "binary-tree-upside-down", "user_status": null, "title": "Binary Tree Upside Down", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.", "notice": "", "clarification": "", "example": "Given a binary tree `{1,2,3,4,5}`\r\n\r\n```\r\n    1\r\n   / \\\r\n  2   3\r\n / \\\r\n4   5\r\n```\r\nreturn the root of the binary tree `{4,5,2,#,#,3,1}`.\r\n\r\n```\r\n   4\r\n  / \\\r\n 5   2\r\n    / \\\r\n   3   1  \r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "{1,2,3,4,5}\n", "total_accepted": 1517, "total_submissions": 3571, "contest": "", "has_followed_by": false}, "find-leaves-of-binary-tree": {"id": 650, "unique_name": "find-leaves-of-binary-tree", "user_status": null, "title": "Find Leaves of Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.", "notice": "", "clarification": "", "example": "Given binary tree:\r\n\r\n```\r\n    1\r\n   / \\\r\n  2   3\r\n / \\     \r\n4   5    \r\n```\r\n\r\nReturns `[[4, 5, 3], [2], [1]]`.", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 155, "title": "Minimum Depth of Binary Tree", "unique_name": "minimum-depth-of-binary-tree", "level": 1, "accepted_rate": 31}, {"id": 97, "title": "Maximum Depth of Binary Tree", "unique_name": "maximum-depth-of-binary-tree", "level": 1, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "{1,2,3,4,5}\n", "total_accepted": 1695, "total_submissions": 3667, "contest": "", "has_followed_by": false}, "binary-tree-vertical-order-traversal": {"id": 651, "unique_name": "binary-tree-vertical-order-traversal", "user_status": null, "title": "Binary Tree Vertical Order Traversal", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).\r\n\r\nIf two nodes are in the same row and column, the order should be from **left to right**.", "notice": "", "clarification": "", "example": "Given binary tree `{3,9,20,#,#,15,7}`\r\n\r\n```\r\n   3\r\n  /\\\r\n /  \\\r\n 9  20\r\n    /\\\r\n   /  \\\r\n  15   7\r\n```\r\n\r\nReturn its vertical order traversal as:\r\n`[[9],[3,15],[20],[7]]`\r\n\r\nGiven binary tree `{3,9,8,4,0,1,7}`\r\n\r\n```\r\n     3\r\n    /\\\r\n   /  \\\r\n   9   8\r\n  /\\  /\\\r\n /  \\/  \\\r\n 4  01   7\r\n```\r\n\r\nReturn its vertical order traversal as:\r\n`[[4],[9],[3,0,1],[8],[7]]`", "challenge": "", "tags": [{"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 69, "title": "Binary Tree Level Order Traversal", "unique_name": "binary-tree-level-order-traversal", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "{3,9,20,#,#,15,7}\n", "total_accepted": 1566, "total_submissions": 4512, "contest": "", "has_followed_by": false}, "factorization": {"id": 652, "title": "Factorization", "unique_name": "factorization", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 44, "title": "Oracle", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/oracle.jpg", "privacy": "Password required"}, {"id": 20, "title": "Uber", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/uber-square.png", "privacy": "Password required"}, {"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 14, "title": "High Frequent", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/high-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "expression-add-operators": {"id": 653, "unique_name": "expression-add-operators", "user_status": null, "title": "Expression Add Operators", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "Given a string that contains only digits `0`-`9` and a target value, return all possibilities to add **binary** operators (not unary) `+`, `-`, or `*` between the digits so they evaluate to the target value.", "notice": "", "clarification": "", "example": "```\r\n\"123\", 6 -> [\"1+2+3\", \"1*2*3\"] \r\n\"232\", 8 -> [\"2*3+2\", \"2+3*2\"]\r\n\"105\", 5 -> [\"1*0+5\",\"10-5\"]\r\n\"00\", 0 -> [\"0+0\", \"0-0\", \"0*0\"]\r\n\"3456237490\", 9191 -> []\r\n```", "challenge": "", "tags": [{"id": 22, "name": "Divide and Conquer", "cn_name": "Divide and Conquer", "type": 13, "unique_name": "divide-and-conquer", "alias": "", "problem_count": 13}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1208, "title": "Target Sum", "unique_name": "target-sum", "level": 2, "accepted_rate": 54}, {"id": 153, "title": "Combination Sum II", "unique_name": "combination-sum-ii", "level": 2, "accepted_rate": 31}, {"id": 152, "title": "Combinations ", "unique_name": "combinations", "level": 2, "accepted_rate": 34}, {"id": 135, "title": "Combination Sum ", "unique_name": "combination-sum", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "\"123\"\n6\n", "total_accepted": 1883, "total_submissions": 6432, "contest": "", "has_followed_by": false}, "sparse-matrix-multiplication": {"id": 654, "unique_name": "sparse-matrix-multiplication", "user_status": null, "title": "Sparse Matrix Multiplication", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Given two [Sparse Matrix](https://en.wikipedia.org/wiki/Sparse_matrix \"Sparse Matrix\") A and B, return the result of AB.\r\n\r\nYou may assume that A's column number is equal to B's row number.", "notice": "", "clarification": "", "example": "```\r\nA = [\r\n  [ 1, 0, 0],\r\n  [-1, 0, 3]\r\n]\r\n\r\nB = [\r\n  [ 7, 0, 0 ],\r\n  [ 0, 0, 0 ],\r\n  [ 0, 0, 1 ]\r\n]\r\n\r\n\r\n     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |\r\nAB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |\r\n                  | 0 0 1 |\r\n```", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,0,0],[-1,0,3]]\n[[7,0,0],[0,0,0],[0,0,1]]\n", "total_accepted": 2262, "total_submissions": 3921, "contest": "", "has_followed_by": false}, "add-strings": {"id": 655, "unique_name": "add-strings", "user_status": null, "title": "Add Strings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Given two non-negative integers `num1` and `num2` represented as string, return the sum of `num1` and `num2`.", "notice": "- The length of both num1 and num2 is < 5100.\r\n- Both num1 and num2 contains only digits 0-9.\r\n- Both num1 and num2 does not contain any leading zero.\r\n- You must not use any built-in BigInteger library or convert the inputs to integer directly.", "clarification": "", "example": "Given num1 = `\"123\"`, num2 = `\"45\"`\r\nreturn `\"168\"`", "challenge": "", "tags": [{"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 763, "title": "Hex Conversion", "unique_name": "hex-conversion", "level": 0, "accepted_rate": 27}, {"id": 690, "title": "Factorial", "unique_name": "factorial", "level": 3, "accepted_rate": 19}, {"id": 221, "title": "Add Two Numbers II", "unique_name": "add-two-numbers-ii", "level": 2, "accepted_rate": 25}, {"id": 656, "title": "Multiply Strings", "unique_name": "multiply-strings", "level": 2, "accepted_rate": 29}, {"id": 167, "title": "Add Two Numbers", "unique_name": "add-two-numbers", "level": 1, "accepted_rate": 22}], "comment_count": 0, "testcase_sample": "\"123\"\n\"45\"\n", "total_accepted": 4591, "total_submissions": 15518, "contest": "", "has_followed_by": false}, "multiply-strings": {"id": 656, "unique_name": "multiply-strings", "user_status": null, "title": "Multiply Strings", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`", "notice": "", "clarification": "", "example": "- The length of both num1 and num2 is < 110.\r\n- Both num1 and num2 contains only digits 0-9.\r\n- Both num1 and num2 does not contain any leading zero.\r\n- You must not use any built-in BigInteger library or convert the  inputs to integer directly.", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 690, "title": "Factorial", "unique_name": "factorial", "level": 3, "accepted_rate": 19}, {"id": 221, "title": "Add Two Numbers II", "unique_name": "add-two-numbers-ii", "level": 2, "accepted_rate": 25}, {"id": 655, "title": "Add Strings", "unique_name": "add-strings", "level": 1, "accepted_rate": 29}, {"id": 167, "title": "Add Two Numbers", "unique_name": "add-two-numbers", "level": 1, "accepted_rate": 22}], "comment_count": 0, "testcase_sample": "\"123\"\n\"45\"\n", "total_accepted": 2444, "total_submissions": 8374, "contest": "", "has_followed_by": false}, "insert-delete-getrandom-o1": {"id": 657, "unique_name": "insert-delete-getrandom-o1", "user_status": null, "title": "Insert Delete GetRandom O(1)", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Design a data structure that supports all following operations in average `O(1)` time.\r\n\r\n- `insert(val)`: Inserts an item val to the set if not already present.\r\n- `remove(val)`: Removes an item val from the set if present.\r\n- `getRandom`: Returns a random element from current set of elements. Each element must have the same probability of being returned.", "notice": "", "clarification": "", "example": "```\r\n// Init an empty set.\r\nRandomizedSet randomSet = new RandomizedSet();\r\n\r\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\r\nrandomSet.insert(1);\r\n\r\n// Returns false as 2 does not exist in the set.\r\nrandomSet.remove(2);\r\n\r\n// Inserts 2 to the set, returns true. Set now contains [1,2].\r\nrandomSet.insert(2);\r\n\r\n// getRandom should return either 1 or 2 randomly.\r\nrandomSet.getRandom();\r\n\r\n// Removes 1 from the set, returns true. Set now contains [2].\r\nrandomSet.remove(1);\r\n\r\n// 2 was already in the set, so return false.\r\nrandomSet.insert(2);\r\n\r\n// Since 2 is the only number in the set, getRandom always return 2.\r\nrandomSet.getRandom();\r\n```", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 57, "name": "Data Structure Design", "cn_name": "Data Structure Design", "type": 2, "unique_name": "data-structure-design", "alias": "", "problem_count": 11}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}, {"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}], "related_problems": [{"id": 954, "title": "Insert Delete GetRandom O(1) - Duplicates allowed", "unique_name": "insert-delete-getrandom-o1-duplicates-allowed", "level": 3, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "insert(1)\nremove(2)\ninsert(2)\ngetRandom()\nremove(1)\ninsert(2)\ngetRandom()\n", "total_accepted": 2503, "total_submissions": 6358, "contest": "", "has_followed_by": false}, "swap-without-extra-variable-only-c": {"id": 658, "title": "Swap Without Extra Variable (Only C++)", "unique_name": "swap-without-extra-variable-only-c", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 13, "title": "BAT\u9ad8\u9891\u9762\u8bd5\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/BAT.jpg", "privacy": "Password required"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "encode-and-decode-strings": {"id": 659, "unique_name": "encode-and-decode-strings", "user_status": null, "title": "Encode and Decode Strings", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\r\n\r\nPlease implement `encode` and `decode`", "notice": "", "clarification": "", "example": "Given strs = `[\"lint\",\"code\",\"love\",\"you\"]`\r\nstring encoded_string = encode(strs)\r\n\r\nreturn `[\"lint\",\"code\",\"love\",\"you\"]` when you call decode(encoded_string)", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 527, "title": "Trie Serialization", "unique_name": "trie-serialization", "level": 3, "accepted_rate": 41}, {"id": 7, "title": "Serialize and Deserialize Binary Tree", "unique_name": "serialize-and-deserialize-binary-tree", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[\"lint\",\"code\",\"love\",\"you\"]\n", "total_accepted": 1728, "total_submissions": 3980, "contest": "", "has_followed_by": false}, "read-n-characters-given-read4-ii-call-multiple-times": {"id": 660, "unique_name": "read-n-characters-given-read4-ii-call-multiple-times", "user_status": null, "title": "Read N Characters Given Read4 II - Call multiple times", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 46, "description": "The API: `int read4(char *buf)` reads `4` characters at a time from a file.\r\n\r\nThe return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.\r\n\r\nBy using the read4 API, implement the function `int read(char *buf, int n)` that reads n characters from the file.", "notice": "The `read` function may be called multiple times.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 566, "title": "GFS Client", "unique_name": "gfs-client", "level": 2, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "\"filetestbuffer\"\nread(6)\nread(5)\nread(4)\nread(3)\nread(2)\nread(1)\nread(10)\n", "total_accepted": 1971, "total_submissions": 4264, "contest": "", "has_followed_by": false}, "convert-bst-to-greater-tree": {"id": 661, "unique_name": "convert-bst-to-greater-tree", "user_status": null, "title": "Convert BST to Greater Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 34, "description": "Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.", "notice": "", "clarification": "", "example": "Given a binary search Tree `{5,2,13}\u00ef\u00bd\u20ac:\r\n```\r\n              5\r\n            /   \\\r\n           2     13\r\n```\r\nReturn the root of new tree \r\n```\r\n             18\r\n            /   \\\r\n          20     13\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "{5,2,13}\n", "total_accepted": 3652, "total_submissions": 10591, "contest": "", "has_followed_by": false}, "guess-number-higher-or-lower": {"id": 662, "unique_name": "guess-number-higher-or-lower", "user_status": null, "title": "Guess Number Higher or Lower", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 27, "description": "We are playing the Guess Game. The game is as follows:\r\n\r\nI pick a number from **1** to **n**. You have to guess which number I picked.\r\n\r\nEvery time you guess wrong, I'll tell you whether the number is higher or lower.\r\n\r\nYou call a pre-defined API `guess(int num)` which returns 3 possible results (-1, 1, or 0):", "notice": "", "clarification": "", "example": "n = 10, I pick 4 (but you don't know)\r\n\r\nReturn 4. Correct !", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 666, "title": "Guess Number Higher or Lower II", "unique_name": "guess-number-higher-or-lower-ii", "level": 2, "accepted_rate": 25}, {"id": 74, "title": "First Bad Version", "unique_name": "first-bad-version", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "10\n4\n", "total_accepted": 3715, "total_submissions": 13506, "contest": "", "has_followed_by": false}, "walls-and-gates": {"id": 663, "unique_name": "walls-and-gates", "user_status": null, "title": "Walls and Gates", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "You are given a m x n 2D grid initialized with these three possible values.\r\n\r\n`-1`  - A wall or an obstacle.\r\n`0`   - A gate.\r\n`INF` - Infinity means an empty room. We use the value `2^31 - 1 = 2147483647` to represent INF as you may assume that the distance to a gate is less than `2147483647`.\r\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with `INF`.", "notice": "", "clarification": "", "example": "Given the 2D grid:\r\n```\r\nINF  -1  0  INF\r\nINF INF INF  -1\r\nINF  -1 INF  -1\r\n  0  -1 INF INF\r\n```\r\n\r\nreturn the result:\r\n```\r\n  3  -1   0   1\r\n  2   2   1  -1\r\n  1  -1   2  -1\r\n  0  -1   3   4\r\n```", "challenge": "", "tags": [{"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 803, "title": "Shortest Distance from All Buildings", "unique_name": "shortest-distance-from-all-buildings", "level": 3, "accepted_rate": 46}, {"id": 797, "title": "Reach a Number", "unique_name": "reach-a-number", "level": 1, "accepted_rate": 30}, {"id": 574, "title": "Build Post Office", "unique_name": "build-post-office", "level": 3, "accepted_rate": 19}, {"id": 573, "title": "Build Post Office II", "unique_name": "build-post-office-ii", "level": 3, "accepted_rate": 28}, {"id": 477, "title": "Surrounded Regions", "unique_name": "surrounded-regions", "level": 2, "accepted_rate": 24}, {"id": 433, "title": "Number of Islands", "unique_name": "number-of-islands", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]\n", "total_accepted": 1748, "total_submissions": 4747, "contest": "", "has_followed_by": false}, "counting-bits": {"id": 664, "unique_name": "counting-bits", "user_status": null, "title": "Counting Bits", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "Given a **non negative** integer number num. For every numbers i in the range `0 \u2264 i \u2264 num` calculate the number of 1's in their binary representation and return them as an array.", "notice": "", "clarification": "", "example": "Given num = `5` you should return `[0,1,1,2,1,2]`.", "challenge": "1. It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?\r\n2. Space complexity should be O(n).\r\n3. Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 987, "title": "Binary Number with Alternating Bits", "unique_name": "binary-number-with-alternating-bits", "level": 1, "accepted_rate": 75}, {"id": 723, "title": "Rotate Bits - Left", "unique_name": "rotate-bits-left", "level": 2, "accepted_rate": 60}, {"id": 721, "title": "Next Sparse Number", "unique_name": "next-sparse-number", "level": 3, "accepted_rate": 31}, {"id": 365, "title": "Count 1 in Binary", "unique_name": "count-1-in-binary", "level": 1, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "0\n", "total_accepted": 841, "total_submissions": 1635, "contest": "", "has_followed_by": false}, "range-sum-query-2d-immutable": {"id": 665, "unique_name": "range-sum-query-2d-immutable", "user_status": null, "title": "Range Sum Query 2D - Immutable", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.", "notice": "1. You may assume that the matrix does not change.\r\n2. There are many calls to sumRegion function.\r\n3. You may assume that row1 \u2264 row2 and col1 \u2264 col2.", "clarification": "", "example": "Given matrix = \r\n```\r\n[\r\n  [3, 0, 1, 4, 2],\r\n  [5, 6, 3, 2, 1],\r\n  [1, 2, 0, 1, 5],\r\n  [4, 1, 0, 1, 7],\r\n  [1, 0, 3, 0, 5]\r\n]\r\n```\r\nsumRegion(2, 1, 4, 3) -> `8`\r\nsumRegion(1, 1, 2, 2) -> `11`\r\nsumRegion(1, 2, 2, 4) -> `12`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 943, "title": "Range Sum Query - Immutable", "unique_name": "range-sum-query-immutable", "level": 1, "accepted_rate": 51}, {"id": 61, "title": "Search for a Range", "unique_name": "search-for-a-range", "level": 2, "accepted_rate": 25}, {"id": 11, "title": "Search Range in Binary Search Tree", "unique_name": "search-range-in-binary-search-tree", "level": 2, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]\nsumRegion(2, 1, 4, 3)\nsumRegion(1, 1, 2, 2)\nsumRegion(1, 2, 2, 4)\n", "total_accepted": 820, "total_submissions": 2782, "contest": "", "has_followed_by": false}, "guess-number-higher-or-lower-ii": {"id": 666, "unique_name": "guess-number-higher-or-lower-ii", "user_status": null, "title": "Guess Number Higher or Lower II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "We are playing the Guess Game. The game is as follows:\r\nI pick a number from 1 to n. You have to guess which number I picked.\r\nEvery time you guess wrong, I'll tell you whether the number I picked is higher or lower.\r\nHowever, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.", "notice": "", "clarification": "", "example": "Given n = `10`, I pick `8`.\r\nFirst round:  You guess `5`, I tell you that it's higher. You pay `$5`.\r\nSecond round: You guess `7`, I tell you that it's higher. You pay `$7`.\r\nThird round:  You guess `9`, I tell you that it's lower. You pay `$9`.\r\n\r\nGame over. 8 is the number I picked.\r\nYou end up paying `$5 + $7 + $9 = $21`.\r\n\r\nGiven a particular n \u2265 1, find out how much money you need to have to guarantee a win.\r\nSo when n = \uff4010`, return `16`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 913, "title": "Flip Game II", "unique_name": "flip-game-ii", "level": 2, "accepted_rate": 46}, {"id": 662, "title": "Guess Number Higher or Lower", "unique_name": "guess-number-higher-or-lower", "level": 1, "accepted_rate": 27}, {"id": 181, "title": "Flip Bits", "unique_name": "flip-bits", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "10\n", "total_accepted": 713, "total_submissions": 2825, "contest": "", "has_followed_by": false}, "longest-palindromic-subsequence": {"id": 667, "unique_name": "longest-palindromic-subsequence", "user_status": null, "title": " Longest Palindromic Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is `1000`.", "notice": "", "clarification": "", "example": "Given s = `\"bbbab\"` return `4`\r\nOne possible longest palindromic subsequence is `\"bbbb\"`.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 775, "title": "Palindrome Pairs", "unique_name": "palindrome-pairs", "level": 3, "accepted_rate": 23}, {"id": 738, "title": "Count Different Palindromic Subsequences", "unique_name": "count-different-palindromic-subsequences", "level": 3, "accepted_rate": 29}, {"id": 678, "title": "Shortest Palindrome", "unique_name": "shortest-palindrome", "level": 2, "accepted_rate": 24}, {"id": 200, "title": "Longest Palindromic Substring", "unique_name": "longest-palindromic-substring", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "\"bbbab\"\n", "total_accepted": 1558, "total_submissions": 3718, "contest": "", "has_followed_by": false}, "ones-and-zeroes": {"id": 668, "unique_name": "ones-and-zeroes", "user_status": null, "title": "Ones and Zeroes", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\r\n\r\nFor now, suppose you are a dominator of m `0s` and n `1s` respectively. On the other hand, there is an array with strings consisting of only `0s` and `1s`.\r\n\r\nNow your task is to find the maximum number of strings that you can form with given m `0s` and n `1s`. Each `0` and `1` can be used at most once.", "notice": "1. The given numbers of `0s` and `1s` will both not exceed `100`\r\n2. The size of given string array won't exceed `600`.", "clarification": "", "example": "Given strs = `[\"10\", \"0001\", \"111001\", \"1\", \"0\"]`, m = `5`, n = `3`\r\nreturn `4`\r\n\r\nExplanation: This are totally `4` strings can be formed by the using of 5 `0s` and 3 `1s`, which are `10`,`0001`,`1`,`0`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1142, "title": "Non-negative Integers without Consecutive Ones", "unique_name": "non-negative-integers-without-consecutive-ones", "level": 3, "accepted_rate": 70}], "comment_count": 0, "testcase_sample": "[\"10\",\"0001\",\"111001\",\"1\",\"0\"]\n5\n3\n", "total_accepted": 577, "total_submissions": 1355, "contest": "", "has_followed_by": false}, "coin-change": {"id": 669, "unique_name": "coin-change", "user_status": null, "title": "Coin Change", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`.", "notice": "You may assume that you have an infinite number of each kind of coin.", "clarification": "", "example": "Given coins = `[1, 2, 5]`, amount = `11`\r\nreturn `3` (11 = 5 + 5 + 1)\r\n\r\nGiven coins = `[2]`, amount = `3`\r\nreturn `-1`.", "challenge": "", "tags": [{"id": 45, "name": "Backpack", "cn_name": "Backpack", "type": 11, "unique_name": "backpack", "alias": "", "problem_count": 14}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 749, "title": "John's backyard garden", "unique_name": "johns-backyard-garden", "level": 1, "accepted_rate": 42}, {"id": 564, "title": "Combination Sum IV ", "unique_name": "combination-sum-iv", "level": 2, "accepted_rate": 33}, {"id": 563, "title": "Backpack V", "unique_name": "backpack-v", "level": 2, "accepted_rate": 47}, {"id": 562, "title": "Backpack IV", "unique_name": "backpack-iv", "level": 2, "accepted_rate": 43}, {"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "level": 3, "accepted_rate": 57}, {"id": 125, "title": "Backpack II", "unique_name": "backpack-ii", "level": 2, "accepted_rate": 41}, {"id": 92, "title": "Backpack", "unique_name": "backpack", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,2,5]\n11\n", "total_accepted": 1380, "total_submissions": 4412, "contest": "", "has_followed_by": false}, "predict-the-winner": {"id": 670, "unique_name": "predict-the-winner", "user_status": null, "title": "Predict the Winner", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.\r\n\r\nGiven an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.", "notice": "1. 1 <= length of the array <= `20`.\r\n2. Any scores in the given array are non-negative integers and will not exceed `10,000,000`.\r\n3. If the scores of both players are equal, then player 1 is still the winner.", "clarification": "", "example": "Given nums = `[1, 5, 2]` return `false` \r\n(Initially, player 1 can choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. Hence, player 1 will never be the winner and you need to return False.)\r\n\r\nGiven nums = `[1, 5, 233, 7]` return `true`\r\n(Explanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233. Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.)", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,20,4]\n", "total_accepted": 146, "total_submissions": 428, "contest": "", "has_followed_by": false}, "rotate-words": {"id": 671, "unique_name": "rotate-words", "user_status": null, "title": "Rotate Words", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 16, "description": "The words are same rotate words if rotate the word to the right by loop, and get another. Count how many different rotate word sets in dictionary.\r\n\r\nE.g. picture and turepic are same rotate words.", "notice": "All words are lowercase.", "clarification": "", "example": "Given dict = `[\"picture\", \"turepic\", \"icturep\", \"word\", \"ordw\", \"lint\"]`\r\nreturn `3`.\r\n\r\n`\"picture\", \"turepic\", \"icturep\"` are same ratote words.\r\n`\"word\", \"ordw\"` are same too.\r\n`\"lint\"` is the third word that different from the previous two words.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 170, "title": "Rotate List", "unique_name": "rotate-list", "level": 2, "accepted_rate": 25}, {"id": 8, "title": "Rotate String", "unique_name": "rotate-string", "level": 1, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "[\"picture\", \"turepic\", \"icturep\", \"word\", \"ordw\", \"lint\"]", "total_accepted": 1051, "total_submissions": 6219, "contest": "", "has_followed_by": false}, "decode-ways-ii": {"id": 676, "unique_name": "decode-ways-ii", "user_status": null, "title": "Decode Ways II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 31, "description": "A message containing letters from A-Z is being encoded to numbers using the following mapping way:\r\n```\r\n'A' -> 1\r\n'B' -> 2\r\n...\r\n'Z' -> 26\r\n```\r\nBeyond that, now the encoded string can also contain the character `*`, which can be treated as one of the numbers from 1 to 9.\r\nGiven the encoded message containing digits and the character `*`, return the total number of ways to decode it.\r\nAlso, since the answer may be very large, you should return the output mod 10^9 + 7.", "notice": "1. The length of the input string will fit in range [1, 10^5].\r\n2. The input string will only contain the character `*` and digits `0` - `9`.", "clarification": "", "example": "Given s = `\"*\"`\r\nreturn `9` // The encoded message can be decoded to the string: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\r\n\r\nGiven s = `\"1*\"`\r\nreturn `18`", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 512, "title": "Decode Ways", "unique_name": "decode-ways", "level": 2, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "\"1*\"", "total_accepted": 366, "total_submissions": 1146, "contest": "", "has_followed_by": false}, "number-of-big-islands": {"id": 677, "unique_name": "number-of-big-islands", "user_status": null, "title": "Number of Big Islands", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 23, "description": "Given a boolean 2D matrix, `0` is represented as the sea, `1` is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider `up/down/left/right` adjacent.\r\n\r\nFind the number of islands that size bigger or equal than `K`.", "notice": "", "clarification": "", "example": "Given graph:\r\n```\r\n[\r\n  [1, 1, 0, 0, 0],\r\n  [0, 1, 0, 0, 1],\r\n  [0, 0, 0, 1, 1],\r\n  [0, 0, 0, 0, 0],\r\n  [0, 0, 0, 0, 1]\r\n]\r\n```\r\nGiven the `K = 2`\r\n\r\nreturn `2`", "challenge": "", "tags": [], "related_problems": [{"id": 804, "title": "Number of Distinct Islands II", "unique_name": "number-of-distinct-islands-ii", "level": 3, "accepted_rate": 35}, {"id": 434, "title": "Number of Islands II", "unique_name": "number-of-islands-ii", "level": 3, "accepted_rate": 19}, {"id": 433, "title": "Number of Islands", "unique_name": "number-of-islands", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[1,1,0,0,0],[0,1,0,0,1],[0,0,0,1,1],[0,0,0,0,0],[0,0,0,0,1]]\n2", "total_accepted": 479, "total_submissions": 2013, "contest": "", "has_followed_by": false}, "shortest-palindrome": {"id": 678, "unique_name": "shortest-palindrome", "user_status": null, "title": "Shortest Palindrome", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a string `S`, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.", "notice": "", "clarification": "", "example": "Given `\"aacecaaa\"`, return `\"aaacecaaa\"`.\r\n\r\nGiven `\"abcd\"`, return `\"dcbabcd\"`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 891, "title": "Valid Palindrome II", "unique_name": "valid-palindrome-ii", "level": 1, "accepted_rate": 44}, {"id": 744, "title": "Sum of first K even-length Palindrome numbers", "unique_name": "sum-of-first-k-even-length-palindrome-numbers", "level": 2, "accepted_rate": 49}, {"id": 667, "title": " Longest Palindromic Subsequence", "unique_name": "longest-palindromic-subsequence", "level": 2, "accepted_rate": 41}, {"id": 627, "title": "Longest Palindrome", "unique_name": "longest-palindrome", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "\"sdsdlkjsaoio\"", "total_accepted": 540, "total_submissions": 2170, "contest": "", "has_followed_by": false}, "unique-paths-iii": {"id": 679, "unique_name": "unique-paths-iii", "user_status": null, "title": "Unique Paths III", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 24, "description": "Follow up for \"Unique Paths II\": [http://lintcode.com/en/problem/unique-paths-ii/](http://lintcode.com/en/problem/unique-paths-ii/ \"http://lintcode.com/en/problem/unique-paths-ii/\")\r\n\r\nNow each grid contains a value, so each path also has a value. Find the `sum` of all the `unique values` paths.", "notice": "", "clarification": "", "example": "For example,\r\n```\r\n[\r\n  [1,1,2],\r\n  [1,2,3],\r\n  [3,2,4]\r\n]\r\n```\r\n\r\nThere are 2 unique value path:\r\n`[1,1,2,3,4] =  11`\r\n`[1,1,2,2,4] =  10`\r\n\r\nreturn `21`\r\n", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 795, "title": "4-Way Unique Paths", "unique_name": "4-way-unique-paths", "level": 3, "accepted_rate": 70}, {"id": 115, "title": "Unique Paths II", "unique_name": "unique-paths-ii", "level": 1, "accepted_rate": 29}, {"id": 114, "title": "Unique Paths", "unique_name": "unique-paths", "level": 1, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "[[1,1,2],[1,2,3],[3,2,4]]", "total_accepted": 305, "total_submissions": 1242, "contest": "", "has_followed_by": false}, "split-string": {"id": 680, "unique_name": "split-string", "user_status": null, "title": "Split String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Give a string, you can choose to split the string after one character or two adjacent characters, and make the string to be composed of only one character or two characters. Output all possible results.", "notice": "", "clarification": "", "example": "Given the string `\"123\"`\r\nreturn `[[\"1\",\"2\",\"3\"],[\"12\",\"3\"],[\"1\",\"23\"]]`", "challenge": "", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 702, "title": "Concatenated String with Uncommon Characters of Two Strings", "unique_name": "concatenated-string-with-uncommon-characters-of-two-strings", "level": 1, "accepted_rate": 30}, {"id": 582, "title": "Word Break II", "unique_name": "word-break-ii", "level": 3, "accepted_rate": 22}, {"id": 107, "title": "Word Break", "unique_name": "word-break", "level": 2, "accepted_rate": 14}, {"id": 18, "title": "Subsets II", "unique_name": "subsets-ii", "level": 2, "accepted_rate": 27}, {"id": 17, "title": "Subsets", "unique_name": "subsets", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "\"\"", "total_accepted": 2684, "total_submissions": 9160, "contest": "", "has_followed_by": false}, "first-missing-prime-number": {"id": 681, "unique_name": "first-missing-prime-number", "user_status": null, "title": "First Missing Prime Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Given a list of integers and find the smallest `prime number` that doesn't appear in this list. ", "notice": "", "clarification": "", "example": "Given a list `[2,3,5,7,11,13,17,23,29]`\r\nreturn `19`", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}], "related_problems": [{"id": 699, "title": "Check Sum of K Primes", "unique_name": "check-sum-of-k-primes", "level": 3, "accepted_rate": 18}, {"id": 570, "title": "Find the Missing Number II", "unique_name": "find-the-missing-number-ii", "level": 2, "accepted_rate": 25}, {"id": 196, "title": "Missing Number", "unique_name": "missing-number", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[3,5,7]", "total_accepted": 430, "total_submissions": 1540, "contest": "", "has_followed_by": false}, "word-break-iii": {"id": 683, "unique_name": "word-break-iii", "user_status": null, "title": "Word Break III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Give a dictionary of words and a sentence with all whitespace removed, return the number of sentences you can form by inserting whitespaces to the sentence so that each word can be found in the dictionary.", "notice": "Ignore case", "clarification": "", "example": "Given a String `CatMat`\r\nGiven a dictionary `[\"Cat\", \"Mat\", \"Ca\", \"tM\", \"at\", \"C\", \"Dog\", \"og\", \"Do\"]`\r\nreturn `3`\r\n\r\nwe can form 3 sentences, as follows:\r\n`CatMat = Cat Mat`\r\n`CatMat = Ca tM at`\r\n`CatMat = C at Mat`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"Catmat\"\n[\"Cat\",\"mat\",\"Ca\",\"tm\",\"at\",\"C\",\"Dog\",\"og\",\"Do\"]", "total_accepted": 864, "total_submissions": 2840, "contest": "", "has_followed_by": false}, "missing-string": {"id": 684, "unique_name": "missing-string", "user_status": null, "title": "Missing String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 25, "description": "Given two strings, you have to find the missing string.\r\n", "notice": "", "clarification": "", "example": "Given a string str1 = `This is an example`\r\nGiven another string str2 = `is example`\r\n\r\nReturn `[\"This\", \"an\"]`", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"This is an example\"\n\"is example\"", "total_accepted": 1025, "total_submissions": 3946, "contest": "", "has_followed_by": false}, "first-unique-number-in-stream": {"id": 685, "unique_name": "first-unique-number-in-stream", "user_status": null, "title": "First Unique Number In Stream", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a continuous stream of numbers, write a function that returns the first unique number whenever terminating number is reached(include terminating number). If there no unique number before terminating number or you can't find this terminating number, return `-1`.", "notice": "", "clarification": "", "example": "Given a stream `[1, 2, 2, 1, 3, 4, 4, 5, 6]` and a number `5`\r\nreturn `3`\r\n\r\nGiven a stream `[1, 2, 2, 1, 3, 4, 4, 5, 6]` and a number `7`\r\nreturn `-1`", "challenge": "", "tags": [{"id": 97, "name": "Data Stream", "cn_name": "Data Stream", "type": 1, "unique_name": "data-stream", "alias": "", "problem_count": 9}, {"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 960, "title": "First Unique Number in a Stream II", "unique_name": "first-unique-number-in-a-stream-ii", "level": 2, "accepted_rate": 41}, {"id": 642, "title": "Moving Average from Data Stream", "unique_name": "moving-average-from-data-stream", "level": 1, "accepted_rate": 36}, {"id": 81, "title": "Find Median from Data Stream", "unique_name": "find-median-from-data-stream", "level": 3, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[1,2,2,1,3,4,4,5,6]\n5", "total_accepted": 1044, "total_submissions": 4067, "contest": "", "has_followed_by": false}, "the-number-in-words": {"id": 688, "unique_name": "the-number-in-words", "user_status": null, "title": "The Number In Words", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 22, "description": "Given a non-negative integer `n`, print the number in words.", "notice": "n <= 2147483647", "clarification": "", "example": "Given n = `125`\r\n\r\nReturn `one hundred twenty five`\r\n", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}], "related_problems": [{"id": 419, "title": "Roman to Integer ", "unique_name": "roman-to-integer", "level": 2, "accepted_rate": 44}, {"id": 418, "title": "Integer to Roman", "unique_name": "integer-to-roman", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "10245", "total_accepted": 266, "total_submissions": 1160, "contest": "", "has_followed_by": false}, "two-sum-iv-input-is-a-bst": {"id": 689, "unique_name": "two-sum-iv-input-is-a-bst", "user_status": null, "title": "Two Sum IV - Input is a BST", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given a binary search tree and a number `n`, find two numbers in the tree that sums up to `n`. ", "notice": "Without any extra space.", "clarification": "", "example": "Given a binary search tree:\r\n```\r\n    4\r\n   / \\\r\n  2   5\r\n / \\\r\n1   3\r\n```\r\nand a number `n = 3`\r\nreturn `[1, 2] or [2, 1]`", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 171, "name": "Samsung", "cn_name": "Samsung", "type": 3, "unique_name": "samsung", "alias": "", "problem_count": 0}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 608, "title": "Two Sum II - Input array is sorted ", "unique_name": "two-sum-ii-input-array-is-sorted", "level": 2, "accepted_rate": 49}, {"id": 610, "title": "Two Sum - Difference equals to target ", "unique_name": "two-sum-difference-equals-to-target", "level": 2, "accepted_rate": 26}, {"id": 609, "title": "Two Sum - Less than or equal to target", "unique_name": "two-sum-less-than-or-equal-to-target", "level": 2, "accepted_rate": 41}, {"id": 56, "title": "Two Sum", "unique_name": "two-sum", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "{}\n3", "total_accepted": 996, "total_submissions": 3110, "contest": "", "has_followed_by": false}, "factorial": {"id": 690, "unique_name": "factorial", "user_status": null, "title": "Factorial", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 19, "description": "Given a number n, return the factorial of the number as a string. ", "notice": "", "clarification": "", "example": "Given a number `n = 20`\r\nreturn `2432902008176640000`", "challenge": "", "tags": [], "related_problems": [{"id": 771, "title": "Double Factorial", "unique_name": "double-factorial", "level": 1, "accepted_rate": 72}, {"id": 729, "title": "Last Digit By Factorial Divide", "unique_name": "last-digit-by-factorial-divide", "level": 2, "accepted_rate": 35}, {"id": 728, "title": "Three Distinct Factors", "unique_name": "three-distinct-factors", "level": 2, "accepted_rate": 24}, {"id": 655, "title": "Add Strings", "unique_name": "add-strings", "level": 1, "accepted_rate": 29}, {"id": 656, "title": "Multiply Strings", "unique_name": "multiply-strings", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "0", "total_accepted": 316, "total_submissions": 1630, "contest": "", "has_followed_by": false}, "recover-binary-search-tree": {"id": 691, "unique_name": "recover-binary-search-tree", "user_status": null, "title": "Recover Binary Search Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "In a binary search tree, (Only) two nodes are swapped. Find out these nodes and swap them. If there no node swapped, return original root of tree.", "notice": "", "clarification": "", "example": "Given a binary search tree:\r\n```\r\n    4\r\n   / \\\r\n  5   2\r\n / \\\r\n1   3\r\n```\r\n\r\nreturn \r\n```\r\n    4\r\n   / \\\r\n  2   5\r\n / \\\r\n1   3\r\n```", "challenge": "", "tags": [{"id": 41, "name": "Binary", "cn_name": "Binary", "type": 1, "unique_name": "binary", "alias": "", "problem_count": 4}, {"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 448, "title": "Inorder Successor in BST", "unique_name": "inorder-successor-in-bst", "level": 2, "accepted_rate": 35}, {"id": 95, "title": "Validate Binary Search Tree", "unique_name": "validate-binary-search-tree", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "{4,5,2,1,3}", "total_accepted": 832, "total_submissions": 4045, "contest": "", "has_followed_by": false}, "sliding-window-unique-elements-sum": {"id": 692, "unique_name": "sliding-window-unique-elements-sum", "user_status": null, "title": "Sliding Window Unique Elements Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 14, "description": "Given an array and a window size that is sliding along the array, find the sum of the count of unique elements in each window.", "notice": "", "clarification": "", "example": "Given a array nums = `[1, 2, 1, 3, 3]` and `k = 3`\r\n\r\nFirst window `[1, 2, 1]`, only `2` is unique, count is 1.\r\nSecond window `[2, 1, 3]`, all elements unique, count is 3.\r\nThird window `[1, 3, 3]`, only `1` is unique, count is 1.\r\nsum of count = `1 + 3 + 1 = 5`\r\n\r\nReturn `5`", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 360, "title": "Sliding Window Median", "unique_name": "sliding-window-median", "level": 3, "accepted_rate": 18}, {"id": 642, "title": "Moving Average from Data Stream", "unique_name": "moving-average-from-data-stream", "level": 1, "accepted_rate": 36}, {"id": 362, "title": "Sliding Window Maximum", "unique_name": "sliding-window-maximum", "level": 4, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[1,2,1,3,3]\n3", "total_accepted": 483, "total_submissions": 3355, "contest": "", "has_followed_by": false}, "course-schedule-iii": {"id": 696, "unique_name": "course-schedule-iii", "user_status": null, "title": "Course Schedule III", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "There are \u00b7n\u00b7 different online courses numbered from `1` to `n`. Each course has some `duration(course length) t` and closed on `dth` day. A course should be taken continuously for t days and must be finished before or on the `dth` day. You will start at the `1st` day.\r\n\r\nGiven `n` online courses represented by pairs `(t,d)`, your task is to find the maximal number of courses that can be taken.\r\n\r\n", "notice": "1. The integer 1 <= d, t, n <= 10,000.\r\n2. You can't take two courses simultaneously.", "clarification": "", "example": "Given `[[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]`\r\nreturn `3`\r\n\r\nThere're totally `4` courses, but you can take `3` courses at most:\r\nFirst, take the 1st course, it costs `100` days so you will finish it on the `100th` day, and ready to take the next course on the `101st` day.\r\nSecond, take the `3rd` course, it costs `1000` days so you will finish it on the `1100th` day, and ready to take the next course on the 1101st day. \r\nThird, take the `2nd` course, it costs `200` days so you will finish it on the `1300th` day. \r\nThe `4th` course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 112, "name": "WAP", "cn_name": "WAP", "type": 3, "unique_name": "wap", "alias": "", "problem_count": 1}], "related_problems": [{"id": 615, "title": "Course Schedule", "unique_name": "course-schedule", "level": 2, "accepted_rate": 25}, {"id": 616, "title": "Course Schedule II", "unique_name": "course-schedule-ii", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 195, "total_submissions": 818, "contest": "", "has_followed_by": false}, "sum-of-square-numbers": {"id": 697, "unique_name": "sum-of-square-numbers", "user_status": null, "title": "Sum of Square Numbers", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 17, "description": "Given a integer `c`, your task is to decide whether there're two integers a and b such that `a^2 + b^2 = c`.", "notice": "", "clarification": "", "example": "Given n = `5`\r\nReturn `true` // 1 * 1 + 2 * 2 = 5\r\n\r\nGiven n = `-5`\r\nReturn `false`", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 831, "title": "3Sum II", "unique_name": "3sum-ii", "level": 2, "accepted_rate": 37}, {"id": 513, "title": "Perfect Squares", "unique_name": "perfect-squares", "level": 2, "accepted_rate": 34}, {"id": 436, "title": "Maximal Square", "unique_name": "maximal-square", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 1419, "total_submissions": 8045, "contest": "", "has_followed_by": false}, "maximum-distance-in-arrays": {"id": 698, "unique_name": "maximum-distance-in-arrays", "user_status": null, "title": "Maximum Distance in Arrays", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given `m` arrays, and each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the difference between two integers `a` and `b` to be their absolute difference `|a-b|`. Your task is to find the maximum difference.\r\n\r\n", "notice": "1. Each given array will have at least `1` number. There will be at least two non-empty arrays.\r\n2. The total number of the integers in all the `m` arrays will be in the range of `[2, 10000]`.\r\n3. The integers in the `m` arrays will be in the range of `[-10000, 10000]`.\r\n", "clarification": "", "example": "Given arrays = `[[1,2,3], [4,5], [1,2,3]]`\r\nReturn `4`\r\n\r\n```\r\nOne way to reach the maximum difference 4 is to pick 1 in the first or third array and pick 5 in the second array.\r\n```", "challenge": "", "tags": [{"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2,3],[4,5],[1,2,3]]", "total_accepted": 549, "total_submissions": 2251, "contest": "", "has_followed_by": false}, "check-sum-of-k-primes": {"id": 699, "unique_name": "check-sum-of-k-primes", "user_status": null, "title": "Check Sum of K Primes", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 18, "description": "Given two numbers `n` and `k`. We need to find out if `n` can be written as sum of `k` prime numbers.", "notice": "- n <= 10 ^ 9\r\n\r\n- Goldbach's conjecture", "clarification": "", "example": "```\r\nGiven n = 10, k = 2\r\nReturn true   // 10 = 5 + 5\r\n\r\nGiven n = 2, k = 2\r\nReturn false\r\n```\r\n", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 681, "title": "First Missing Prime Number", "unique_name": "first-missing-prime-number", "level": 2, "accepted_rate": 27}, {"id": 235, "title": "Prime Factorization", "unique_name": "prime-factorization", "level": 0, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "10\n2", "total_accepted": 137, "total_submissions": 745, "contest": "", "has_followed_by": false}, "cutting-a-rod": {"id": 700, "unique_name": "cutting-a-rod", "user_status": null, "title": "Cutting a Rod", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "Given a rod of length `n` inches and an array of prices that contains prices of all pieces of size smaller than `n`. Determine the maximum value obtainable by cutting up the rod and selling the pieces. For example, if length of the rod is `8` and the values of different pieces are given as following, then the maximum obtainable value is `22` (by cutting in two pieces of lengths `2` and `6`)", "notice": "", "clarification": "", "example": "```\r\nlength   | 1   2   3   4   5   6   7   8  \r\n--------------------------------------------\r\nprice    | 1   5   8   9  10  17  17  20\r\n```\r\nGiven price = `[1, 5, 8, 9, 10, 17, 17, 20]`, n = `8`\r\nReturn `22`     // by cutting in two pieces of lengths 2 and 6\r\n\r\n\r\n```\r\nlength   | 1   2   3   4   5   6   7   8  \r\n--------------------------------------------\r\nprice    | 3   5   8   9  10  17  17  20\r\n```\r\nGiven price = `[3, 5, 8, 9, 10, 17, 17, 20]`, n = `8`\r\nReturn `24`     // by cutting in eight pieces of length 1", "challenge": "", "tags": [{"id": 45, "name": "Backpack", "cn_name": "Backpack", "type": 11, "unique_name": "backpack", "alias": "", "problem_count": 14}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 562, "title": "Backpack IV", "unique_name": "backpack-iv", "level": 2, "accepted_rate": 43}, {"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "level": 3, "accepted_rate": 57}, {"id": 125, "title": "Backpack II", "unique_name": "backpack-ii", "level": 2, "accepted_rate": 41}, {"id": 92, "title": "Backpack", "unique_name": "backpack", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[3,5,8,9,10,17,17,20]\n8", "total_accepted": 852, "total_submissions": 2330, "contest": "", "has_followed_by": false}, "trim-a-binary-search-tree": {"id": 701, "unique_name": "trim-a-binary-search-tree", "user_status": null, "title": "Trim a Binary Search Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 70, "description": "Given the root of a binary search tree and 2 numbers min and max, trim the tree such that all the numbers in the new tree are between min and max (inclusive). The resulting tree should still be a valid binary search tree. So, if we get this tree as input:\r\n![http://www.ardendertat.com/wp-content/uploads/2012/01/bst.png](http://www.ardendertat.com/wp-content/uploads/2012/01/bst.png \"\")\r\nand we\u00e2\u20ac\u2122re given min value as 5 and max value as 13, then the resulting binary search tree should be:\r\n![http://www.ardendertat.com/wp-content/uploads/2012/01/bst_trim.png](http://www.ardendertat.com/wp-content/uploads/2012/01/bst_trim.png \"\")\r\n", "notice": "", "clarification": "", "example": "Given binary search tree:\r\n`{8,3,10,1,6,#,14,#,#,4,7,13}` and minVal = `5`, maxVal = `13`.\r\n\r\nOne possible answer: `{8, 6, 10, #, 7, #, 13}`\r\n\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 448, "title": "Inorder Successor in BST", "unique_name": "inorder-successor-in-bst", "level": 2, "accepted_rate": 35}, {"id": 95, "title": "Validate Binary Search Tree", "unique_name": "validate-binary-search-tree", "level": 2, "accepted_rate": 23}, {"id": 85, "title": "Insert Node in a Binary Search Tree", "unique_name": "insert-node-in-a-binary-search-tree", "level": 1, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "{8,3,10,1,6,#,14,#,#,4,7,13}\n5\n13", "total_accepted": 369, "total_submissions": 524, "contest": "", "has_followed_by": false}, "concatenated-string-with-uncommon-characters-of-two-strings": {"id": 702, "unique_name": "concatenated-string-with-uncommon-characters-of-two-strings", "user_status": null, "title": "Concatenated String with Uncommon Characters of Two Strings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "Two strings are given and you have to modify 1st string such that all the common characters of the 2nd strings have to be removed and the uncommon characters of the 2nd string have to be concatenated with uncommon characters of the 1st string.\r\n\r\n", "notice": "", "clarification": "", "example": "Given s1 = `aacdb`, s2 = `gafd`\r\nreturn `cbgf`\r\n\r\nGiven s1 = `abcs`, s2 = `cxzca`;\r\nreturn `bsxz`", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 680, "title": "Split String", "unique_name": "split-string", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "\"abcs\"\n\"cxzca\"", "total_accepted": 1346, "total_submissions": 4359, "contest": "", "has_followed_by": false}, "folding-array": {"id": 703, "unique_name": "folding-array", "user_status": null, "title": "Folding Array", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 41, "description": "Given an array `nums` of length `n` and an array `req` of length `k` , you need to fold the array as required, and output the result of the fold.\r\n1.If `req[i] = 0` means you should fold from `left` to `right`\r\nfor example:\r\n```\r\n1 2 3 4 5 6 7 8  ==>   4 3 2 1\r\n                       5 6 7 8\r\n```\r\n2.If `req[i] = 1` means you should fold from `right` to `left`\r\nfor example:\r\n```\r\n1 2 3 4 5 6 7 8  ==>   8 7 6 5\r\n                       1 2 3 4\r\n```\r\n\r\nMore example:\r\n```\r\nfold from left to right\r\n4 3 2 1  ==>  6 5\r\n5 6 7 8       3 4\r\n              2 1\r\n              7 8\r\n\r\n\r\nfold from right to left\r\n6 5  ==>   8\r\n3 4        1\r\n2 1        4\r\n7 8        5\r\n           6\r\n           3\r\n           2\r\n           7 \r\n```", "notice": "- n is power of two.\r\n- k is index.(e.g. `n` = 2^3 = 8\u00ef\u00bc\u0152`k` = 3)", "clarification": "", "example": "Given array `nums = [1, 2, 3, 4, 5, 6, 7, 8]` and array `req = [0, 0, 1]`\r\nchange array in place to be `[8, 1, 4, 5, 6, 3, 2, 7]`", "challenge": "How to do in place?", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 769, "title": "Spiral Array", "unique_name": "spiral-array", "level": 1, "accepted_rate": 34}, {"id": 625, "title": "Partition Array II", "unique_name": "partition-array-ii", "level": 2, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5,6,7,8]\n[0,0,1]", "total_accepted": 184, "total_submissions": 437, "contest": "", "has_followed_by": false}, "bulb-switcher-ii": {"id": 704, "unique_name": "bulb-switcher-ii", "user_status": null, "title": "Bulb Switcher II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "There is a room with `n` lights which are turned on initially and `4` buttons on the wall. After performing exactly `m` unknown operations towards buttons, you need to return how many different kinds of status of the `n` lights could be.\r\n\r\nSuppose `n` lights are labeled as number `[1, 2, 3 ..., n]`, function of these `4` buttons are given below:\r\n\r\n1. You can flip all the lights.\r\n2. You can flip lights with even numbers.\r\n3. You can flip lights with odd numbers.\r\n4. You can flip lights with `(3k + 1)` numbers, k = 0, 1, 2, ...", "notice": "", "clarification": "", "example": "```\r\nGiven n = 1, m = 1.\r\nreturn 2 // Status can be: [on], [off]\r\n\r\nGiven n = 2, m = 1.\r\nreturn 3 // Status can be: [on, off], [off, on], [off, off]\r\n```\r\n", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 991, "title": "Bulb Switcher", "unique_name": "bulb-switcher", "level": 2, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "2\n1", "total_accepted": 234, "total_submissions": 630, "contest": "", "has_followed_by": false}, "binary-watch": {"id": 706, "unique_name": "binary-watch", "user_status": null, "title": "Binary Watch", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Given a watch with a binary display time and a non-negative integer n which represents the number of `1`s on a given timetable, return all possible time.\r\n", "notice": "- The order of output does not matter.\r\n- The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".\r\n- The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".", "clarification": "", "example": "Given `n = 1`\r\nReturn `[\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]`", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "1", "total_accepted": 309, "total_submissions": 1112, "contest": "", "has_followed_by": false}, "optimal-account-balancing": {"id": 707, "unique_name": "optimal-account-balancing", "user_status": null, "title": "Optimal Account Balancing", "is_favorited": false, "version": "v2", "level": 4, "accepted_rate": 17, "description": "Given a directed graph where each edge is represented by a `tuple`, such as `[u, v, w] `represents an edge with a weight `w` from `u` to `v`.\r\nYou need to calculate at least the need to add the number of edges to ensure that each point of the weight are balancing. That is, the sum of weight of the edge pointing to this point is equal to the sum of weight of the edge of the point that points to the other point.", "notice": "1.Note that u \u00e2\u2030\u00a0 v and w > 0.\r\n2.index may not be linear, e.g. we could have the points 0, 1, 2 or we could also have the points 0, 2, 6.", "clarification": "", "example": "For example:\r\nGiven a graph `[[0,1,10],[2,0,5]]` \r\nReturn `2`\r\nTwo edges are need to added. There are `[1,0,5]` and `[1,2,5]`\r\n\r\nGiven a graph `[[0,1,10],[1,0,1],[1,2,5],[2,0,5]]` \r\nReturn `1`\r\nOnly one edge need to added. There is `[1,0,4]`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 985, "title": "Can I Win", "unique_name": "can-i-win", "level": 3, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[[0,1,10],[2,0,5]]", "total_accepted": 200, "total_submissions": 1139, "contest": "", "has_followed_by": false}, "elevator-system-oo-design": {"id": 708, "title": "Elevator system - OO Design", "unique_name": "elevator-system-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "restaurant-oo-design": {"id": 709, "title": "Restaurant OO Design", "unique_name": "restaurant-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "hotel-oo-design": {"id": 710, "title": "Hotel OO Design", "unique_name": "hotel-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "vending-machine-oo-design": {"id": 712, "title": "Vending machine OO Design", "unique_name": "vending-machine-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "black-jack-oo-design": {"id": 714, "title": "Black Jack OO Design", "unique_name": "black-jack-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "tree-longest-path-with-same-value": {"id": 717, "unique_name": "tree-longest-path-with-same-value", "user_status": null, "title": "Tree Longest Path With Same Value ", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 16, "description": "We consider an undirected tree with `N` nodes, numbered from 1 to `N`, Additionally, each node also has a label attached to it and the label is an integer value. Note that different nodes can have identical labels. You need to write a function , that , given a zero-indexed array A of length N, where A[J] is the label value of the `(J + 1)-th` node in the tree, and a zero-indexed array E of length `K = (N - 1) * 2` in which the edges  of the tree are described (for every `0 <= j <= N -2`  values `E[2 * J]` and `E[2 * J + 1]` represents and edge connecting node `E[2 * J]` with node `E[2 * J + 1])`\uff0c returns the length of the longest path such that all the nodes on that path have the same label. Then length of a path if defined as the number of edges in that path.\r\n\r\n", "notice": "Assume that: 1 <= N <= 1000", "clarification": "", "example": "Give A = `[1, 1, 1 ,2, 2]`  and E = `[1, 2, 1, 3, 2, 4, 2, 5]`\r\ndescribed tree appears as follows:\r\n```\r\n                   1 \uff08value = 1\uff09\r\n                 /   \\\r\n    (value = 1) 2     3 (value = 1)\r\n               /  \\\r\n (value = 2)  4     5 (value = 2)\r\n```\r\nand your function should return `2`, because the longest path (in which all nodes have the save value of 1) is (2 -> 1 -> 3). The number of edges on this path is 2, thus, that is the answer.\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 614, "title": "Binary Tree Longest Consecutive Sequence II", "unique_name": "binary-tree-longest-consecutive-sequence-ii", "level": 2, "accepted_rate": 33}, {"id": 595, "title": "Binary Tree Longest Consecutive Sequence", "unique_name": "binary-tree-longest-consecutive-sequence", "level": 1, "accepted_rate": 32}, {"id": 480, "title": "Binary Tree Paths", "unique_name": "binary-tree-paths", "level": 1, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5]\n[1,2,1,3,2,4,2,5]", "total_accepted": 1440, "total_submissions": 8499, "contest": "", "has_followed_by": false}, "repeat-string": {"id": 718, "title": "Repeat String", "unique_name": "repeat-string", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "calculate-maximum-value": {"id": 719, "unique_name": "calculate-maximum-value", "user_status": null, "title": "Calculate Maximum Value", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given a string of numbers, write a function to find the maximum value from the string, you can add a `+` or `*` sign between any two numbers.", "notice": "", "clarification": "", "example": "Given str = `01231`, return `10`\r\n`((((0 + 1) + 2) * 3) + 1) = 10` we get the maximum value 10\r\n\r\nGiven str = `891`, return `73`\r\nAs 8 * 9 * 1 = 72 and 8 * 9 + 1 = 73 so 73 is maximum.", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 741, "title": "Calculate Maximum Value II", "unique_name": "calculate-maximum-value-ii", "level": 2, "accepted_rate": 38}, {"id": 368, "title": "Expression Evaluation", "unique_name": "expression-evaluation", "level": 3, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"01231\"", "total_accepted": 915, "total_submissions": 3122, "contest": "", "has_followed_by": false}, "rearrange-a-string-with-integers": {"id": 720, "unique_name": "rearrange-a-string-with-integers", "user_status": null, "title": "Rearrange a String With Integers", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 28, "description": "Given a string containing uppercase alphabets and integer digits (from `0` to `9`), write a function to return the alphabets in the order followed by the sum of digits.\r\n", "notice": "", "clarification": "", "example": "Given str = `AC2BEW3`, return `ABCEW5`\r\nAlphabets in the lexicographic order, followed by the sum of integers(2 and 3).", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"AC2BEW3\"", "total_accepted": 580, "total_submissions": 2042, "contest": "", "has_followed_by": false}, "next-sparse-number": {"id": 721, "unique_name": "next-sparse-number", "user_status": null, "title": "Next Sparse Number", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 31, "description": "A number is Sparse if there are no two adjacent `1`s in its `binary representation`. Given a number `n`, find the smallest Sparse number which greater than or equal to `n`.\r\neg. `5` (binary representation: `101`) is sparse, but `6` (binary representation: `110`) is not sparse.", "notice": "", "clarification": "", "example": "Given n = `6`, return `8`\r\nNext Sparse Number is `8`\r\n\r\nGiven n = `4`, return `4`\r\nNext Sparse Number is `4`\r\n\r\nGiven n = `38`, return `40`\r\nNext Sparse Number is `40`\r\n\r\nGiven n = `44`, return `64`\r\nNext Sparse Number is `64`", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 722, "title": "Maximum Subarray VI", "unique_name": "maximum-subarray-vi", "level": 4, "accepted_rate": 29}, {"id": 664, "title": "Counting Bits", "unique_name": "counting-bits", "level": 2, "accepted_rate": 51}, {"id": 236, "title": "Swap Bits", "unique_name": "swap-bits", "level": 1, "accepted_rate": 37}, {"id": 179, "title": "Update Bits", "unique_name": "update-bits", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "6", "total_accepted": 498, "total_submissions": 1593, "contest": "", "has_followed_by": false}, "maximum-subarray-vi": {"id": 722, "title": "Maximum Subarray VI", "unique_name": "maximum-subarray-vi", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "rotate-bits-left": {"id": 723, "unique_name": "rotate-bits-left", "user_status": null, "title": "Rotate Bits - Left", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 60, "description": "Bit Rotation -\u2014\u2014 A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end.\r\n\r\nIn left rotation, the bits that fall off at left end are put back at right end.\r\n\r\nLet n is stored using 8 bits. Left rotation of n = \u3000`11100101` by `3` makes n = `00101111` (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (`000\u202611100101`) becomes `00..0011100101000`.\r\n\r\nIn this problem, you can assume that n was stored in `32` Bits", "notice": "", "clarification": "", "example": "Given n = `123`, d = `4`\r\nreturn `183`\r\n", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 664, "title": "Counting Bits", "unique_name": "counting-bits", "level": 2, "accepted_rate": 51}, {"id": 236, "title": "Swap Bits", "unique_name": "swap-bits", "level": 1, "accepted_rate": 37}, {"id": 181, "title": "Flip Bits", "unique_name": "flip-bits", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "255\n1", "total_accepted": 780, "total_submissions": 1283, "contest": "", "has_followed_by": false}, "minimum-partition": {"id": 724, "unique_name": "minimum-partition", "user_status": null, "title": "Minimum Partition", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 14, "description": "Given a set of positive integers, write a function to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum.\r\n\r\nIf there is a set `S` with `n` elements, then if we assume Subset1 has `m` elements, Subset2 must have `n-m` elements and the value of `abs(sum(Subset1) \u00e2\u20ac\u201c sum(Subset2))` should be minimum.", "notice": "", "clarification": "", "example": "```\r\nGiven nums = [1, 6, 11, 5], return 1\r\n\r\n// Subset1 = [1, 5, 6], sum of Subset1 = 12 \r\n// Subset2 = [11], sum of Subset2 = 11   \r\n// abs(11 - 12) = 1     \r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "level": 3, "accepted_rate": 57}, {"id": 125, "title": "Backpack II", "unique_name": "backpack-ii", "level": 2, "accepted_rate": 41}, {"id": 92, "title": "Backpack", "unique_name": "backpack", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[1,5,6,11]", "total_accepted": 604, "total_submissions": 4284, "contest": "", "has_followed_by": false}, "boolean-parenthesization": {"id": 725, "unique_name": "boolean-parenthesization", "user_status": null, "title": "Boolean Parenthesization", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 43, "description": "Given a boolean expression with following symbols.\r\n```\r\nSymbols\r\n    'T' ---> true \r\n    'F' ---> false \r\n```\r\nAnd following operators filled between symbols\r\n\r\n```\r\nOperators\r\n    &   ---> boolean AND\r\n    |   ---> boolean OR\r\n    ^   ---> boolean XOR \r\n```\r\n\r\nCount the number of ways we can parenthesize the expression so that the value of expression evaluates to true.\r\n\r\nLet the input be in form of two arrays one contains the symbols (T and F) in order and other contains operators (&, | and ^}", "notice": "", "clarification": "", "example": "```\r\nGiven symbol = ['T', 'F', 'T'], operator = ['^', '&']\r\nreturn 2\r\nThe given expression is \"T ^ F & T\", it evaluates true, in two ways \"((T ^ F) & T)\" and \"(T ^ (F & T))\"\r\n\r\ngiven symbol = ['T', 'F', 'F'], operator = ['^', '|']\r\nreturn 2\r\nThe given expression is \"T ^ F | F\", it evaluates true, in two ways \"( (T ^ F) | F )\" and \"( T ^ (F | F) )\".\r\n``` ", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"TFT\"\n\"^&\"", "total_accepted": 197, "total_submissions": 455, "contest": "", "has_followed_by": false}, "check-full-binary-tree": {"id": 726, "unique_name": "check-full-binary-tree", "user_status": null, "title": "Check Full Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 55, "description": "A full binary tree is defined as a binary tree in which all nodes have either zero or two child nodes. Conversely, there is no node in a full binary tree, which has one child node. More information about full binary trees can be found here.\r\n\r\n```\r\nFull Binary Tree\r\n      1\r\n     / \\\r\n    2   3\r\n   / \\\r\n  4   5\r\n\r\nNot a Full Binary Tree\r\n      1\r\n     / \\\r\n    2   3\r\n   / \r\n  4   \r\n```\r\n", "notice": "", "clarification": "", "example": "```\r\nGiven tree {1,2,3}, return true\r\nGiven tree {1,2,3,4}, return false\r\nGiven tree {1,2,3,4,5} return true\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,2,3,4,5}", "total_accepted": 995, "total_submissions": 1790, "contest": "", "has_followed_by": false}, "chinese-remainder-theorem": {"id": 727, "unique_name": "chinese-remainder-theorem", "user_status": null, "title": "Chinese Remainder Theorem", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 20, "description": "We are given two arrays num[0..k-1] and rem[0..k-1]. **In num[0..k-1], every pair is coprime (gcd for every pair is 1.** We need to find `minimum positive` number `x` such that:\r\n```\r\n     x % num[0]    =  rem[0], \r\n     x % num[1]    =  rem[1], \r\n     .......................\r\n     x % num[k-1]  =  rem[k-1] \r\n```", "notice": "", "clarification": "", "example": "```\r\nGiven  nums = [3, 4, 5], rems = [2, 3, 1], return 11\r\n11 is the smallest number such that:\r\n- When we divide it by 3, we get remainder 2. \r\n- When we divide it by 4, we get remainder 3.\r\n- When we divide it by 5, we get remainder 1. \r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,4,5]\n[2,3,1]", "total_accepted": 94, "total_submissions": 449, "contest": "", "has_followed_by": false}, "three-distinct-factors": {"id": 728, "unique_name": "three-distinct-factors", "user_status": null, "title": "Three Distinct Factors", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 24, "description": "Given a `positive` integer `n` (1 <= n <= `10^18`). Check whether a number has exactly three distinct factors, return true if it has exactly three distinct factors, otherwise false.\r\n\r\n", "notice": "", "clarification": "", "example": "Given n = `9`, return `true`\r\nNumber 9 has exactly three factors: 1, 3, 9, so return true.\r\n\r\nGiven n = `10`, return `false`", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 690, "title": "Factorial", "unique_name": "factorial", "level": 3, "accepted_rate": 19}, {"id": 652, "title": "Factorization", "unique_name": "factorization", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "9", "total_accepted": 410, "total_submissions": 1663, "contest": "", "has_followed_by": false}, "last-digit-by-factorial-divide": {"id": 729, "unique_name": "last-digit-by-factorial-divide", "user_status": null, "title": "Last Digit By Factorial Divide", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 35, "description": "We are given two numbers `A` and `B` such that `B >= A`. We need to compute the last digit of this resulting F such that F = `B! / A!` where 1 <= A, B <= `10^18` (A and B are very large)\r\n", "notice": "", "clarification": "", "example": "```\r\nGiven A = 2, B = 4, return 2\r\nA! = 2 and B! = 24, F = 24 / 2 = 12 --> last digit = 2\r\n\r\nGiven A = 107, B = 109, return 2\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 771, "title": "Double Factorial", "unique_name": "double-factorial", "level": 1, "accepted_rate": 72}, {"id": 690, "title": "Factorial", "unique_name": "factorial", "level": 3, "accepted_rate": 19}, {"id": 652, "title": "Factorization", "unique_name": "factorization", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "107\n109", "total_accepted": 459, "total_submissions": 1303, "contest": "", "has_followed_by": false}, "sum-of-all-subsets": {"id": 730, "unique_name": "sum-of-all-subsets", "user_status": null, "title": "Sum of All Subsets", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 19, "description": "Given a number `n`, we need to find the sum of all the elements from all possible subsets of a set formed by first n natural numbers.", "notice": "", "clarification": "", "example": "```\r\nGiven n = 2, return 6\r\nPossible subsets are {{1}, {2}, {1, 2}}. Sum of elements in subsets\r\nis 1 + 2 + 1 + 2 = 6\r\n\r\nGiven n = 3, return 24\r\nPossible subsets are {{1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}\r\nSum of subsets is : \r\n1 + 2 + 3 + (1 + 2) + (1 + 3) + \r\n(2 + 3) + (1 + 2 + 3)\r\n```", "challenge": "", "tags": [{"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 18, "title": "Subsets II", "unique_name": "subsets-ii", "level": 2, "accepted_rate": 27}, {"id": 17, "title": "Subsets", "unique_name": "subsets", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 633, "total_submissions": 3167, "contest": "", "has_followed_by": false}, "restaurant-ii-oo-design": {"id": 731, "title": "Restaurant II OO Design ", "unique_name": "restaurant-ii-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "hotel-ii-oo-design": {"id": 732, "title": "Hotel II OO Design", "unique_name": "hotel-ii-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "number-of-subsequences-of-form-ai-bj-ck": {"id": 734, "unique_name": "number-of-subsequences-of-form-ai-bj-ck", "user_status": null, "title": "Number of Subsequences of Form a^i b^j c^k", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given a string, count number of subsequences of the form `a^i b^j c^ k`, i.e., it consists of i `a` characters, followed by j `b` characters, followed by k `c` characters where i >= 1, j >=1 and k >= 1.\r\n\r\nNote: Two subsequences are considered different if the set of array indexes picked for the 2 subsequences are different.\r\n\r\n\r\n", "notice": "", "clarification": "", "example": "Given s = `abbc`, return `3`\r\nSubsequences are `abc`, `abc` and `abbc`\r\n\r\nGiven s = `abcabc`, return `7`\r\nSubsequences are `abc`, `abc`, `abbc`, `aabc`, `abcc`, `abc` and `abc`", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 742, "title": "Self Dividing Numbers", "unique_name": "self-dividing-numbers", "level": 2, "accepted_rate": 15}, {"id": 366, "title": "Fibonacci", "unique_name": "fibonacci", "level": 0, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "\"abbc\"", "total_accepted": 261, "total_submissions": 795, "contest": "", "has_followed_by": false}, "replace-with-greatest-from-right": {"id": 735, "unique_name": "replace-with-greatest-from-right", "user_status": null, "title": "Replace With Greatest From Right", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 20, "description": "Given an array of integers, replace every element with the next greatest element (greatest element on the right side) in the array. Since there is no element next to the last element, replace it with -1. For example, if the array is `[16, 17, 4, 3, 5, 2]`, then it should be modified to `[17, 5, 5, 5, 2, -1]`.\r\n", "notice": "", "clarification": "", "example": "Give nums = `[16, 17, 4, 3, 5, 2]`, change nums to `[17, 5, 5, 5, 2, -1]`\r\nYou should do it in place.", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 366, "title": "Fibonacci", "unique_name": "fibonacci", "level": 0, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[-1,-1,-1,-1,-1,-1]", "total_accepted": 618, "total_submissions": 2994, "contest": "", "has_followed_by": false}, "find-elements-in-matrix": {"id": 737, "unique_name": "find-elements-in-matrix", "user_status": null, "title": "Find Elements in Matrix", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 32, "description": "Given a matrix, find a element that appear in all the rows in the matrix.You can assume that there is only one such element.", "notice": "", "clarification": "", "example": "For example:\r\nGiven a matrix:\r\n```\r\n[\r\n  [2,5,3],\r\n  [3,2,1],\r\n  [1,3,5]\r\n]\r\n```\r\nreturn `3`\r\n", "challenge": "", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 770, "title": "Maximum and Minimum", "unique_name": "maximum-and-minimum", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "[[1],[1],[1]]", "total_accepted": 526, "total_submissions": 1612, "contest": "", "has_followed_by": false}, "count-different-palindromic-subsequences": {"id": 738, "unique_name": "count-different-palindromic-subsequences", "user_status": null, "title": "Count Different Palindromic Subsequences", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "Given a string `S`, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.\r\n\r\nA subsequence of a string S is obtained by deleting `0` or more characters from `S`.\r\nA sequence is palindromic if it is equal to the sequence reversed.\r\n\r\nTwo sequences `A[1]`, `A[2]`, ... and `B[1]`, `B[2]`, ... are different if there is some i for which `A[i]` != `B[i]`.", "notice": "The length of S will be in the range [1, 1000].\r\nEach character S[i] will be in the set {'a', 'b', 'c', 'd'}.\r\n", "clarification": "", "example": "Given S = `\"bccb\"`, return `6`\r\nExplanation: \r\nThe 6 different non-empty palindromic subsequences are `b`, `c`, `bb`, `cc`, `bcb`, `bccb`.\r\nNote that `bcb` is counted only once, even though it occurs twice.\r\n\r\nGiven S = `\"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"` return `104860361`\r\nExplanation: \r\nThere are `3104860382` different non-empty palindromic subsequences, which is `104860361` modulo `10^9 + 7`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 667, "title": " Longest Palindromic Subsequence", "unique_name": "longest-palindromic-subsequence", "level": 2, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "\"bccb\"", "total_accepted": 139, "total_submissions": 466, "contest": "", "has_followed_by": false}, "24-game": {"id": 739, "unique_name": "24-game", "user_status": null, "title": "24 Game", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 28, "description": "You have 4 cards each containing a number from `1` to `9`. You need to compute whether they could operated through `*`, `/`, `+`, `-`, `(`, `)` to get the value of `24`.", "notice": "- The division operator / represents real division, not integer division. so 4 / (1 - 2/3) = 12.\r\n- Every operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.\r\n- You cannot `concatenate` numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.", "clarification": "", "example": "Given nums = `[4, 1, 8, 7]`, return `true` // 8 * \uff087 - 4\uff09 * 1 = 24\r\n\r\nGiven nums = `[1, 1, 1, 2]`, return `false`\r\n\r\nGiven nums = `[3, 3, 8, 8]`, return `true` // 8 / ( 3 - 8 / 3) = 24", "challenge": "", "tags": [{"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 152, "title": "Combinations ", "unique_name": "combinations", "level": 2, "accepted_rate": 34}, {"id": 135, "title": "Combination Sum ", "unique_name": "combination-sum", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[1,4,8,7]", "total_accepted": 196, "total_submissions": 674, "contest": "", "has_followed_by": false}, "coin-change-2": {"id": 740, "unique_name": "coin-change-2", "user_status": null, "title": "Coin Change 2", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.", "notice": "You can assume below:\r\n\r\n- 0 <= amount <= 5000\r\n- 1 <= coin <= 5000\r\n- the number of coins is less than 500\r\n- the answer is guaranteed to fit into signed 32-bit integer\r\n", "clarification": "", "example": "Given amount = `10`, coins = `[10] `, return 1\r\n\r\nGiven amount = `8`, coins = `[2, 3, 8]`, return 3\r\nthere are three ways to make up the amount:\r\n8 = 8\r\n8 = 3 + 3 + 2\r\n8 = 2 + 2 + 2 + 2", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 564, "title": "Combination Sum IV ", "unique_name": "combination-sum-iv", "level": 2, "accepted_rate": 33}, {"id": 563, "title": "Backpack V", "unique_name": "backpack-v", "level": 2, "accepted_rate": 47}, {"id": 440, "title": "Backpack III", "unique_name": "backpack-iii", "level": 3, "accepted_rate": 57}, {"id": 153, "title": "Combination Sum II", "unique_name": "combination-sum-ii", "level": 2, "accepted_rate": 31}, {"id": 152, "title": "Combinations ", "unique_name": "combinations", "level": 2, "accepted_rate": 34}, {"id": 135, "title": "Combination Sum ", "unique_name": "combination-sum", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "8\n[2,3,8]", "total_accepted": 496, "total_submissions": 1515, "contest": "", "has_followed_by": false}, "calculate-maximum-value-ii": {"id": 741, "title": "Calculate Maximum Value II", "unique_name": "calculate-maximum-value-ii", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "self-dividing-numbers": {"id": 742, "unique_name": "self-dividing-numbers", "user_status": null, "title": "Self Dividing Numbers", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 15, "description": "A **Digit Divide Numbers** is a number that is divisible by every digit it contains.\r\n\r\nFor example, 128 is a **Digit Divide Numbers** because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\r\n\r\nAlso, **Digit Divide Numbers** is not allowed to contain the digit zero.\r\n\r\nGiven a lower and upper number bound, output a list of every possible **Digit Divide Numbers**, including the bounds if possible.", "notice": "0<=L<=R<=2^31-1,R-L<=10^6", "clarification": "", "example": "Given left = `1`, right = `22`, return `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`", "challenge": "", "tags": [{"id": 65, "name": "Epic Systems", "cn_name": "Epic Systems", "type": 3, "unique_name": "epic-systems", "alias": "", "problem_count": 2}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 776, "title": "Strobogrammatic Number II", "unique_name": "strobogrammatic-number-ii", "level": 2, "accepted_rate": 30}, {"id": 734, "title": "Number of Subsequences of Form a^i b^j c^k", "unique_name": "number-of-subsequences-of-form-ai-bj-ck", "level": 2, "accepted_rate": 32}, {"id": 644, "title": "Strobogrammatic Number", "unique_name": "strobogrammatic-number", "level": 1, "accepted_rate": 33}, {"id": 488, "title": "Happy Number", "unique_name": "happy-number", "level": 1, "accepted_rate": 33}], "comment_count": 0, "testcase_sample": "1\n22", "total_accepted": 230, "total_submissions": 1526, "contest": "", "has_followed_by": false}, "monotone-increasing-digits": {"id": 743, "unique_name": "monotone-increasing-digits", "user_status": null, "title": "Monotone Increasing Digits", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 31, "description": "Given a non-negative integer `N`, find the largest number that is less than or equal to N with monotone increasing digits.\r\n\r\n(Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.)", "notice": "Note: `N` is an integer in the range `[0, 10^9]`.", "clarification": "", "example": "Given `N` = `10`, return `9`\r\nGiven `N` = `12345`, return `12345`\r\nGiven `N` = `10000`, return `9999`", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [{"id": 182, "title": "Delete Digits", "unique_name": "delete-digits", "level": 2, "accepted_rate": 20}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 247, "total_submissions": 777, "contest": "", "has_followed_by": false}, "sum-of-first-k-even-length-palindrome-numbers": {"id": 744, "unique_name": "sum-of-first-k-even-length-palindrome-numbers", "user_status": null, "title": "Sum of first K even-length Palindrome numbers", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Given a integer k, find the sum of first k even-length palindrome numbers.\r\nEven length here refers to the number of digits of a number is even.", "notice": "", "clarification": "", "example": "Given k = `3`, return `66` // 11 + 22 + 33  = 66 (Sum of first three even-length palindrome \r\nnumbers)\r\n\r\n\r\nGiven k = `10`, return `1496`\r\n// 11 + 22 + 33 + 44 + 55 + 66 + 77 + 88 + 99 + 1001 = 1496", "challenge": "", "tags": [{"id": 4, "name": "Enumeration", "cn_name": "Enumeration", "type": 1, "unique_name": "enumeration", "alias": "", "problem_count": 23}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 678, "title": "Shortest Palindrome", "unique_name": "shortest-palindrome", "level": 2, "accepted_rate": 24}, {"id": 491, "title": "Palindrome Number", "unique_name": "palindrome-number", "level": 1, "accepted_rate": 38}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "10", "total_accepted": 394, "total_submissions": 789, "contest": "", "has_followed_by": false}, "palindromic-ranges": {"id": 745, "unique_name": "palindromic-ranges", "user_status": null, "title": "Palindromic Ranges", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 28, "description": "A positive integer is a palindrome if its decimal representation (without leading zeros) is a palindromic string (a string that reads the same forwards and backwards). For example, the numbers `5`, `77`, `363`, `4884`, `11111`, `12121` and `349943` are palindromes.\n\nA range of integers is interesting if it contains an even number of palindromes. The range `[L, R]`, with `L <= R`, is defined as the sequence of integers from `L` to `R` (inclusive): (L, L+1, L+2, \u2026, R-1, R). `L` and `R` are the range\u2019s first and last numbers.\n\nThe range `[L1, R1]` is a subrange of `[L, R]` if `L` <= `L1` <= `R1` <= `R`. Your job is to determine how many interesting subranges of `[L, R]` there are.", "notice": "", "clarification": "", "example": "Given L = `1`, R = `2`, return `1`\nGiven L = `1`, R = `7`, return `12`\nGiven L = `87`, R = `88`, return `1`", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 807, "title": "Palindrome Number II", "unique_name": "palindrome-number-ii", "level": 1, "accepted_rate": 46}, {"id": 491, "title": "Palindrome Number", "unique_name": "palindrome-number", "level": 1, "accepted_rate": 38}, {"id": 627, "title": "Longest Palindrome", "unique_name": "longest-palindrome", "level": 1, "accepted_rate": 32}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "1\n7", "total_accepted": 298, "total_submissions": 1025, "contest": "", "has_followed_by": false}, "design-tic-tac-toe": {"id": 746, "unique_name": "design-tic-tac-toe", "user_status": null, "title": "Design Tic-Tac-Toe", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 7, "description": "Design `Tic-Tac-Toe` game.\r\n\r\n- board has fixed size of `3`\r\n- `X` always take the first move\r\n- If a place already got taken, and one player want to take that place,\r\nan AlreadyTakenException will be thrown\r\n- If one player wins, and somebody try to make another move, a GameEndException will be thrown.", "notice": "", "clarification": "", "example": "Input:\r\nmove(0, 0) // X turn\r\nmove(1, 0) // O trun \r\nmove(1, 1) // X turn\r\nmove(2, 0) // O turn\r\nmove(2, 2) // X turn and win\r\nmove(0, 0)  //throw GameEndException\r\nmove(0, 0) // X turn\r\nmove(0, 0) // throw AlreadyTakenException\r\nmove(1, 0) // O turn\r\nmove(1, 1) // X turn\r\nmove(2, 0) // o turn\r\nmove(2, 2) // X turn and win\r\n\r\nYou should print blew:\r\n```\r\nx player wins!\r\nx player wins!\r\n```", "challenge": "", "tags": [{"id": 49, "name": "OO Design", "cn_name": "OO Design", "type": 1, "unique_name": "oo-design", "alias": "", "problem_count": 10}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1022, "title": "Valid Tic-Tac-Toe State", "unique_name": "valid-tic-tac-toe-state", "level": 2, "accepted_rate": 52}], "comment_count": 0, "testcase_sample": "move(0, 0)\nmove(1, 0)\nmove(1, 1)\nmove(2, 0)\nmove(2, 2)\nmove(0, 1)\nmove(0, 0)\nmove(1, 0)\nmove(1, 1)\nmove(2, 0)\nmove(2, 2)", "total_accepted": 26, "total_submissions": 323, "contest": "", "has_followed_by": false}, "coffee-maker-oo-design": {"id": 747, "title": "Coffee Maker OO Design", "unique_name": "coffee-maker-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "kindle-oo-design": {"id": 748, "title": "Kindle OO Design", "unique_name": "kindle-oo-design", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 27, "title": "Object-oriented design(OOD)", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/square_copy.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "johns-backyard-garden": {"id": 749, "unique_name": "johns-backyard-garden", "user_status": null, "title": "John's backyard garden", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 42, "description": "John wants to build a back garden on the empty space behind his home. There are two kinds of bricks now, one is `3` dm high and the other is `7` dm high. John wants to enclose a high `x` dm wall. If John can do this, output YES, otherwise NO.", "notice": "X is an integer, and it's range is `[3, 1000]`.\r\n", "clarification": "", "example": "Give x = `10`,return `YES`.\r\n```\r\nExplanation:\r\nx = 3 + 7:That is, you need one batch of 3 dm height bricks and one batch of 7 dm height bricks.\r\n```\r\nGive x = `5`,return `NO`.\r\n```\r\nExplanation:\r\nJohn can not enclose a high 5 dm wall with 3 dm height bricks and 7 dm height bricks.\r\n```\r\nGive x = `13`,return `YES`.\r\n\r\n```\r\nExplanation:\r\nx = 2 * 3 + 7:That is, you need two batch of 3 dm height bricks and one batch of 7 dm height bricks.\r\n```\r\n", "challenge": "", "tags": [{"id": 45, "name": "Backpack", "cn_name": "Backpack", "type": 11, "unique_name": "backpack", "alias": "", "problem_count": 14}], "related_problems": [{"id": 669, "title": "Coin Change", "unique_name": "coin-change", "level": 2, "accepted_rate": 31}, {"id": 92, "title": "Backpack", "unique_name": "backpack", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "10", "total_accepted": 965, "total_submissions": 2252, "contest": "", "has_followed_by": false}, "portal": {"id": 750, "unique_name": "portal", "user_status": null, "title": "Portal", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 26, "description": "Chell is the protagonist of the Portal Video game series developed by Valve Corporation.\r\nOne day, She fell into a maze. The maze can be thought of as an array of 2D characters of size `n x m`. It has `4` kinds of rooms. `'S'` represents where Chell started(Only one starting point). `'E'` represents the exit of the maze(When chell arrives, she will leave the maze, this question may have multiple exits). `'*'` represents the room that Chell can pass. `'#'` represents a wall, Chell can not pass the wall. \r\nShe can spend a minute moving up,down,left and right to reach a room, but she can not reach the wall.\r\nNow, can you tell me how much time she needs **at least** to leave the maze?\r\nIf she can not leave, return `-1`.\r\n", "notice": "* We guarantee that the size of the maze is `n x m`, and `1<=n<=200`,`1<=m<=200`.\r\n* There is only one `'S'`, and one or more `'E'`.", "clarification": "", "example": "Give\r\n`[`\r\n`['S','E','*']`,\r\n`['*','*','*']`,\r\n`['*','*','*']`\r\n`]`\r\n,return `1`.\r\n```\r\nExplanation:\r\nChell spent one minute walking from (0,0) to (0,1).\r\n```\r\n\r\nGive\r\n`[`\r\n`['S','#','#']`, \r\n`['#','*','#']`, \r\n`['#','*','*']`, \r\n`['#','*','E']`\r\n`]`\r\n,return `-1`.\r\n```\r\nExplanation:\r\nChell can not leave the maze.\r\n```\r\n\r\nGive\r\n`[`\r\n`['S','*','E']`, \r\n`['*','*','*']`, \r\n`['#','*','*']`, \r\n`['#','#','E']`\r\n`]`\r\n,return `2`.\r\n```\r\nExplanation:\r\nFirst step: Chell move from (0,0) to (0,1).\r\nSecond step: Chell move from (0,1) to (0,2).\r\n(Chell can also leave from (3,2), but it would take 5 minutes. So it's better to leave from (0,2).)\r\n```\r\nGive\r\n`[`\r\n`['E','*','#']`,\r\n`['#','*','#']`,\r\n`['#','*','*']`,\r\n`['#','#','S']`\r\n`]`\r\n,return `5`.\r\n```\r\nExplanation:\r\nFirst step: Chell move from (0,0) to (0,1).\r\nSecond step: Chell move from (0,1) to (1,1).\r\nThird step: Chell move from (1,1) to (2,1).\r\nFourth step: Chell move from (2,1) to (2,2).\r\nFifth step: Chell move from (2,2) to (3,2).\r\n```", "challenge": "", "tags": [{"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 611, "title": "Knight Shortest Path", "unique_name": "knight-shortest-path", "level": 2, "accepted_rate": 25}, {"id": 178, "title": "Graph Valid Tree", "unique_name": "graph-valid-tree", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[\"SE*\",\"***\",\"***\"]", "total_accepted": 222, "total_submissions": 830, "contest": "", "has_followed_by": false}, "johns-business": {"id": 751, "unique_name": "johns-business", "user_status": null, "title": "John's business", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "There are n cities on an axis, numbers from `0` ~ `n - 1`. John intends to do business in these n cities, He is interested in Armani's shipment. Each city has a price for these goods `prices [i]`. For city `x`, John can buy the goods from the city numbered from  `x - k` to `x + k`, and sell them to city x. We want to know how much John can earn **at most** in **each** city?", "notice": "prices.length range is `[2, 100000]`, k <= `100000`.", "clarification": "", "example": "Given prices = `[1, 3, 2, 1, 5]`, k = `2`, return `[0, 2, 1, 0, 4]`.\r\n```\r\nExplanation\u00ef\u00bc\u0161\r\ni = 0, John can go to the city 0 ~ 2. He can not make money because the prices in city 1 and city 2 are both higher than the price in city 0, that is, ans[0] = 0;\r\ni = 1, John can go to the city 0~3. He can buy from city 0 or city 3 to earn the largest price difference. That is, ans[1] = 2.\r\ni = 2, John can go to the city 0~4. Obviously, he can earn the largest price difference by buying from city 3. That is, ans[2] = 1.\r\ni = 3, John can go to the city 1~4. He can not make money cause city 3 has the lowest price. That is, ans[3] = 0.\r\ni = 4, John can go to the city 2~4. He can earn the largest price difference by buying from city 3. That is, ans[4] = 4.\r\n```\r\n\r\nGiven prices = `[1, 1, 1, 1, 1]`, k = `1`, return `[0, 0, 0, 0, 0]`\r\n```\r\nExplanation:\r\nAll cities are the same price, so John can not make money, that is, all ans are 0.\r\n```\r\n", "challenge": "", "tags": [{"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}], "related_problems": [{"id": 205, "title": "Interval Minimum Number", "unique_name": "interval-minimum-number", "level": 2, "accepted_rate": 26}, {"id": 202, "title": "Segment Tree Query", "unique_name": "segment-tree-query", "level": 2, "accepted_rate": 37}, {"id": 201, "title": "Segment Tree Build", "unique_name": "segment-tree-build", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[1,3,2,1,5]\n2", "total_accepted": 271, "total_submissions": 894, "contest": "", "has_followed_by": false}, "rogue-knight-sven": {"id": 752, "unique_name": "rogue-knight-sven", "user_status": null, "title": "Rogue Knight Sven", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "In material plane \"reality\", there are `n + 1` planets, namely planet 0, planet 1, ..., planet n.\r\nEach planet has a portal through which we can reach the target planet directly without passing through other planets.\r\nBut portal has two shortcomings.\r\nFirst, planet `i` can only reach the planet whose number is **greater than** `i`, and the difference between `i` can not exceed the limit.\r\nSecond,  it takes `cost[j]` gold coins to reach the planet `j` through the portal.\r\nNow, Rogue Knight Sven arrives at the planet `0` with `m` gold coins, how many ways does he reach the planet `n` through the portal?\r\n", "notice": "* `1 <= n <= 50`, `0 <= m <= 100`, `1 <= limit <= 50`,` 0 <= cost[i] <= 100`\u3002\r\n* The problem guarantees cost [0] = `0`, cause cost[0] does not make sense", "clarification": "", "example": "Give n = `1`, m = `1`, limit = `1`, cost = `[0, 1]`,return `1`.\r\n```\r\nExplanation:\r\nPlan 1: planet 0 \u2192 planet 1\r\n```\r\nGive n = `1`, m = `1`, limit = `1`, cost = `[0, 2]`,return `0`.\r\n```\r\nExplanation:\r\nHe can not reach the target planet.\r\n```\r\nGive n = `2`, m = `3`, limit = `2`, cost = `[0, 1, 1]`,return `2`.\r\n```\r\nExplanation:\r\nPlan 1: planet 0 \u2192 planet 1 \u2192 planet 2\r\nPlan 2: planet 0 \u2192 planet 2\r\n```\r\nGive n = `2`, m = `3`, limit = `2`, cost = `[0, 3, 1]`,return `1`.\r\n```\r\nExplanation:\r\nPlan 1: planet 0 \u2192 planet 2\r\n```\r\n\r\n", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}, {"id": 116, "title": "Jump Game", "unique_name": "jump-game", "level": 2, "accepted_rate": 38}, {"id": 91, "title": "Minimum Adjustment Cost", "unique_name": "minimum-adjustment-cost", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "1\n1\n1\n[0,1]", "total_accepted": 422, "total_submissions": 1125, "contest": "", "has_followed_by": false}, "smallest-subset": {"id": 761, "unique_name": "smallest-subset", "user_status": null, "title": "Smallest Subset", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "Given an array of `non-negative` integers. Our task is to find minimum number of elements such that their sum should be greater than the sum of rest of the elements of the array.\r\n", "notice": "", "clarification": "", "example": "Given nums = `[3, 1, 7, 1]`, return `1`\r\nGiven nums = `[2, 1, 2]`, return `2`", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 31, "title": "Partition Array", "unique_name": "partition-array", "level": 2, "accepted_rate": 31}, {"id": 17, "title": "Subsets", "unique_name": "subsets", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[3,1,7,1]", "total_accepted": 310, "total_submissions": 600, "contest": "", "has_followed_by": false}, "longest-common-subsequence-ii": {"id": 762, "unique_name": "longest-common-subsequence-ii", "user_status": null, "title": "Longest Common Subsequence II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 39, "description": "Given two sequence `P` and `Q` of numbers. The task is to find Longest Common Subsequence of two sequence if we are allowed to change at most k element in first sequence to any value.", "notice": "", "clarification": "", "example": "Given P = `[8 ,3]`, Q = `[1, 3]`, K = 1\r\nReturn `2`\r\n\r\nGiven P = `[1, 2, 3, 4, 5]`, Q = `[5, 3, 1, 4, 2]`, K = 1\r\nReturn `3`", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 762, "title": "Longest Common Subsequence II", "unique_name": "longest-common-subsequence-ii", "level": 3, "accepted_rate": 39}, {"id": 79, "title": "Longest Common Substring", "unique_name": "longest-common-substring", "level": 2, "accepted_rate": 32}, {"id": 77, "title": "Longest Common Subsequence", "unique_name": "longest-common-subsequence", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[8,3]\n[1,3]\n1", "total_accepted": 109, "total_submissions": 275, "contest": "", "has_followed_by": false}, "hex-conversion": {"id": 763, "unique_name": "hex-conversion", "user_status": null, "title": "Hex Conversion", "is_favorited": false, "version": "v2", "level": 0, "accepted_rate": 27, "description": "Given a decimal number `n` and an integer `k`, Convert `decimal number n` to `base-k`.", "notice": "1.`0<=n<=2^31-1`, `2<=k<=16`\n2.Each letter over 9 is indicated in `uppercase`", "clarification": "", "example": "Example 1:\nGiven `n` = `5`, `k` = `2`\nreturn `\"101\"`\n\nExample 2:\nGiven `n` = `30`, `k` = `16`\nreturn `\"1E\"`", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 655, "title": "Add Strings", "unique_name": "add-strings", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "5\n2", "total_accepted": 1959, "total_submissions": 7220, "contest": "", "has_followed_by": false}, "calculate-circumference-and-area": {"id": 764, "unique_name": "calculate-circumference-and-area", "user_status": null, "title": "Calculate Circumference And Area", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 56, "description": "Given radius `r`, returns the circle's circumference `nums[0]` and area `nums[1]`.The result retains two decimal places.", "notice": "PI = 3.14", "clarification": "", "example": "Given `r` = `2`\nreturn `[12.56, 12.56]`", "challenge": "", "tags": [{"id": 11, "name": "Basic Implementation", "cn_name": "Basic Implementation", "type": 1, "unique_name": "basic-implementation", "alias": "", "problem_count": 16}], "related_problems": [], "comment_count": 0, "testcase_sample": "1", "total_accepted": 482, "total_submissions": 853, "contest": "", "has_followed_by": false}, "valid-triangle": {"id": 765, "unique_name": "valid-triangle", "user_status": null, "title": "Valid Triangle", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 66, "description": "Given three integers `a`, `b`, `c`, return `true` if they can form a triangle.", "notice": "What is Triangle? ([Wikipedia](https://en.wikipedia.org/wiki/Triangle \"Triangle\"))", "clarification": "", "example": "Given `a` = `2`, `b` = `3`, `c` = `4`\nreturn `true`\nGiven `a` = `1`, `b` = `2`, `c` = `3`\nreturn `false`", "challenge": "", "tags": [], "related_problems": [{"id": 918, "title": "3Sum Smaller", "unique_name": "3sum-smaller", "level": 2, "accepted_rate": 46}, {"id": 766, "title": "Leap Year", "unique_name": "leap-year", "level": 1, "accepted_rate": 62}, {"id": 9, "title": "Fizz Buzz", "unique_name": "fizz-buzz", "level": 1, "accepted_rate": 60}, {"id": 1, "title": "A + B Problem", "unique_name": "a-b-problem", "level": 1, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "2\n3\n4", "total_accepted": 635, "total_submissions": 951, "contest": "", "has_followed_by": false}, "leap-year": {"id": 766, "unique_name": "leap-year", "user_status": null, "title": "Leap Year", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 62, "description": "Determine whether year `n` is a leap year.return `true` if `n` is a leap year.", "notice": "A leap year (also known as an intercalary year or bissextile year) is a calendar year containing one additional day.if a year is `divisible by 4 and not divisible by 100` or `divisible by 400`,it is a leap year.   --[wikipedia](https://en.wikipedia.org/wiki/Leap_year \"wikipedia\")", "clarification": "", "example": "Given `n` = `2008`\r\nreturn `true`\r\nGiven `n` = `2018`\r\nreturn `false`", "challenge": "", "tags": [], "related_problems": [{"id": 765, "title": "Valid Triangle", "unique_name": "valid-triangle", "level": 1, "accepted_rate": 66}, {"id": 9, "title": "Fizz Buzz", "unique_name": "fizz-buzz", "level": 1, "accepted_rate": 60}, {"id": 1, "title": "A + B Problem", "unique_name": "a-b-problem", "level": 1, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "1997", "total_accepted": 1017, "total_submissions": 1634, "contest": "", "has_followed_by": false}, "reverse-array": {"id": 767, "unique_name": "reverse-array", "user_status": null, "title": "Reverse Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 52, "description": "Reverse the given array `nums` inplace.", "notice": "Inplace means you can't use extra space.", "clarification": "", "example": "Given `nums` = `[1,2,5]`\r\nreturn `[5,2,1]`", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 450, "title": "Reverse Nodes in k-Group", "unique_name": "reverse-nodes-in-k-group", "level": 3, "accepted_rate": 35}, {"id": 37, "title": "Reverse 3-digit Integer", "unique_name": "reverse-3-digit-integer", "level": 0, "accepted_rate": 48}, {"id": 413, "title": "Reverse Integer", "unique_name": "reverse-integer", "level": 1, "accepted_rate": 28}, {"id": 53, "title": "Reverse Words in a String", "unique_name": "reverse-words-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 35, "title": "Reverse Linked List", "unique_name": "reverse-linked-list", "level": 1, "accepted_rate": 40}], "comment_count": 0, "testcase_sample": "[1,2,3]", "total_accepted": 853, "total_submissions": 1627, "contest": "", "has_followed_by": false}, "yang-hui-triangle": {"id": 768, "unique_name": "yang-hui-triangle", "user_status": null, "title": "Yang Hui Triangle", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 45, "description": "Given an integer `n`, return the first `n-line` Yang Hui triangle.", "notice": "1.`0<=n<=20`\r\n2.Yang Hui\u00e2\u20ac\u2122s Triangle also called Pascal's triangle. --([Wikipedia](https://en.wikipedia.org/wiki/Pascal%27s_triangle \"Wikipedia\"))", "clarification": "", "example": "```\r\nGiven n = 4\r\nreturn \r\n[\r\n [1]\r\n [1,1]\r\n [1,2,1]\r\n [1,3,3,1]\r\n]\r\n```", "challenge": "", "tags": [], "related_problems": [{"id": 1354, "title": "Pascal's Triangle II", "unique_name": "pascals-triangle-ii", "level": 1, "accepted_rate": 61}], "comment_count": 0, "testcase_sample": "4", "total_accepted": 422, "total_submissions": 924, "contest": "", "has_followed_by": false}, "spiral-array": {"id": 769, "unique_name": "spiral-array", "user_status": null, "title": "Spiral Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 34, "description": "Given an integer `n`, return a spiral array of ` n * n ` sizes. \r\n", "notice": "", "clarification": "", "example": "Example1:\r\nGiven `n` = `3`\r\nthe spiral array is:\r\n```\r\n[\r\n[1,2,3]\r\n[8,9,4]\r\n[7,6,5]\r\n]\r\n```\r\n\r\nExample2:\r\nGiven `n` = `5`\r\nthe spiral array is:\r\n```\r\n[\r\n [1,2,3,4,5]\r\n [16,17,18,19,6]\r\n [15,24,25,20,7]\r\n [14,23,22,21,8]\r\n [13,12,11,10,9]\r\n]\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 703, "title": "Folding Array", "unique_name": "folding-array", "level": 3, "accepted_rate": 41}, {"id": 31, "title": "Partition Array", "unique_name": "partition-array", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 386, "total_submissions": 1110, "contest": "", "has_followed_by": false}, "maximum-and-minimum": {"id": 770, "unique_name": "maximum-and-minimum", "user_status": null, "title": "Maximum and Minimum", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 33, "description": "Given a matrix, return the maximum number and the minimum number.", "notice": "Your need to return a integer array, that array[0] represent the maximum and array[1] represent the minimum.", "clarification": "", "example": "Given a matrix:\n```\n[\n [1,2,3],\n [4,3,2],\n [6,4,4]\n]\n```\nreturn `[6,1]`", "challenge": "", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}], "related_problems": [{"id": 737, "title": "Find Elements in Matrix", "unique_name": "find-elements-in-matrix", "level": 1, "accepted_rate": 32}, {"id": 185, "title": "Matrix Zigzag Traversal", "unique_name": "matrix-zigzag-traversal", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[[1,2,3],[4,3,2],[6,4,4]]", "total_accepted": 457, "total_submissions": 1360, "contest": "", "has_followed_by": false}, "double-factorial": {"id": 771, "title": "Double Factorial", "unique_name": "double-factorial", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "group-anagrams": {"id": 772, "unique_name": "group-anagrams", "user_status": null, "title": "Group Anagrams", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Given an array of strings, group anagrams together.", "notice": "All inputs will be in lower-case.", "clarification": "", "example": "```\r\nGiven strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\r\nReturn \r\n[\r\n    [\"ate\", \"eat\",\"tea\"],\r\n    [\"nat\",\"tan\"],\r\n    [\"bat\"]\r\n]\r\n```", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 813, "title": "Find Anagram Mappings", "unique_name": "find-anagram-mappings", "level": 1, "accepted_rate": 52}, {"id": 647, "title": "Find All Anagrams in a String", "unique_name": "find-all-anagrams-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 503, "title": "Anagram (Map Reduce)", "unique_name": "anagram-map-reduce", "level": 2, "accepted_rate": 46}, {"id": 171, "title": "Anagrams", "unique_name": "anagrams", "level": 2, "accepted_rate": 24}, {"id": 158, "title": "Valid Anagram", "unique_name": "valid-anagram", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]", "total_accepted": 880, "total_submissions": 2096, "contest": "", "has_followed_by": false}, "repeated-dna": {"id": 774, "unique_name": "repeated-dna", "user_status": null, "title": "Repeated DNA", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "All DNA is composed of a series of nucleotides abbreviated as `A`, `C`, `G`, and `T`.\r\nFor example: `\"ACGAATTCCG\"`.  When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.\r\nWrite a function to find all `the 10-letter-long` sequences (substrings) that occur more than once in a DNA molecule.", "notice": "", "clarification": "", "example": "```\r\nGiven s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\",\r\nReturn [\"AAAAACCCCC\", \"CCCCCAAAAA\"].\r\n```", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"", "total_accepted": 562, "total_submissions": 1291, "contest": "", "has_followed_by": false}, "palindrome-pairs": {"id": 775, "unique_name": "palindrome-pairs", "user_status": null, "title": "Palindrome Pairs", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "Given a list of unique words, find all pairs of** distinct** indices (i, j) in the given list, so that the concatenation of the two words, i.e. `words[i] + words[j]` is a palindrome.", "notice": "", "clarification": "", "example": "Given words = `[\"bat\", \"tab\", \"cat\"]`\r\nReturn `[[0, 1], [1, 0]]`\r\nThe palindromes are `[\"battab\", \"tabbat\"]`\r\n\r\nGiven words = `[\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]`\r\nReturn `[[0, 1], [1, 0], [3, 2], [2, 4]]`\r\nThe palindromes are `[\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"]`", "challenge": "", "tags": [{"id": 34, "name": "Trie", "cn_name": "Trie", "type": 21, "unique_name": "trie", "alias": "Prefix Tree", "problem_count": 11}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 893, "title": "Longest Palindromic Substring II", "unique_name": "longest-palindromic-substring-ii", "level": 3, "accepted_rate": 63}, {"id": 807, "title": "Palindrome Number II", "unique_name": "palindrome-number-ii", "level": 1, "accepted_rate": 46}, {"id": 667, "title": " Longest Palindromic Subsequence", "unique_name": "longest-palindromic-subsequence", "level": 2, "accepted_rate": 41}, {"id": 200, "title": "Longest Palindromic Substring", "unique_name": "longest-palindromic-substring", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[\"bat\",\"tab\",\"cat\"]", "total_accepted": 349, "total_submissions": 1456, "contest": "", "has_followed_by": false}, "strobogrammatic-number-ii": {"id": 776, "unique_name": "strobogrammatic-number-ii", "user_status": null, "title": "Strobogrammatic Number II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\r\nFind all strobogrammatic numbers that are of length = n.", "notice": "", "clarification": "", "example": "Given n = `2`, return `[\"11\",\"69\",\"88\",\"96\"]`.", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 742, "title": "Self Dividing Numbers", "unique_name": "self-dividing-numbers", "level": 2, "accepted_rate": 15}, {"id": 644, "title": "Strobogrammatic Number", "unique_name": "strobogrammatic-number", "level": 1, "accepted_rate": 33}, {"id": 283, "title": "Max of 3 Numbers", "unique_name": "max-of-3-numbers", "level": 0, "accepted_rate": 53}], "comment_count": 0, "testcase_sample": "2", "total_accepted": 326, "total_submissions": 1069, "contest": "", "has_followed_by": false}, "valid-perfect-square": {"id": 777, "unique_name": "valid-perfect-square", "user_status": null, "title": "Valid Perfect Square", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 37, "description": "Given a positive integer `num`, write a function which returns `True` if num is a perfect square else `False`.", "notice": "`Do not` use any built-in library function such as sqrt.", "clarification": "", "example": "For example:\r\nGiven num = `16`\r\nReturns `True`", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 586, "title": "Sqrt(x) II", "unique_name": "sqrtx-ii", "level": 2, "accepted_rate": 34}, {"id": 141, "title": "Sqrt(x)", "unique_name": "sqrtx", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "16", "total_accepted": 734, "total_submissions": 1978, "contest": "", "has_followed_by": false}, "pacific-atlantic-water-flow": {"id": 778, "unique_name": "pacific-atlantic-water-flow", "user_status": null, "title": "Pacific Atlantic Water Flow", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "Given an `m x n` matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and the \"Atlantic ocean\" touches the right and bottom edges.\r\n\r\nWater can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.\r\n\r\nFind the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.", "notice": "1.The order of returned grid coordinates does not matter.\n2.Both m and n are less than 150.", "clarification": "", "example": "```\nGiven the following 5x5 matrix:\n\n  Pacific ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * Atlantic\n\nReturn:\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\n```", "challenge": "", "tags": [{"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 33, "title": "N-Queens", "unique_name": "n-queens", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "total_accepted": 325, "total_submissions": 1086, "contest": "", "has_followed_by": false}, "generalized-abbreviation": {"id": 779, "unique_name": "generalized-abbreviation", "user_status": null, "title": "Generalized Abbreviation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 38, "description": "Write a function to generate the generalized abbreviations of a word.", "notice": "", "clarification": "", "example": "```\nGiven word = `\"word\"`, return the following list (order does not matter):\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 779, "title": "Generalized Abbreviation", "unique_name": "generalized-abbreviation", "level": 2, "accepted_rate": 38}, {"id": 648, "title": "Unique Word Abbreviation", "unique_name": "unique-word-abbreviation", "level": 2, "accepted_rate": 28}, {"id": 639, "title": "Word Abbreviation", "unique_name": "word-abbreviation", "level": 3, "accepted_rate": 33}, {"id": 637, "title": "Valid Word Abbreviation", "unique_name": "valid-word-abbreviation", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "\"word\"", "total_accepted": 365, "total_submissions": 946, "contest": "", "has_followed_by": false}, "remove-invalid-parentheses": {"id": 780, "unique_name": "remove-invalid-parentheses", "user_status": null, "title": "Remove Invalid Parentheses", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 34, "description": "Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.", "notice": "The input string may contain letters other than the parentheses `(` and `)`.", "clarification": "", "example": "```\n\"()())()\" -> [\"()()()\", \"(())()\"]\n\"(a)())()\" -> [\"(a)()()\", \"(a())()\"]\n\")(\" -> [\"\"]\n```", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"()())()\"", "total_accepted": 1450, "total_submissions": 4258, "contest": "", "has_followed_by": false}, "and-and-or": {"id": 782, "unique_name": "and-and-or", "user_status": null, "title": "AND and OR", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Give n non-negative integers, find the sum of maximum **OR** sum, minimum **OR** sum, maximum **AND** sum, minimum **AND** sum.", "notice": "* maximum OR sum: In n numbers, take a number of numbers(cannot take nothing), The largest number after the OR operation.\r\n* minimum OR sum: In n numbers, take a number of numbers(cannot take nothing), The smallest number after the OR operation.\r\n* maximum AND sum: In n numbers, take a number of numbers(cannot take nothing), The largest number after the AND operation.\r\n* minimum AND sum: In n numbers, take a number of numbers(cannot take nothing), The smallest number after the AND operation.\r\n* `1 <= n <= 1000000`\u00ef\u00bc\u0152`0 <= nums[i] <= 2^32 - 1`.", "clarification": "", "example": "Give n = `3`, nums = `[1, 2, 3]`, return `7`.\r\n```\r\nExplanation:\r\nmaximum OR sum: 3, minimum OR sum: 1, maximum AND sum: 3, minimum AND sum: 0.\r\nresult: 3 + 1 + 3 + 0 = 7.\r\n```\r\nGive n = `3`, nums = `[0, 0, 1]`, return `2`.\r\n```\r\nExplanation:\r\nmaximum OR sum: 1, minimum OR sum: 0, maximum AND sum: 1, minimum AND sum: 0.\r\nresult: 1 + 0 + 1 + 0 = 2.\r\n```\r\nGive n = `5`, nums = `[12313, 156, 4564, 212, 12]`, return `25090`.\r\n```\r\nExplanation:\r\nmaximum OR sum: 12765, minimum OR sum: 12, maximum AND sum: 12313, minimum AND sum: 0.\r\nresult: 12765 + 12 + 12313 = 25090\r\n```\r\n\r\nGive n = `3`, nums = `[111111, 333333, 555555]`, return `1588322`.\r\n```\r\nExplanation:\r\nmaximum OR sum: 917047, minimum OR sum: 111111, maximum AND sum: 555555, minimum AND sum: 4609.\r\nresult: 917047+ 111111+ 555555+ 4609 = 1588322.\r\n```\r\n\r\n", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}], "related_problems": [], "comment_count": 0, "testcase_sample": "3\n[1, 2, 3]", "total_accepted": 221, "total_submissions": 463, "contest": "", "has_followed_by": false}, "minimum-risk-path": {"id": 783, "unique_name": "minimum-risk-path", "user_status": null, "title": "Minimum Risk Path", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 23, "description": "There are m undirected edges on the map, Each edge (x, y, w) represents the weight of position `x` to position `y` is `w`. There may be multiple paths from position `0` to position `n`. We define the risk value of a path as the maximum weight of all the edges in this path.\r\nWhat is the smallest risk value in all paths from position `0` to position `n`?\r\n", "notice": "* `1 <= m <= 500`\uff0c`1 <= n <= 50`\uff0c`0 <= x, y <= n`\uff0c`1 <= w <= 100000`.\r\n* Problem guarantee position `0` must lead to position `n`.\r\n* The map does not contain heavy edges.", "clarification": "", "example": "Give n = `2`, m = `2`, x = `[0, 1]`, y = `[1, 2]`, w = `[1, 2]`, return `2`.\r\n```\r\nExplanation:\r\nPath1: 0\u21921\u2192 2 (risk value: 2)\r\nThe minimum risk value is 2.\r\n```\r\nGive n = `3`, m = `4`, x = `[0, 0, 1, 2]`, y = `[1, 2, 3, 3]`, w = `[1, 2, 3, 4]`, return `3`.\r\n```\r\nExplanation:\r\nPath1: 0\u21921\u2192 3 (risk value: 3)\r\nPath2: 0\u21922\u2192 3 (risk value: 4)\r\nThe minimum risk value is 3.\r\n```\r\nGive n = `4`, m = `5`, x = `[0, 1, 1, 2, 3]`, y = `[1, 2, 3, 4, 4]`, w = `[3, 2, 4, 2, 1]`, return `3`.\r\n```\r\nExplanation:\r\nPath1: 0\u21921\u2192 2 \u2192 4 (risk value: 3)\r\nPath2: 0\u21921\u2192 3 \u2192 4 (risk value: 4)\r\nThe minimum risk value is 3.\r\n```\r\nGive n = `5`, m = `7`, x = `[0, 0, 1, 2, 3, 3, 4]`, y = `[1, 2, 3, 4, 4, 5, 5]`, w = `[2, 5, 3, 4, 3, 4, 1]`, return `3`.\r\n```\r\nExplanation:\r\nPath1: 0\u21921\u2192 3 \u2192 5 (risk value: 4)\r\nPath2: 0\u21921\u2192 3 \u2192 4 \u2192 5 (risk value: 3)\r\nPath3: 0\u21922\u2192 4 \u2192 3 \u2192 5 (risk value: 5)\r\nPath4: 0\u21922\u2192 4 \u2192 5 (risk value: 5)\r\nThe minimum risk value is 3.\r\n```\r\n", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "2\n2\n[0,1]\n[1,2]\n[1,2]", "total_accepted": 367, "total_submissions": 1562, "contest": "", "has_followed_by": false}, "the-longest-common-prefix-ii": {"id": 784, "unique_name": "the-longest-common-prefix-ii", "user_status": null, "title": "The Longest Common Prefix II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 40, "description": "Given `n` strings and a target string, output the maximum length of the longest common prefix of the target string with the given `n` strings.", "notice": "The sum of the length of `n` strings is sum, `1 <= sum <= 50000`. The length of each string is greater than 0(i.e. there is no empty string).", "clarification": "", "example": "Give `[\"abcba\",\"acc\",\"abwsf\"]`\uff0ctarget = `\"abse\"`,return `2`.\r\n```\r\nExplanation:\r\nThe longest common prefix of \u201cabse\u201d and \u201cabcba\u201d is \u201cab\u201d, and the length is 2. The longest common prefix of \u201cabse\u201d and \u201cacc\u201d is \u201ca\u201d, and the length is 1. The longest common prefix of \u201cabse\u201d and \u201cabwsf\u201d is \u201cab\u201d, and the length is 2. max(2,1,2) = 2.\r\n```\r\n\r\nGive `[\"aaa\",\"bbb\",\"aabb\"]`\uff0ctarget = `\"aaab\"`,return `3`.\r\n```\r\nExplanation:\r\nThe longest common prefix of \u201caaab\u201d and \u201caaa\u201d is \u201caaa\u201d, and the length is 3. The longest common prefix of \u201caaab\u201d and \"bbb\" is \"\", and the length is 0. The longest common prefix of \u201caaab\u201d and \u201caabb\u201d is \u201caa\u201d, and the length is 2. max(3,0,2) = 3. \r\n```\r\n\r\n", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"abcba\",\"acc\",\"abwsf\"]\n\"abse\"", "total_accepted": 402, "total_submissions": 988, "contest": "", "has_followed_by": false}, "maximum-weighted-sum-path": {"id": 785, "unique_name": "maximum-weighted-sum-path", "user_status": null, "title": "Maximum Weighted Sum Path", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "A robot is located at the top-right corner of a `m x n` grid.\r\nThe robot can only move either down or left at any point in time. The robot is trying to reach the bottom-left corner of the grid.Every grid has a number,the robot wants to get the **max** weighted sum path.\r\nWhat is the maximum weighted sum path?\r\n", "notice": "* Given a matrix of size `n x m`, and guarantee `n <= 200`, `m <= 200`\r\n* Problem data guarantee `0 <= i <= n-1` , ` 0 <= j <= m-1`, `nums[i][j] <= 100000`.", "clarification": "", "example": "Give\r\n`[`\r\n`[1,2,3,4]`,\r\n`[3,5,6,7]`,\r\n`[9,10,1,2]`,\r\n`[4,4,5,5]`\r\n`]`\r\n,return `45`.\r\n```\r\nExplanation:\r\nThe path is [4,7,6,5,10,9,4].\r\n```\r\n\r\nGive\r\n`[`\r\n`[1,2,3]`,\r\n`[4,5,6]`,\r\n`[7,9,8]`\r\n`]`\r\n,return `33`.\r\n```\r\nExplanation:\r\nThe path is [3,6,8,9,7].\r\n```\r\n", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[5,16,8,8,4],[6,0,4,0,5],[16,0,0,7,5],[15,6,5,14,16],[17,9,11,2,4]]", "total_accepted": 250, "total_submissions": 720, "contest": "", "has_followed_by": false}, "linked-list-weighted-sum-in-reverse-order": {"id": 786, "title": "Linked List Weighted Sum In Reverse Order", "unique_name": "linked-list-weighted-sum-in-reverse-order", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "the-maze": {"id": 787, "unique_name": "the-maze", "user_status": null, "title": "The Maze", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling `up`, `down`, `left` or `right`, `but it won't stop rolling until hitting a wall`. When the ball stops, it could choose the next direction.\r\n\r\nGiven the ball's start position, the destination and the maze, determine whether the ball could stop at the destination.\r\n\r\nThe maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.", "notice": "1.There is only one ball and one destination in the maze.\r\n2.Both the ball and the destination exist on an empty space, and they will not be at the same position initially.\r\n3.The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.\r\n5.The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.", "clarification": "", "example": "```\r\nGiven:\r\na maze represented by a 2D array\r\n\r\n0 0 1 0 0\r\n0 0 0 0 0\r\n0 0 0 1 0\r\n1 1 0 1 1\r\n0 0 0 0 0\r\n\r\nstart coordinate (rowStart, colStart) = (0, 4)\r\ndestination coordinate (rowDest, colDest) = (4, 4)\r\n\r\nReturn:true\r\n```", "challenge": "", "tags": [{"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 789, "title": "The Maze III", "unique_name": "the-maze-iii", "level": 3, "accepted_rate": 38}, {"id": 788, "title": "The Maze II", "unique_name": "the-maze-ii", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "[[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]]\n[0,4]\n[3,2]", "total_accepted": 443, "total_submissions": 1585, "contest": "", "has_followed_by": false}, "the-maze-ii": {"id": 788, "unique_name": "the-maze-ii", "user_status": null, "title": "The Maze II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling `up`, `down`, `left` or `right`, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\r\n\r\nGiven the ball's start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.\r\n\r\nThe maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.", "notice": "1.There is only one ball and one destination in the maze.\r\n2.Both the ball and the destination exist on an empty space, and they will not be at the same position initially.\r\n3.The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.\r\n4.The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.", "clarification": "", "example": "```\r\nGiven:\r\na maze represented by a 2D array\r\n\r\n0 0 1 0 0\r\n0 0 0 0 0\r\n0 0 0 1 0\r\n1 1 0 1 1\r\n0 0 0 0 0\r\n\r\nstart coordinate (rowStart, colStart) = (0, 4)\r\ndestination coordinate (rowDest, colDest) = (4, 4)\r\n\r\nReturn:12\r\n```", "challenge": "", "tags": [{"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 789, "title": "The Maze III", "unique_name": "the-maze-iii", "level": 3, "accepted_rate": 38}, {"id": 787, "title": "The Maze", "unique_name": "the-maze", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]]\n[0,4]\n[4,4]", "total_accepted": 298, "total_submissions": 627, "contest": "", "has_followed_by": false}, "the-maze-iii": {"id": 789, "unique_name": "the-maze-iii", "user_status": null, "title": "The Maze III", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 38, "description": "There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling `up (u)`, `down (d)`, `left (l)` or `right (r)`, `but it won't stop rolling until hitting a wall`. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls on to the hole.\r\n\r\nGiven the ball position, the hole position and the maze, find out how the ball could drop into the hole by moving the `shortest distance`. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the hole (included). `Output the moving directions by using 'u', 'd', 'l' and 'r'`. Since there could be several different shortest ways, you should output the lexicographically smallest way. If the ball cannot reach the hole, output \"impossible\".\r\n\r\nThe maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The ball and the hole coordinates are represented by row and column indexes.", "notice": "1.There is only one ball and one hole in the maze.\r\n2.Both the ball and hole exist on an empty space, and they will not be at the same position initially.\r\n3.The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.\r\n4.The maze contains at least 2 empty spaces, and the width and the height of the maze won't exceed 30.", "clarification": "", "example": "```\r\nInput:\r\na maze represented by a 2D array\r\n\r\n0 0 0 0 0\r\n1 1 0 0 1\r\n0 0 0 0 0\r\n0 1 0 0 1\r\n0 1 0 0 0\r\n\r\nball coordinate (rowBall, colBall) = (4, 3)\r\nhole coordinate (rowHole, colHole) = (0, 1)\r\n\r\nOutput:\"lul\"\r\n```", "challenge": "", "tags": [{"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 788, "title": "The Maze II", "unique_name": "the-maze-ii", "level": 2, "accepted_rate": 47}, {"id": 787, "title": "The Maze", "unique_name": "the-maze", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]]\n[4,3]\n[0,1]", "total_accepted": 207, "total_submissions": 538, "contest": "", "has_followed_by": false}, "parser": {"id": 790, "unique_name": "parser", "user_status": null, "title": "Parser", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 27, "description": "Symbol string generator consists of two parts, a set of the start symbol and a set of rules of generation.\r\nFor example:\r\nStart symbol: ['S'], Rules of generation: [\"S \u2192 abc\", \"S \u2192 aA\", \"A \u2192 b\", \"A \u2192 c\"]\r\nThen, symbolic string abc can be generated because S \u2192 abc. \r\nSymbolic string ab can be generated because S \u2192 aA \u2192 ab.\r\nSymbolic string abc can be generated because S \u2192 aA \u2192 ac.\r\nNow, give you a symbolic string generator and a symbolic string, and you need to return True if the symbolic string can be generated, False otherwise\r\n", "notice": "* You can assume the left side of the generation rule is an uppercase letter, startSymbol is an uppercase letter, symbolString is a lowercase string\r\n* `|generator| <= 20`, `|symbolString| <= 20`\r\n* There is no left recursion in generate rule sets. For example, there is no such rule set as [\"S \u2192 Sb\", \"S \u2192 A\", \"A \u2192 Sb\"]\r\n\r\n", "clarification": "", "example": "Given generator = `[\"S \u2192 abc\", \"S \u2192 aA\", \"A \u2192 b\", \"A \u2192 c\"]`, startSymbol = `S`, symbolString = `\u201cac\u201d`, return `True`.\r\n```\r\nexplanation:\r\nS -> aA -> ac\r\n```\r\n\r\nGiven generator = `[\"S \u2192 abcd\", \"S \u2192 A\", \"A \u2192 abc\"]`, startSymbol = `S`, symbolString = `\u201cabc\u201d`, return `True`\r\n```\r\nexplanation:\r\nS \u2192 A \u2192 abc\r\n```\r\n\r\nGiven generator = `[\"S \u2192 abc\", \"S \u2192 aA\", \"A \u2192 b\", \"A \u2192 c\"]`, startSymbol = `S`, symbolString = `\u201ca\u201d`, return `False`\r\n```\r\nexplanation:\r\nS after several steps cannot get a\r\n```\r\n\r\nGiven generator = `[\"S \u2192 abcd\", \"S \u2192 A\", \"A \u2192 abc\"]`, startSymbol = `S`, symbolString = `\u201cab\u201d`, return `True`\r\n```\r\nexplanation:\r\nS after several steps cannot get ab\r\n```\r\n", "challenge": "", "tags": [{"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 808, "title": "Movie Network", "unique_name": "movie-network", "level": 2, "accepted_rate": 25}, {"id": 176, "title": "Route Between Two Nodes in Graph", "unique_name": "route-between-two-nodes-in-graph", "level": 2, "accepted_rate": 36}, {"id": 153, "title": "Combination Sum II", "unique_name": "combination-sum-ii", "level": 2, "accepted_rate": 31}, {"id": 121, "title": "Word Ladder II", "unique_name": "word-ladder-ii", "level": 3, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "[\"S -> abc\", \"S -> aA\", \"A -> b\", \"A -> c\"]\nS\n\"ac\"", "total_accepted": 192, "total_submissions": 692, "contest": "", "has_followed_by": false}, "merge-number": {"id": 791, "unique_name": "merge-number", "user_status": null, "title": "Merge Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given `n` numbers, now we need to merge `n` numbers into one number. And each time we can only select and merge two numbers a,b. Each merger needs to consume `a+b` energy. Output the minimum energy consumed by merging `n` numbers.", "notice": "`2 <= n <= 50000`, the combined number will not exceed the int range", "clarification": "", "example": "Given `[1,2,3,4]`, return `19`\r\n```\r\nExplanation:\r\nMerge 1,2, which consumes 3 energy, and the rest is [3,4,3]. Merge 3,3, which consumes 6 energy, and the rest is [6,4]. Merge the last two numbers, which consumes 10 energy, and a total of 19 energy was consumed.\r\n```\r\n\r\nGiven `[2,8,4,1]`, return `25`\r\n```\r\nexplanation:\r\nMerge 1,2, which consumes 3 energy, and the rest is [8,4,3]. Merge 3,4, which consumes 7 energy, and the rest is [7,8]. Merge the last two numbers, which consumes 15 energy, and a total of 25 energy was consumed.\r\n```\r\n\r\n", "challenge": "", "tags": [{"id": 30, "name": "Priority Queue", "cn_name": "Priority Queue", "type": 21, "unique_name": "priority-queue", "alias": "", "problem_count": 13}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [{"id": 401, "title": "Kth Smallest Number in Sorted Matrix", "unique_name": "kth-smallest-number-in-sorted-matrix", "level": 2, "accepted_rate": 25}, {"id": 104, "title": "Merge K Sorted Lists ", "unique_name": "merge-k-sorted-lists", "level": 2, "accepted_rate": 30}, {"id": 4, "title": "Ugly Number II", "unique_name": "ugly-number-ii", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "[1,2,3,4]", "total_accepted": 331, "total_submissions": 834, "contest": "", "has_followed_by": false}, "kth-prime-number": {"id": 792, "unique_name": "kth-prime-number", "user_status": null, "title": "Kth Prime Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Given the prime number `n`, output the number of prime numbers", "notice": "* `n <= 100000`\r\n* The prime number is defined as a natural number greater than 1, and there are no other factors except 1 and it itself.", "clarification": "", "example": "Given n = `3`, return `2`.\r\n```\r\nexplanation:\r\n[2,3,5], 3 is the second prime number.\r\n```\r\n\r\nGiven n = `11`, return `5`.\r\n```\r\nexplanation:\r\n[2,3,5,7,11], 11 is the fifth prime number.\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 235, "title": "Prime Factorization", "unique_name": "prime-factorization", "level": 0, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "11", "total_accepted": 579, "total_submissions": 1586, "contest": "", "has_followed_by": false}, "intersection-of-arrays": {"id": 793, "unique_name": "intersection-of-arrays", "user_status": null, "title": "Intersection of Arrays", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "Give a number of arrays, find their intersection, and output their intersection size.\r\n\r\n", "notice": "* The total number of all array elements is not more than `500000`.\r\n* There are no duplicated elements in each array.", "clarification": "", "example": "Given `[[1,2,3],[3,4,5],[3,9,10]]`, return `1`\r\n```\r\nexplanation:\r\nOnly element 3 appears in all arrays, the intersection is [3], and the size is 1.\r\n```\r\n\r\nGiven `[[1,2,3,4],[1,2,5,6,7][9,10,1,5,2,3]]`, return `2`\r\n```\r\nexplanation:\r\nOnly element 1,2 appear in all arrays, the intersection is [1,2], the size is 2.\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2,3],[3,4,5],[3,9,10]]", "total_accepted": 727, "total_submissions": 1569, "contest": "", "has_followed_by": false}, "sliding-puzzle-ii": {"id": 794, "title": "Sliding Puzzle II", "unique_name": "sliding-puzzle-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "4-way-unique-paths": {"id": 795, "title": "4-Way Unique Paths", "unique_name": "4-way-unique-paths", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "open-the-lock": {"id": 796, "unique_name": "open-the-lock", "user_status": null, "title": "Open the Lock", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 49, "description": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\r\n\r\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\r\n\r\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\r\n\r\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.", "notice": "1.The length of deadends will be in the range `[1, 500]`.\r\n2.`target` will not be in the list `deadends`.\r\n3.Every string in `deadends` and the string `target` will be a string of 4 digits from the 10,000 possibilities '0000' to '9999'.", "clarification": "", "example": "Example 1:\r\n```\r\nGiven deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\r\nReturn 6\r\nExplanation:\r\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\r\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\r\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\r\n```\r\nExample 2:\r\n```\r\nGiven deadends = [\"8888\"], target = \"0009\"\r\nReturn 1\r\nExplanation:\r\nWe can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 794, "title": "Sliding Puzzle II", "unique_name": "sliding-puzzle-ii", "level": 3, "accepted_rate": 37}, {"id": 630, "title": "Knight Shortest Path II", "unique_name": "knight-shortest-path-ii", "level": 2, "accepted_rate": 30}, {"id": 115, "title": "Unique Paths II", "unique_name": "unique-paths-ii", "level": 1, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"]\n\"0202\"", "total_accepted": 228, "total_submissions": 461, "contest": "", "has_followed_by": false}, "reach-a-number": {"id": 797, "unique_name": "reach-a-number", "user_status": null, "title": "Reach a Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "You are standing at position `0` on an infinite number line. There is a goal at position `target`.\r\n\r\nOn each move, you can either go left or right. During the n-th move (starting from 1), you take n steps.\r\n\r\nReturn the minimum number of steps required to reach the destination.", "notice": "`target` will be a non-zero integer in the range `[-10^9, 10^9]`.", "clarification": "", "example": "Example 1:\r\n```\r\nGiven target = 3\r\nReturn 2\r\nExplanation:\r\nOn the first move we step from 0 to 1.\r\nOn the second step we step from 1 to 3.\r\n```\r\n\r\nExample 2:\r\n```\r\nGiven target = 2\r\nReturn 3\r\nExplanation:\r\nOn the first move we step from 0 to 1.\r\nOn the second move we step  from 1 to -1.\r\nOn the third move we step from -1 to 2.\r\n```", "challenge": "", "tags": [{"id": 107, "name": "inmobi", "cn_name": "inmobi", "type": 3, "unique_name": "inmobi", "alias": "", "problem_count": 1}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 663, "title": "Walls and Gates", "unique_name": "walls-and-gates", "level": 2, "accepted_rate": 36}, {"id": 611, "title": "Knight Shortest Path", "unique_name": "knight-shortest-path", "level": 2, "accepted_rate": 25}, {"id": 69, "title": "Binary Tree Level Order Traversal", "unique_name": "binary-tree-level-order-traversal", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 270, "total_submissions": 886, "contest": "", "has_followed_by": false}, "backpack-vii": {"id": 798, "title": "Backpack VII", "unique_name": "backpack-vii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "backpack-viii": {"id": 799, "title": "Backpack VIII", "unique_name": "backpack-viii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "backpack-ix": {"id": 800, "title": "Backpack IX", "unique_name": "backpack-ix", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "backpack-x": {"id": 801, "title": "Backpack X", "unique_name": "backpack-x", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 48, "title": "Backpack", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-03-16_at_1.39.45_AM.png", "privacy": "Password required"}], "contest_set": [{"id": 20, "title": "Weekly Mock Interview Contest #10.2 (For Backpack Special)", "cover": "https://lintcode-media.s3.amazonaws.com/backpack.png", "start_at": "2018-03-25T01:30:00Z"}], "no_permission": true}, "sudoku-solver": {"id": 802, "unique_name": "sudoku-solver", "user_status": null, "title": "Sudoku Solver", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "Write a program to solve a Sudoku puzzle by filling the empty cells.\r\n\r\nEmpty cells are indicated by the number `0`.\r\n\r\nYou may assume that there will be only one unique solution.\r\n", "notice": "", "clarification": "", "example": "Given a Sudoku puzzle:\r\n![](https://lintcode-media.s3.amazonaws.com/problem/250px-Sudoku-by-L2G-20050714.svg.png \"\")\r\nReturn its solution:\r\n![](https://lintcode-media.s3.amazonaws.com/problem/250px-Sudoku-by-L2G-20050714_solution.svg.png \"\")", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 635, "title": "Boggle Game", "unique_name": "boggle-game", "level": 3, "accepted_rate": 20}, {"id": 33, "title": "N-Queens", "unique_name": "n-queens", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[0,0,9,7,4,8,0,0,0],[7,0,0,0,0,0,0,0,0],[0,2,0,1,0,9,0,0,0],[0,0,7,0,0,0,2,4,0],[0,6,4,0,1,0,5,9,0],[0,9,8,0,0,0,3,0,0],[0,0,0,8,0,3,0,2,0],[0,0,0,0,0,0,0,0,6],[0,0,0,2,7,5,9,0,0]]", "total_accepted": 136, "total_submissions": 461, "contest": "", "has_followed_by": false}, "shortest-distance-from-all-buildings": {"id": 803, "unique_name": "shortest-distance-from-all-buildings", "user_status": null, "title": "Shortest Distance from All Buildings", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 46, "description": "You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values **0**, **1** or **2**, where:\r\n\r\n    \u00b7Each **0** marks an empty land which you can pass by freely.\r\n    \u00b7Each **1** marks a building which you cannot pass through.\r\n    \u00b7Each **2** marks an obstacle which you cannot pass through.", "notice": "", "clarification": "", "example": "For example, given three buildings at `(0,0)`, `(0,4)`, `(2,2)`, and an obstacle at `(0,2)`:\r\n```\r\n1 - 0 - 2 - 0 - 1\r\n|   |   |   |   |\r\n0 - 0 - 0 - 0 - 0\r\n|   |   |   |   |\r\n0 - 0 - 1 - 0 - 0\r\n```\r\nThe point `(1,2)` is an ideal empty land to build a house, as the total travel distance of `3+3+1=7` is minimal. So return `7`.", "challenge": "", "tags": [{"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 912, "title": "Best Meeting Point", "unique_name": "best-meeting-point", "level": 3, "accepted_rate": 43}, {"id": 663, "title": "Walls and Gates", "unique_name": "walls-and-gates", "level": 2, "accepted_rate": 36}, {"id": 573, "title": "Build Post Office II", "unique_name": "build-post-office-ii", "level": 3, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[[1,1,1,1,1,0],[0,0,0,0,0,1],[0,1,1,0,0,1],[1,0,0,1,0,1],[1,0,1,0,0,1],[1,0,0,0,0,1],[0,1,1,1,1,0]]", "total_accepted": 179, "total_submissions": 385, "contest": "", "has_followed_by": false}, "number-of-distinct-islands-ii": {"id": 804, "unique_name": "number-of-distinct-islands-ii", "user_status": null, "title": "Number of Distinct Islands II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "Given a non-empty 2D array `grid` of `0`'s and `1`'s, an **island** is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\r\n\r\nCount the number of **distinct** islands. An island is considered to be the same as another if they have the same shape, or have the same shape after **rotation** (90, 180, or 270 degrees only) or **reflection** (left/right direction or up/down direction).", "notice": "The length of each dimension in the given `grid` does not exceed `50`.", "clarification": "", "example": "Example 1:\r\n```\r\n11000\r\n10000\r\n00001\r\n00011\r\n```\r\nGiven the above grid map, return `1`. \r\n\r\nNotice that:\r\n```\r\n11\r\n1\r\n```\r\nand\r\n```\r\n 1\r\n11\r\n```\r\nare considered **same** island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.\r\n\r\nExample 2:\r\n```\r\n11100\r\n10001\r\n01001\r\n01110\r\n```\r\nGiven the above grid map, return `2`.\r\n\r\nHere are the two **distinct** islands:\r\n```\r\n111\r\n1\r\n```\r\nand\r\n```\r\n1\r\n1\r\n```\r\nNotice that:\r\n```\r\n111\r\n1\r\n```\r\nand\r\n```\r\n1\r\n111\r\n```\r\nare considered **same** island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 860, "title": "Number of Distinct Islands", "unique_name": "number-of-distinct-islands", "level": 2, "accepted_rate": 41}, {"id": 804, "title": "Number of Distinct Islands II", "unique_name": "number-of-distinct-islands-ii", "level": 3, "accepted_rate": 35}, {"id": 677, "title": "Number of Big Islands", "unique_name": "number-of-big-islands", "level": 2, "accepted_rate": 23}, {"id": 434, "title": "Number of Islands II", "unique_name": "number-of-islands-ii", "level": 3, "accepted_rate": 19}, {"id": 433, "title": "Number of Islands", "unique_name": "number-of-islands", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,1],[0,0,0,1,1]]", "total_accepted": 124, "total_submissions": 342, "contest": "", "has_followed_by": false}, "maximum-association-set": {"id": 805, "title": "Maximum Association Set", "unique_name": "maximum-association-set", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [{"id": 48, "title": "\u7b2c 35 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-08-05T01:30:00Z"}], "no_permission": true}, "buy-fruits": {"id": 806, "title": "Buy Fruits", "unique_name": "buy-fruits", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "palindrome-number-ii": {"id": 807, "title": "Palindrome Number II", "unique_name": "palindrome-number-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [{"id": 13, "title": "Weekly Mock Interview Contest #4 (For Amazon OA)", "cover": "https://lintcode-media.s3.amazonaws.com/amazon.png", "start_at": "2018-02-10T02:30:00Z"}], "no_permission": true}, "movie-network": {"id": 808, "title": "Movie Network", "unique_name": "movie-network", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "find-anagram-mappings": {"id": 813, "unique_name": "find-anagram-mappings", "user_status": null, "title": "Find Anagram Mappings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 52, "description": "Given two lists `A` and `B`, and `B` is an anagram of `A`. `B` is an anagram of `A` means `B` is made by randomizing the order of the elements in `A`.\r\n\r\nWe want to find an _index mapping_ `P`, from `A` to `B`. `A` mapping `P[i] = j` means the `ith` element in `A` appears in `B` at index `j`.\r\n\r\nThese lists `A` and `B` may contain duplicates. If there are multiple answers, output any of them.\r\n\r\nhttps://leetcode.com/problems/find-anagram-mappings/description/", "notice": "* `A, B` have equal lengths in range `[1, 100]`.\r\n* `A[i]`, `B[i]` are integers in range `[0, 10^5]`.", "clarification": "", "example": "Given A = `[12, 28, 46, 32, 50]` and B = `[50, 12, 32, 46, 28]`, return `[1, 4, 3, 2, 0]`.\r\n```\r\nExplanation:\r\nas P[0] = 1 because the 0th element of A appears at B[1], and P[1] = 4 because the 1st element of A appears at B[4], and so on.\r\n```", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 772, "title": "Group Anagrams", "unique_name": "group-anagrams", "level": 2, "accepted_rate": 41}, {"id": 171, "title": "Anagrams", "unique_name": "anagrams", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "[12, 28, 46, 32, 50]\n[50, 12, 32, 46, 28]", "total_accepted": 558, "total_submissions": 1052, "contest": "", "has_followed_by": false}, "shortest-path-in-undirected-graph": {"id": 814, "unique_name": "shortest-path-in-undirected-graph", "user_status": null, "title": "Shortest Path in Undirected Graph", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 48, "description": "Give an `undirected graph`, in which each edge's length is `1`, and give `two` nodes from the graph. We need to find the `length` of `the shortest path` between the given `two` nodes.", "notice": "", "clarification": "", "example": "Given graph = `{1,2,4#2,1,4#3,5#4,1,2#5,3}`, and nodeA = `3`, nodeB = `5`.\r\n```\r\n1------2  3\r\n \\     |  | \r\n  \\    |  |\r\n   \\   |  |\r\n    \\  |  |\r\n      4   5\r\n```\r\nreturn `1`.", "challenge": "", "tags": [{"id": 83, "name": "Undirected Graph", "cn_name": "Undirected Graph", "type": 2, "unique_name": "undirected-graph", "alias": "", "problem_count": 4}], "related_problems": [{"id": 816, "title": "Traveling Salesman", "unique_name": "traveling-salesman", "level": 3, "accepted_rate": 38}, {"id": 618, "title": "Search Graph Nodes", "unique_name": "search-graph-nodes", "level": 2, "accepted_rate": 46}, {"id": 178, "title": "Graph Valid Tree", "unique_name": "graph-valid-tree", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "{1,2,4#2,1,4#3,5#4,1,2#5,3}\n3\n5", "total_accepted": 595, "total_submissions": 1230, "contest": "", "has_followed_by": false}, "course-schedule-iv": {"id": 815, "title": "Course Schedule IV", "unique_name": "course-schedule-iv", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "traveling-salesman": {"id": 816, "title": "Traveling Salesman", "unique_name": "traveling-salesman", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "range-sum-query-2d-mutable": {"id": 817, "unique_name": "range-sum-query-2d-mutable", "user_status": null, "title": "Range Sum Query 2D - Mutable", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 38, "description": "Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).", "notice": "1.The matrix is only modifiable by the update function.\r\n2.You may assume the number of calls to update and sumRegion function is distributed evenly.\r\n3.You may assume that row1 \u2264 row2 and col1 \u2264 col2.", "clarification": "", "example": "```\r\nGiven matrix = [\r\n  [3, 0, 1, 4, 2],\r\n  [5, 6, 3, 2, 1],\r\n  [1, 2, 0, 1, 5],\r\n  [4, 1, 0, 1, 7],\r\n  [1, 0, 3, 0, 5]\r\n]\r\n\r\nsumRegion(2, 1, 4, 3) -> 8\r\nupdate(3, 2, 2)\r\nsumRegion(2, 1, 4, 3) -> 10\r\n```", "challenge": "", "tags": [{"id": 88, "name": "Binary Indexed Tree", "cn_name": "Binary Indexed Tree", "type": 1, "unique_name": "binary-indexed-tree", "alias": "Fenwick Tree", "problem_count": 4}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 943, "title": "Range Sum Query - Immutable", "unique_name": "range-sum-query-immutable", "level": 1, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]])\nsumRegion(2, 1, 4, 3)\nupdate(3, 2, 2)\nsumRegion(2, 1, 4, 3)", "total_accepted": 436, "total_submissions": 1118, "contest": "", "has_followed_by": false}, "subset-with-target": {"id": 818, "title": "Subset With Target", "unique_name": "subset-with-target", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "word-sorting": {"id": 819, "title": "Word Sorting", "unique_name": "word-sorting", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [{"id": 48, "title": "\u7b2c 35 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-08-05T01:30:00Z"}], "no_permission": true}, "rectangle": {"id": 820, "title": "Rectangle", "unique_name": "rectangle", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [{"id": 48, "title": "\u7b2c 35 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-08-05T01:30:00Z"}], "no_permission": true}, "time-intersection": {"id": 821, "title": "Time Intersection", "unique_name": "time-intersection", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [{"id": 41, "title": "Weekly Mock Interview Contest #25 (For Facebook Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/fb.png", "start_at": "2018-07-07T01:30:00Z"}, {"id": 14, "title": "Weekly Mock Interview Contest #5 (For Facebook Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/fb.png", "start_at": "2018-02-17T02:30:00Z"}], "no_permission": true}, "reverse-order-storage": {"id": 822, "unique_name": "reverse-order-storage", "user_status": null, "title": "Reverse Order Storage", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 49, "description": "Give a linked list, and store the values of linked list `in reverse order` into an array.", "notice": "* You can not `change` the structure of the original linked list.", "clarification": "", "example": "Given `1 -> 2 -> 3 -> null`, return `[3,2,1]`.\r\n", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "1->2->3->null", "total_accepted": 656, "total_submissions": 1320, "contest": "", "has_followed_by": false}, "input-stream": {"id": 823, "title": "Input Stream", "unique_name": "input-stream", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 15, "title": "Weekly Mock Interview Contest #6 (For Google Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/google.png", "start_at": "2018-02-24T02:30:00Z"}], "no_permission": true}, "single-number-iv": {"id": 824, "title": "Single Number IV", "unique_name": "single-number-iv", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 48, "title": "\u7b2c 35 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-08-05T01:30:00Z"}, {"id": 26, "title": "\u7b2c 33 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-04-21T19:00:00Z"}], "no_permission": true}, "bus-station": {"id": 825, "title": "Bus Station", "unique_name": "bus-station", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "computer-maintenance": {"id": 826, "title": "Computer Maintenance", "unique_name": "computer-maintenance", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "word-pattern": {"id": 828, "unique_name": "word-pattern", "user_status": null, "title": "Word Pattern", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Given a `pattern` and a string `str`, find if `str` follows the same pattern.\r\n\r\nHere **follow** means a full match, such that there is a bijection between a letter in `pattern` and a **non-empty** word in `str`.", "notice": "You may assume `pattern` contains only lowercase letters, and `str` contains lowercase letters separated by a single space.", "clarification": "", "example": "Given pattern = `\"abba\"`, str = `\"dog cat cat dog\"`, return `true`.\r\nGiven pattern = `\"abba\"`, str = `\"dog cat cat fish\"`, return `false`.\r\nGiven pattern = `\"aaaa\"`, str = `\"dog cat cat dog\"`, return `false`.\r\nGiven pattern = `\"abba\"`, str = `\"dog dog dog dog\"`, return `false`.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 829, "title": "Word Pattern II", "unique_name": "word-pattern-ii", "level": 3, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "\"aa\"\n\"bog bod\"", "total_accepted": 855, "total_submissions": 2351, "contest": "", "has_followed_by": false}, "word-pattern-ii": {"id": 829, "unique_name": "word-pattern-ii", "user_status": null, "title": "Word Pattern II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 36, "description": "Given a `pattern` and a string `str`, find if `str` follows the same pattern.\r\n\r\nHere **follow** means a full match, such that there is a [bijection](https://baike.baidu.com/item/%E5%8F%8C%E5%B0%84/942799?fr=aladdin \"bijection\") between a letter in `pattern` and a **non-empty** substring in `str`.(i.e if `a` corresponds to `s`, then `b` cannot correspond to `s`. For example, given pattern = `\"ab\"`, str = `\"ss\"`, return `false`.)", "notice": "You may assume both `pattern` and `str` contains only lowercase letters.", "clarification": "", "example": "Given pattern = `\"abab\"`, str = `\"redblueredblue\"`, return `true`.\r\nGiven pattern = `\"aaaa\"`, str = `\"asdasdasdasd\"`, return `true`.\r\nGiven pattern = `\"aabb\"`, str = `\"xyzabcxzyabc\"`, return `false`.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 828, "title": "Word Pattern", "unique_name": "word-pattern", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "\"d\"\n\"ef\"", "total_accepted": 1161, "total_submissions": 3141, "contest": "", "has_followed_by": false}, "string-sort": {"id": 830, "title": "String Sort", "unique_name": "string-sort", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 37, "title": "Bloomberg", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Bloomberg-Logo-1.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "3sum-ii": {"id": 831, "title": "3Sum II", "unique_name": "3sum-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 37, "title": "Bloomberg", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Bloomberg-Logo-1.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "count-negative-number": {"id": 832, "title": "Count Negative Number", "unique_name": "count-negative-number", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 37, "title": "Bloomberg", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Bloomberg-Logo-1.jpeg", "privacy": "Password required"}], "contest_set": [{"id": 16, "title": "Weekly Mock Interview Contest #7 (For Bloomberg Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/Bloomberg.png", "start_at": "2018-03-03T02:30:00Z"}], "no_permission": true}, "process-sequence": {"id": 833, "title": "Process Sequence", "unique_name": "process-sequence", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 37, "title": "Bloomberg", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Bloomberg-Logo-1.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "remove-duplicate-letters": {"id": 834, "unique_name": "remove-duplicate-letters", "user_status": null, "title": "Remove Duplicate Letters", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 30, "description": "Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.", "notice": "", "clarification": "", "example": "Given `\"bcabc\"`\r\nReturn `\"abc\"`\r\n\r\nGiven `\"cbacdcbc\"`\r\nReturn `\"acdb\"`", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"bcabc\"", "total_accepted": 259, "total_submissions": 861, "contest": "", "has_followed_by": false}, "hamming-distance": {"id": 835, "unique_name": "hamming-distance", "user_status": null, "title": "Hamming Distance", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 67, "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\r\n\r\nGiven two integers x and y, calculate the Hamming distance.", "notice": "0 \u00e2\u2030\u00a4 `x`, `y` < 2^31.", "clarification": "", "example": "Input: x = 1, y = 4\r\n\r\nOutput: 2", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 1217, "title": "Total Hamming Distance", "unique_name": "total-hamming-distance", "level": 2, "accepted_rate": 59}], "comment_count": 0, "testcase_sample": "1\n4", "total_accepted": 371, "total_submissions": 548, "contest": "", "has_followed_by": false}, "partition-to-k-equal-sum-subsets": {"id": 836, "unique_name": "partition-to-k-equal-sum-subsets", "user_status": null, "title": "Partition to K Equal Sum Subsets", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.", "notice": "1.1 <= k <= len(nums) <= 16.\r\n2.0 < nums[i] < 10000", "clarification": "", "example": "```\r\nInput: nums = [4, 3, 2, 3, 5, 2, 1], k = 4\r\nOutput: True\r\nExplanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\r\n```", "challenge": "", "tags": [{"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4, 3, 2, 3, 5, 2, 1]\n4", "total_accepted": 186, "total_submissions": 447, "contest": "", "has_followed_by": false}, "palindromic-substrings": {"id": 837, "unique_name": "palindromic-substrings", "user_status": null, "title": "Palindromic Substrings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 47, "description": "Given a string, your task is to count how many palindromic substrings in this string.\r\n\r\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.", "notice": "The input string length won't exceed 1000", "clarification": "", "example": "```\nInput: \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n```", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"abc\"", "total_accepted": 361, "total_submissions": 761, "contest": "", "has_followed_by": false}, "subarray-sum-equals-k": {"id": 838, "unique_name": "subarray-sum-equals-k", "user_status": null, "title": "Subarray Sum Equals K", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 28, "description": "Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.", "notice": "", "clarification": "", "example": "```\nInput:nums = [1,1,1], k = 2\nOutput: 2\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,1]\n2", "total_accepted": 306, "total_submissions": 1065, "contest": "", "has_followed_by": false}, "merge-two-sorted-interval-lists": {"id": 839, "unique_name": "merge-two-sorted-interval-lists", "user_status": null, "title": "Merge Two Sorted Interval Lists", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 33, "description": "Merge two sorted (ascending) lists of interval and return it as a new sorted list. The new sorted list should be made by splicing together the intervals of the two lists and sorted in ascending order.", "notice": "* The intervals in the given list do not overlap.\r\n* The intervals in different lists may overlap. ", "clarification": "", "example": "Given list1 = `[(1,2),(3,4)]` and list2 = `[(2,3),(5,6)]`, return `[(1,4),(5,6)]`.\r\n", "challenge": "", "tags": [{"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 23, "name": "Sorted Array", "cn_name": "Sorted Array", "type": 1, "unique_name": "sorted-array", "alias": "", "problem_count": 11}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 577, "title": "Merge K Sorted Interval Lists", "unique_name": "merge-k-sorted-interval-lists", "level": 2, "accepted_rate": 38}, {"id": 486, "title": "Merge K Sorted Arrays", "unique_name": "merge-k-sorted-arrays", "level": 2, "accepted_rate": 29}, {"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}, {"id": 165, "title": "Merge Two Sorted Lists", "unique_name": "merge-two-sorted-lists", "level": 1, "accepted_rate": 39}, {"id": 104, "title": "Merge K Sorted Lists ", "unique_name": "merge-k-sorted-lists", "level": 2, "accepted_rate": 30}, {"id": 64, "title": "Merge Sorted Array", "unique_name": "merge-sorted-array", "level": 1, "accepted_rate": 34}, {"id": 6, "title": "Merge Two Sorted Arrays", "unique_name": "merge-two-sorted-arrays", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[(1,2),(3,4)]\n[(2,3),(5,6)]\n", "total_accepted": 1121, "total_submissions": 3321, "contest": "", "has_followed_by": false}, "range-sum-query-mutable": {"id": 840, "unique_name": "range-sum-query-mutable", "user_status": null, "title": "Range Sum Query - Mutable", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "Given an integer array nums, find the sum of the elements between indices i and j (i \u00e2\u2030\u00a4 j), inclusive.\r\n\r\nThe update(i, val) function modifies nums by updating the element at index i to val.", "notice": "1.The array is only modifiable by the update function.\r\n2.You may assume the number of calls to update and sumRange function is distributed evenly.", "clarification": "", "example": "```\r\nGiven nums = [1, 3, 5]\r\n\r\nsumRange(0, 2) -> 9\r\nupdate(1, 2)\r\nsumRange(0, 2) -> 8\r\n```", "challenge": "", "tags": [{"id": 88, "name": "Binary Indexed Tree", "cn_name": "Binary Indexed Tree", "type": 1, "unique_name": "binary-indexed-tree", "alias": "Fenwick Tree", "problem_count": 4}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 943, "title": "Range Sum Query - Immutable", "unique_name": "range-sum-query-immutable", "level": 1, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "NumArray([0,9,5,7,3])\nsumRange(4, 4)\nsumRange(2, 4)\nsumRange(3, 3)\nupdate(4, 5)\nupdate(1, 7)\nupdate(0, 8)\nsumRange(1, 2)\nupdate(1, 9)\nsumRange(4, 4)\nupdate(3, 4)", "total_accepted": 970, "total_submissions": 2227, "contest": "", "has_followed_by": false}, "string-replace": {"id": 841, "title": "String Replace", "unique_name": "string-replace", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "origami": {"id": 842, "title": "Origami", "unique_name": "origami", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "digital-flip": {"id": 843, "title": "Digital Flip", "unique_name": "digital-flip", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}, {"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "number-pair-statistics": {"id": 844, "title": "Number Pair Statistics", "unique_name": "number-pair-statistics", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [{"id": 17, "title": "Weekly Mock Interview Contest #8 (For Microsoft Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/microsoft.png", "start_at": "2018-03-10T02:30:00Z"}], "no_permission": true}, "greatest-common-divisor": {"id": 845, "unique_name": "greatest-common-divisor", "user_status": null, "title": "Greatest Common Divisor", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 67, "description": "Given two numbers, number `a` and number `b`. Find the `greatest common divisor` of the given two numbers.", "notice": "In mathematics, the [greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor \"Greatest Common Divisor\") (gcd) of two or more integers, which are not all zero, is the largest positive integer that divides each of the integers.", "clarification": "", "example": "Given a = `10`, b = `15`, return `5`.\r\nGiven a = `15`, b = `30`, return `15`.", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "10\n15", "total_accepted": 625, "total_submissions": 925, "contest": "", "has_followed_by": false}, "multi-keyword-sort": {"id": 846, "unique_name": "multi-keyword-sort", "user_status": null, "title": "Multi-keyword Sort", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "Given `n` students(number from `1` to `n`) and their examination grades. There are two keywords, examination grades and student id. Order the array according to the first keyword (`Descending`), if the first key is the same, it is sorted by the second keyword (`ascending`).\r\n", "notice": "", "clarification": "", "example": "Given  `[[2,50],[1,50],[3,100]]`,\r\nreturn  `[[3,100],[1,50],[2,50]]`", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}], "related_problems": [{"id": 464, "title": "Sort Integers II", "unique_name": "sort-integers-ii", "level": 1, "accepted_rate": 29}, {"id": 463, "title": "Sort Integers", "unique_name": "sort-integers", "level": 0, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[[7,66],[4,77],[3,63],[5,81],[1,88],[9,86],[6,88],[2,82],[8,55],[10,95]]", "total_accepted": 479, "total_submissions": 1139, "contest": "", "has_followed_by": false}, "minimize-max-distance-to-gas-station": {"id": 848, "title": "Minimize Max Distance to Gas Station", "unique_name": "minimize-max-distance-to-gas-station", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "basic-calculator-iii": {"id": 849, "unique_name": "basic-calculator-iii", "user_status": null, "title": "Basic Calculator III", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 41, "description": "Implement a basic calculator to evaluate a simple expression string.\n\nThe expression string may contain open `(` and closing parentheses `)`, the plus `+` or minus sign `-`, `non-negative` integers and empty spaces .\n\nThe expression string contains only non-negative integers, `+`, `-`, `*`, `/` operators , open `(` and closing parentheses `)` and empty spaces . The integer division should truncate toward zero.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-2147483648, 2147483647]`", "notice": "Do not use the `eval` built-in library function.", "clarification": "", "example": "```\n\"1 + 1\" = 2\n\" 6-4 / 2 \" = 4\n\"2*(5+5*2)/3+(6/2+8)\" = 21\n\"(2+6* 3+5- (3*14/7+2)*5)+3\"=-12\n```", "challenge": "", "tags": [{"id": 115, "name": "Jingchi", "cn_name": "Jingchi", "type": 3, "unique_name": "jingchi", "alias": "", "problem_count": 1}, {"id": 113, "name": "Hulu", "cn_name": "Hulu", "type": 3, "unique_name": "hulu", "alias": "", "problem_count": 11}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 101, "name": "Houzz", "cn_name": "Houzz", "type": 3, "unique_name": "houzz", "alias": "", "problem_count": 2}, {"id": 114, "name": "DoorDash", "cn_name": "DoorDash", "type": 3, "unique_name": "doordash", "alias": "", "problem_count": 1}], "related_problems": [{"id": 981, "title": "Basic Calculator IV", "unique_name": "basic-calculator-iv", "level": 3, "accepted_rate": 81}, {"id": 980, "title": "Basic Calculator II", "unique_name": "basic-calculator-ii", "level": 2, "accepted_rate": 42}, {"id": 978, "title": "Basic Calculator", "unique_name": "basic-calculator", "level": 3, "accepted_rate": 52}], "comment_count": 0, "testcase_sample": "\"1 + 1\"", "total_accepted": 261, "total_submissions": 634, "contest": "", "has_followed_by": false}, "pour-water": {"id": 851, "unique_name": "pour-water", "user_status": null, "title": "Pour Water", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "We are given an elevation map, `heights[i]` representing the height of the terrain at that index. The width at each index is 1. After `V` units of water fall at index `K`, how much water is at each index?\r\n\r\nWater first drops at index `K` and rests on top of the highest terrain or water at that index. Then, it flows according to the following rules:\r\n\r\n* If the droplet would eventually fall by moving left, then move left.\r\n* Otherwise, if the droplet would eventually fall by moving right, then move right.\r\n* Otherwise, rise at it's current position.\r\n\r\nHere, \"eventually fall\" means that the droplet will eventually be at a lower level if it moves in that direction. Also, \"level\" means the height of the terrain plus any water in that column.\r\nWe can assume there's infinitely high terrain on the two sides out of bounds of the array. Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.", "notice": "1.heights will have length in [1, 100] and contain integers in [0, 99].\r\n2.V will be in range [0, 2000].\r\n3.K will be in range [0, heights.length - 1].", "clarification": "", "example": "Example 1:\r\n```\r\nGiven: heights = [2,1,1,2,1,2,2], V = 4, K = 3\r\nReturn: [2,2,2,3,2,2,2]\r\nExplanation:\r\n#       #\r\n#       #\r\n##  # ###\r\n#########\r\n 0123456    <- index\r\n\r\nThe first drop of water lands at index K = 3:\r\n\r\n#       #\r\n#   w   #\r\n##  # ###\r\n#########\r\n 0123456    \r\n\r\nWhen moving left or right, the water can only move to the same level or a lower level.\r\n(By level, we mean the total height of the terrain plus any water in that column.)\r\nSince moving left will eventually make it fall, it moves left.\r\n(A droplet \"made to fall\" means go to a lower height than it was at previously.)\r\n\r\n#       #\r\n#       #\r\n## w# ###\r\n#########\r\n 0123456    \r\n\r\nSince moving left will not make it fall, it stays in place.  The next droplet falls:\r\n\r\n#       #\r\n#   w   #\r\n## w# ###\r\n#########\r\n 0123456  \r\n\r\nSince the new droplet moving left will eventually make it fall, it moves left.\r\nNotice that the droplet still preferred to move left,\r\neven though it could move right (and moving right makes it fall quicker.)\r\n\r\n#       #\r\n#  w    #\r\n## w# ###\r\n#########\r\n 0123456  \r\n\r\n#       #\r\n#       #\r\n##ww# ###\r\n#########\r\n 0123456  \r\n\r\nAfter those steps, the third droplet falls.\r\nSince moving left would not eventually make it fall, it tries to move right.\r\nSince moving right would eventually make it fall, it moves right.\r\n\r\n#       #\r\n#   w   #\r\n##ww# ###\r\n#########\r\n 0123456  \r\n\r\n#       #\r\n#       #\r\n##ww#w###\r\n#########\r\n 0123456  \r\n\r\nFinally, the fourth droplet falls.\r\nSince moving left would not eventually make it fall, it tries to move right.\r\nSince moving right would not eventually make it fall, it stays in place:\r\n\r\n#       #\r\n#   w   #\r\n##ww#w###\r\n#########\r\n 0123456  \r\n\r\nThe final answer is [2,2,2,3,2,2,2]:\r\n\r\n    #    \r\n ####### \r\n ####### \r\n 0123456 \r\n```\r\nExample 2:\r\n```\r\nGiven: heights = [1,2,3,4], V = 2, K = 2\r\nReturn: [2,3,3,4]\r\nExplanation:\r\nThe last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.\r\n```\r\nExample 3:\r\n```\r\nGiven: heights = [3,1,3], V = 5, K = 1\r\nReturn: [4,4,4]\r\n```", "challenge": "", "tags": [{"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}], "related_problems": [], "comment_count": 0, "testcase_sample": "[2,1,1,2,1,2,2]\n4\n3", "total_accepted": 134, "total_submissions": 267, "contest": "", "has_followed_by": false}, "number-of-corner-rectangles": {"id": 853, "unique_name": "number-of-corner-rectangles", "user_status": null, "title": "Number Of Corner Rectangles", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "Given a grid where each entry is only 0 or 1, find the number of corner rectangles.\r\n\r\nA corner rectangle is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.", "notice": "1.The number of rows and columns of grid will each be in the range [1, 200].\r\n2.Each grid[i][j] will be either 0 or 1.\r\n3.The number of 1s in the grid will be at most 6000.", "clarification": "", "example": "Example 1:\r\n```\r\nGiven: grid = \r\n[[1, 0, 0, 1, 0],\r\n [0, 0, 1, 0, 1],\r\n [0, 0, 0, 1, 0],\r\n [1, 0, 1, 0, 1]]\r\nReturn: 1\r\nExplanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].\r\n```\r\nExample 2:\r\n```\r\nGiven: grid = \r\n[[1, 1, 1],\r\n [1, 1, 1],\r\n [1, 1, 1]]\r\nReturn: 9\r\nExplanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.\r\n```\r\nExample 3:\r\n```\r\nGiven: grid = \r\n[[1, 1, 1, 1]]\r\nReturn: 0\r\nExplanation: Rectangles must have four distinct corners.\r\n```", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[0,1,0],[1,0,1],[1,0,1],[0,1,0]]", "total_accepted": 298, "total_submissions": 502, "contest": "", "has_followed_by": false}, "closest-leaf-in-a-binary-tree": {"id": 854, "unique_name": "closest-leaf-in-a-binary-tree", "user_status": null, "title": "Closest Leaf in a Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Given a binary tree **where every node has a unique value**, and a target key `k`, find the value of the nearest leaf node to target `k` in the tree.If there is more than one answer, return to the `leftmost`.\r\n\r\nHere, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.", "notice": "1.root represents a binary tree with at least 1 node and at most 1000 nodes.\r\n2.Every node has a unique node.val in range [1, 1000].\r\n3.There exists some node in the given binary tree for which node.val == k.", "clarification": "", "example": "Example 1:\r\n```\r\nGiven:\r\nroot = {1, 3, 2}, k = 1\r\nDiagram of binary tree:\r\n          1\r\n         / \\\r\n        3   2\r\n\r\nReturn: 2 (or 3)\r\n\r\nExplanation: Either 2 or 3 is the nearest leaf node to the target of 1.\r\n```\r\nExample 2:\r\n```\r\nGiven:\r\nroot = {1}, k = 1\r\nReturn: 1\r\n\r\nExplanation: The nearest leaf node is the root node itself.\r\n```\r\nExample 3:\r\n```\r\nGiven:\r\nroot = {1,2,3,4,#,#,#,5,#,6}, k = 2\r\nDiagram of binary tree:\r\n             1\r\n            / \\\r\n           2   3\r\n          /\r\n         4\r\n        /\r\n       5\r\n      /\r\n     6\r\n\r\nReturn: 3\r\nExplanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 98, "name": "databricks", "cn_name": "databricks", "type": 3, "unique_name": "databricks", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,3,2}\n1", "total_accepted": 132, "total_submissions": 305, "contest": "", "has_followed_by": false}, "sentence-similarity": {"id": 856, "unique_name": "sentence-similarity", "user_status": null, "title": "Sentence Similarity", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "Given two sentences `words1`, `words2` (each represented as an array of strings), and a list of similar word pairs `pairs`, determine if two sentences are similar.\n\nFor example, `words1 = great acting skills` and `words2 = fine drama talent` are similar, if the similar word pairs are `pairs = [[\"great\", \"fine\"], [\"acting\",\"drama\"], [\"skills\",\"talent\"]]`.\n\nNote that the similarity relation is not transitive. For example, if \"great\" and \"fine\" are similar, and \"fine\" and \"good\" are similar, \"great\" and \"good\" are **not** necessarily similar.\n\nHowever, similarity is symmetric. For example, \"great\" and \"fine\" being similar is the same as \"fine\" and \"great\" being similar.\n\nAlso, a word is always similar with itself. For example, the sentences `words1 = [\"great\"], words2 = [\"great\"], pairs = []` are similar, even though there are no specified similar word pairs.\n\nFinally, sentences can only be similar if they have the same number of words. So a sentence like `words1 = [\"great\"]` can never be similar to `words2 = [\"doubleplus\",\"good\"]`.", "notice": "1.The length of words1 and words2 will not exceed 1000.\n2.The length of pairs will not exceed 2000.\n3.The length of each pairs[i] will be 2.\n4.The length of each words[i] and pairs[i][j] will be in the range [1, 20].", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"great\",\"acting\",\"skills\"]\n[\"fine\",\"drama\",\"talent\"]\n[[\"great\",\"fine\"],[\"drama\",\"acting\"],[\"skills\",\"talent\"]]", "total_accepted": 299, "total_submissions": 843, "contest": "", "has_followed_by": false}, "minimum-window-subsequence": {"id": 857, "unique_name": "minimum-window-subsequence", "user_status": null, "title": "Minimum Window Subsequence", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 38, "description": "Given strings `S` and `T`, find the minimum (contiguous) **substring** `W` of `S`, so that `T` is a **subsequence** of `W`.\r\n\r\nIf there is no such window in `S` that covers all characters in `T`, return the empty string `\"\"`. If there are multiple such minimum-length windows, return the one with the left-most starting index.", "notice": "* All the strings in the input will only contain lowercase letters.\r\n* The length of `S` will be in the range `[1, 20000]`.\r\n* The length of `T` will be in the range `[1, 100]`.", "clarification": "", "example": "Given  S = `\"abcdebdde\"`, T = `\"bde\"`\r\nReturn `\"bcde\"`\r\n```\r\nExplanation: \r\n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\r\n\"deb\" is not a smaller window because the elements of T in the window must occur in order.\r\n```", "challenge": "", "tags": [{"id": 95, "name": "eBay", "cn_name": "eBay", "type": 3, "unique_name": "ebay", "alias": "", "problem_count": 3}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 397, "title": "Longest Continuous Increasing Subsequence", "unique_name": "longest-continuous-increasing-subsequence", "level": 1, "accepted_rate": 30}, {"id": 32, "title": "Minimum Window Substring ", "unique_name": "minimum-window-substring", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"jmeqksfrsdcmsiwvaovztaqenprpvnbstl\"\n\"u\"", "total_accepted": 237, "total_submissions": 611, "contest": "", "has_followed_by": false}, "candy-crush": {"id": 858, "unique_name": "candy-crush", "user_status": null, "title": "Candy Crush", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 48, "description": "This question is about implementing a basic elimination algorithm for Candy Crush.\n\nGiven a 2D integer array `board` representing the grid of candy, different positive integers `board[i][j]` represent different types of candies. A value of `board[i][j] = 0` represents that the cell at position `(i, j)` is empty. The given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:\n\n1. If three or more candies of the same type are adjacent vertically or horizontally, \"crush\" them all at the same time - these positions become empty.\n2. After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)\n3. After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.\n4. If there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.\nYou need to perform the above rules until the board becomes stable, then return the current board.", "notice": "1. The length of `board` will be in the range [3, 50].\n2. The length of `board[i]` will be in the range [3, 50].\n3. Each `board[i][j]` will initially start as an integer in the range [1, 2000].", "clarification": "", "example": "```\nGiven board = \n[\n[110,5,112,113,114],\n[210,211,5,213,214],\n[310,311,3,313,314],\n[410,411,412,5,414],\n[5,1,512,3,3],\n[610,4,1,613,614],\n[710,1,2,713,714],\n[810,1,2,1,1],\n[1,1,2,2,2],\n[4,1,4,4,1014]\n],\nreturn \n[\n[0,0,0,0,0],\n[0,0,0,0,0],\n[0,0,0,0,0],\n[110,0,0,0,114],\n[210,0,0,0,214],\n[310,0,0,113,314],\n[410,0,0,213,414],\n[610,211,112,313,614],\n[710,311,412,613,714],\n[810,411,512,713,1014]\n]\n```\n![Explanation](http://ww3.sinaimg.cn/large/0060lm7Tly1fp5kkl8ctij30ll0eswh7.jpg \"Explanation\")", "challenge": "", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 106, "name": "Rubrik", "cn_name": "Rubrik", "type": 3, "unique_name": "rubrik", "alias": "", "problem_count": 1}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]", "total_accepted": 54, "total_submissions": 109, "contest": "", "has_followed_by": false}, "number-of-distinct-islands": {"id": 860, "unique_name": "number-of-distinct-islands", "user_status": null, "title": "Number of Distinct Islands", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Given a non-empty 2D array `grid` of 0's and 1's, an **island** is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nCount the number of **distinct** islands. An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\n\nNotice that:\n```\n11\n1\n```\nand\n```\n 1\n11\n```\nare considered different island shapes, because we do not consider reflection / rotation.", "notice": "The length of each dimension in the given `grid` does not exceed `50`.", "clarification": "", "example": "```\nGiven grid = \n[\n[1,1,0,0,0],\n[1,1,0,0,0],\n[0,0,0,1,1],\n[0,0,0,1,1]\n]\nreturn 1\n```\n```\nGiven grid = \n[\n[1,1,0,1,1],\n[1,0,0,0,0],\n[0,0,0,0,1],\n[1,1,0,1,1]\n]\nreturn 3\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 804, "title": "Number of Distinct Islands II", "unique_name": "number-of-distinct-islands-ii", "level": 3, "accepted_rate": 35}, {"id": 434, "title": "Number of Islands II", "unique_name": "number-of-islands-ii", "level": 3, "accepted_rate": 19}, {"id": 433, "title": "Number of Islands", "unique_name": "number-of-islands", "level": 1, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[[1,1,0,0,1],[1,0,0,0,0],[1,1,0,0,1],[0,1,0,1,1]]", "total_accepted": 379, "total_submissions": 913, "contest": "", "has_followed_by": false}, "k-empty-slots": {"id": 861, "unique_name": "k-empty-slots", "user_status": null, "title": "K Empty Slots", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "There is a garden with `N` slots. In each slot, there is a flower. The `N` flowers will bloom one by one in `N` days. In each day, there will be `exactly` one flower blooming and it will be in the status of blooming since then.\n\nGiven an array `flowers` consists of number from `1` to `N`. Each number in the array represents the place where the flower will open in that day.\n\nFor example, `flowers[i] = x` means that the unique flower that blooms at day `i` will be at position `x`, where `i` and `x` will be in the range from `1` to `N`.\n\nAlso given an integer `k`, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is `k` and these flowers are not blooming.\n\nIf there isn't such day, output -1.", "notice": "* The given array will be in the range `[1, 20000]`.", "clarification": "", "example": "Given flowers = `[1,3,2]`, k = `1`, return `2`.\n```\nExplanation: \nIn the second day, the first and the third flower have become blooming.\n```\nGiven flowers = `[1,2,3]`, k = `1`, return `-1`.", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1555, "title": "Flower Problem", "unique_name": "flower-problem", "level": 3, "accepted_rate": 82}], "comment_count": 0, "testcase_sample": "[1,2,3,4]\n1", "total_accepted": 281, "total_submissions": 790, "contest": "", "has_followed_by": false}, "next-closest-time": {"id": 862, "unique_name": "next-closest-time", "user_status": null, "title": "Next Closest Time", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Given a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\n\nYou may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.", "notice": "", "clarification": "", "example": "Given time = `\"19:34\"`, return `\"19:39\"`.\n```\nExplanation: \nThe next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.\n```\n\nGiven time = `\"23:59\"`, return `\"22:22\"`.\n```\nExplanation: \nThe next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"19:34\"", "total_accepted": 1322, "total_submissions": 3873, "contest": "", "has_followed_by": false}, "binary-tree-path-sum-iv": {"id": 863, "unique_name": "binary-tree-path-sum-iv", "user_status": null, "title": "Binary Tree Path Sum IV", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 55, "description": "If the depth of a tree is smaller than `5`, then this tree can be represented by a list of three-digits integers.\n\nFor each integer in this list:\n1. The hundreds digit represents the depth `D` of this node, `1 <= D <= 4`.\n2. The tens digit represents the position `P` of this node in the level it belongs to, `1 <= P <= 8`. The position is the same as that in a full binary tree.\n3. The units digit represents the value `V` of this node, `0 <= V <= 9`.\nGiven a list of `ascending` three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.", "notice": "", "clarification": "", "example": "Given nums = `[113, 215, 221]`, return `12`.\n```\nExplanation: \nThe tree that the list represents is:\n    3\n   / \\\n  5   1\n\nThe path sum is (3 + 5) + (3 + 1) = 12.\n```\n\nGiven nums = `[113, 221]`, return `4`.\n```\nExplanation: \nThe tree that the list represents is: \n    3\n     \\\n      1\n\nThe path sum is (3 + 1) = 4.\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}], "related_problems": [{"id": 376, "title": "Binary Tree Path Sum", "unique_name": "binary-tree-path-sum", "level": 1, "accepted_rate": 22}, {"id": 475, "title": "Binary Tree Maximum Path Sum II", "unique_name": "binary-tree-maximum-path-sum-ii", "level": 2, "accepted_rate": 44}, {"id": 472, "title": "Binary Tree Path Sum III", "unique_name": "binary-tree-path-sum-iii", "level": 3, "accepted_rate": 38}, {"id": 246, "title": "Binary Tree Path Sum II", "unique_name": "binary-tree-path-sum-ii", "level": 1, "accepted_rate": 28}, {"id": 94, "title": "Binary Tree Maximum Path Sum ", "unique_name": "binary-tree-maximum-path-sum", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[113, 215, 324]", "total_accepted": 163, "total_submissions": 292, "contest": "", "has_followed_by": false}, "equal-tree-partition": {"id": 864, "unique_name": "equal-tree-partition", "user_status": null, "title": "Equal Tree Partition", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "Given a binary tree with `n` nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing **exactly** one edge on the original tree.", "notice": "1. The range of tree node value is in the range of `[-100000, 100000]`.\n2. `1 <= n <= 10000`", "clarification": "", "example": "```\nGiven     \n    5\n   / \\\n  10 10\n    /  \\\n   2   3\n\nreturn True\nExplanation: \n    5\n   / \n  10\n      \nSum: 15\n\n   10\n  /  \\\n 2    3\n\nSum: 15\n```\n```\nGiven   \n    1\n   / \\\n  2  10\n    /  \\\n   2   20\n\nreturn False\n\nExplanation: \nYou can't split the tree into two trees with equal sum after removing exactly one edge on the tree.\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "{0,#,0}", "total_accepted": 256, "total_submissions": 588, "contest": "", "has_followed_by": false}, "remove-9": {"id": 865, "unique_name": "remove-9", "user_status": null, "title": "Remove 9", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 47, "description": "Start from integer 1, remove any integer that contains 9 such as 9, 19, 29...\n\nSo now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...\n\nGiven a positive integer `n`, you need to return the n-th integer after removing. Note that 1 will be the first integer.", "notice": "* n will not exceed `9 x 10^8`.", "clarification": "", "example": "Given n = `9`, return `10`.", "challenge": "", "tags": [{"id": 101, "name": "Houzz", "cn_name": "Houzz", "type": 3, "unique_name": "houzz", "alias": "", "problem_count": 2}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "88", "total_accepted": 60, "total_submissions": 123, "contest": "", "has_followed_by": false}, "coin-path": {"id": 866, "unique_name": "coin-path", "user_status": null, "title": "Coin Path", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "Given an array `A` (index starts at 1) consisting of N integers: A1, A2, ..., AN and an integer `B`. The integer B denotes that from any place (suppose the index is `i`) in the array `A`, you can jump to any one of the place in the array `A` indexed `i+1`, `i+2`, \u2026, `i+B` if this place can be jumped to. Also, if you step on the index `i`, you have to pay Ai coins. If Ai is -1, it means you can\u2019t jump to the place indexed `i` in the array.\n\nNow, you start from the place indexed `1` in the array `A`, and your aim is to reach the place indexed `N` using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed `N` using minimum coins.\n\nIf there are multiple paths with the same cost, return the lexicographically smallest such path.\n\nIf it's not possible to reach the place indexed N then you need to return an empty array.", "notice": "1. Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first `i` where Pai and Pbi differ, Pai < Pbi; when no such `i` exists, then `n` < `m`.\n2. A1 >= 0. A2, ..., AN (if exist) will in the range of `[-1, 100]`.\n3. Length of A is in the range of `[1, 1000]`.\n4. B is in the range of `[1, 100]`.", "clarification": "", "example": "Given A = `[1,2,4,-1,2]`, B = `2`, return `[1,3,5]`.\nGiven A = `[1,2,4,-1,2]`, B = `1`, return `[]`.", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 535, "title": "House Robber III", "unique_name": "house-robber-iii", "level": 2, "accepted_rate": 32}, {"id": 534, "title": "House Robber II", "unique_name": "house-robber-ii", "level": 2, "accepted_rate": 28}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5]\n2", "total_accepted": 113, "total_submissions": 321, "contest": "", "has_followed_by": false}, "4-keys-keyboard": {"id": 867, "unique_name": "4-keys-keyboard", "user_status": null, "title": "4 Keys Keyboard", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "Imagine you have a special keyboard with the following keys:\r\n\r\n`Key 1`: (A): Print one 'A' on screen.\r\n\r\n`Key 2`: (Ctrl-A): Select the whole screen.\r\n\r\n`Key 3`: (Ctrl-C): Copy selection to buffer.\r\n\r\n`Key 4`: (Ctrl-V): Print buffer on screen appending it after what has already been printed.\r\n\r\nNow, you can only press the keyboard for **N** times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.", "notice": "1. `1 <= N <= 50`\r\n2. Answers will be in the range of 32-bit signed integer.", "clarification": "", "example": "Given N = `3`, return `3`.\r\n```\r\nExplanation: \r\nWe can at most get 3 A's on screen by pressing following key sequence:\r\nA, A, A\r\n```\r\nGiven N = `7`, return `9`.\r\n```\r\nExplanation: \r\nWe can at most get 9 A's on screen by pressing following key sequence:\r\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\r\n```\r\n", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 975, "title": "2 Keys Keyboard", "unique_name": "2-keys-keyboard", "level": 2, "accepted_rate": 55}], "comment_count": 0, "testcase_sample": "6", "total_accepted": 282, "total_submissions": 634, "contest": "", "has_followed_by": false}, "maximum-average-subarray-i": {"id": 868, "unique_name": "maximum-average-subarray-i", "user_status": null, "title": "Maximum Average Subarray I", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 39, "description": "Given an array consisting of `n` integers, find the contiguous subarray of given length `k` that has the maximum average value. And you need to output the maximum average value.", "notice": "1. `1 <= k <= n <= 30,000`.\r\n2. Elements of the given array will be in the range `[-10,000, 10,000]`.", "clarification": "", "example": "Given nums = `[1,12,-5,-6,50,3]`, k = `4`, return `12.75`.\r\n```\r\nExplanation:\r\nMaximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 617, "title": "Maximum Average Subarray II", "unique_name": "maximum-average-subarray-ii", "level": 2, "accepted_rate": 19}], "comment_count": 0, "testcase_sample": "[1,12,-5,-6,50,3]\n4", "total_accepted": 674, "total_submissions": 1709, "contest": "", "has_followed_by": false}, "find-the-derangement-of-an-array": {"id": 869, "unique_name": "find-the-derangement-of-an-array", "user_status": null, "title": "Find the Derangement of An Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\r\n\r\nThere's originally an array consisting of `n` integers from `1` to `n` in ascending order, you need to find the number of derangement it can generate.\r\n\r\nAlso, since the answer may be very large, you should return the output mod `10^9 + 7`.", "notice": "* `n` is in the range of `[1, 10^6]`.", "clarification": "", "example": "Given n = `3`, return `2`.\r\n```\r\nExplanation: \r\nThe original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\r\n```", "challenge": "", "tags": [{"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "1", "total_accepted": 90, "total_submissions": 288, "contest": "", "has_followed_by": false}, "minimum-factorization": {"id": 871, "unique_name": "minimum-factorization", "user_status": null, "title": "Minimum Factorization", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 30, "description": "Given a positive integer `a`, find the smallest positive integer `b` whose multiplication of each digit equals to `a`.\r\n\r\nIf there is no answer or the answer is not fit in 32-bit signed integer, then return 0.", "notice": "", "clarification": "", "example": "Given a = `48`,  return `68`.\r\nGiven a = `15`,  return `35`.", "challenge": "", "tags": [{"id": 92, "name": "Tencent", "cn_name": "Tencent", "type": 3, "unique_name": "tencent", "alias": "", "problem_count": 2}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "48", "total_accepted": 330, "total_submissions": 1066, "contest": "", "has_followed_by": false}, "kill-process": {"id": 872, "unique_name": "kill-process", "user_status": null, "title": "Kill Process", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Given `n` processes, each process has a unique **PID (process id)** and its **PPID (parent process id)**.\r\n\r\nEach process only has one parent process, but may have one or more children processes. This is just like a tree structure. Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.\r\n\r\nWe use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID.\r\n\r\nNow given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.", "notice": "1. The given kill id is guaranteed to be one of the given PIDs.\r\n2. `n >= 1`.", "clarification": "", "example": "Given pid =  `[1, 3, 10, 5]`, ppid = `[3, 0, 5, 3]`, kill = `5`, return `[5,10]`.\r\n```\r\nExplanation: \r\n           3\r\n         /   \\\r\n        1     5\r\n             /\r\n            10\r\nKill 5 will also kill 10.\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,3,10,5]\n[3,0,5,3]\n5", "total_accepted": 213, "total_submissions": 502, "contest": "", "has_followed_by": false}, "squirrel-simulation": {"id": 873, "unique_name": "squirrel-simulation", "user_status": null, "title": "Squirrel Simulation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 63, "description": "There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the `minimal` distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most `one nut` at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.!", "notice": "1. All given positions `won't overlap`.\r\n2. The squirrel can take at most one nut at one time.\r\n3. The given positions of nuts have no order.\r\n4. Height and width are positive integers. `3 <= height * width <= 10,000`.\r\n5. The given positions contain at least one nut, only one tree and one squirrel.", "clarification": "", "example": "Given \r\nheight = `5`,\r\nwidth = `7`,\r\ntreePosition = `[2,2]`,\r\nsquirrel = `[4,4]`,\r\nnuts = `[[3,0], [2,5]]`,\r\n\r\nreturn `12`.\r\n\r\n**Explanation:**\r\n![Squirrel Simulation](https://lintcode-media.s3.amazonaws.com/problem/22431521269467_.pic_hd.jpg \"https://lintcode-media.s3.amazonaws.com/problem/22431521269467_.pic_hd.jpg\"){:height=\"200px\" width=\"400px\"}", "challenge": "", "tags": [{"id": 108, "name": "Square", "cn_name": "Square", "type": 3, "unique_name": "square", "alias": "", "problem_count": 3}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "5\n7\n[2,2]\n[4,4]\n[[3,0],[2,5]]", "total_accepted": 136, "total_submissions": 211, "contest": "", "has_followed_by": false}, "maximum-vacation-days": {"id": 874, "unique_name": "maximum-vacation-days", "user_status": null, "title": "Maximum Vacation Days", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 37, "description": "LintCode wants to give one of its best employees the option to travel among `N` cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\r\n\r\n**Rules and restrictions:**\r\n1. You can only travel among `N` cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on **Monday**.\r\n2. The cities are connected by flights. The flights are represented as a `N*N` matrix (not necessary symmetrical), called **flights** representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, **flights[i][j] = 0**; Otherwise, **flights[i][j] = 1**. Also, **flights[i][i] = 0** for all i.\r\n3. You totally have `K` weeks (**each week has 7 days**) to travel. You can only take flights at most once **per day** and can only take flights on each week's **Monday** morning. Since flight time is so short, we don't consider the impact of flight time.\r\n4. For each city, you can only have restricted vacation days in different weeks, given an `N*K` matrix called **days** representing this relationship. For the value of `days[i][j]`, it represents the maximum days you could take vacation in the city `i` in the week `j`.\r\nYou're given the **flights** matrix and **days** matrix, and you need to output the maximum vacation days you could take during `K` weeks.", "notice": "1. `N` and `K` are positive integers, which are in the range of `[1, 100]`.\r\n2. In the matrix flights, all the values are integers in the range of `[0, 1]`.\r\n3. In the matrix days, all the values are integers in the range `[0, 7]`.\r\n4. You could stay at a city beyond the number of vacation days, but you should **work** on the extra days, which won't be counted as vacation days.\r\n5. If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\r\n6. We don't consider the impact of flight hours towards the calculation of vacation days.", "clarification": "", "example": "Given flights = `[[0,1,1],[1,0,1],[1,1,0]]`, days = `[[1,3,1],[6,0,3],[3,3,3]]`, return `12`.\r\n```\r\nExplanation: \r\nAns = 6 + 3 + 3 = 12. \r\n\r\nOne of the best strategies is:\r\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. \r\n(Although you start at city 0, we could also fly to and start at other cities since it is Monday.) \r\n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\r\n3rd week : stay at city 2, and play 3 days and work 4 days.\r\n```\r\n\r\nGiven flights = `[[0,0,0],[0,0,0],[0,0,0]]`, days = `[[1,1,1],[7,7,7],[7,7,7]]`, return `3`.\r\n```\r\nExplanation: \r\nAns = 1 + 1 + 1 = 3. \r\n\r\nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. \r\nFor each week, you only have one day to play and six days to work. \r\nSo the maximum number of vacation days is 3.\r\n```\r\n\r\nGiven flights = `[[0,1,1],[1,0,1],[1,1,0]]`, days = `[[7,0,0],[0,7,0],[0,0,7]]`, return `21`.\r\n```\r\nExplanation:\r\nAns = 7 + 7 + 7 = 21\r\n\r\nOne of the best strategies is:\r\n1st week : stay at city 0, and play 7 days. \r\n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\r\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1029, "title": "Cheapest Flights Within K Stops", "unique_name": "cheapest-flights-within-k-stops", "level": 2, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "[[0,1,1],[1,0,1],[1,1,0]]\n[[1,3,1],[6,0,3],[3,3,3]]", "total_accepted": 220, "total_submissions": 588, "contest": "", "has_followed_by": false}, "longest-line-of-consecutive-one-in-matrix": {"id": 875, "unique_name": "longest-line-of-consecutive-one-in-matrix", "user_status": null, "title": "Longest Line of Consecutive One in Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 45, "description": "Given a 01 matrix `m`, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.", "notice": "The number of elements in the given matrix will not exceed `10,000`.", "clarification": "", "example": "```\r\nGiven m = \r\n[\r\n    [0,1,1,0],\r\n    [0,1,1,0],\r\n    [0,0,0,1]\r\n]\r\nreturn 3\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[0,1,1,0],[0,1,1,0],[0,0,0,1]]", "total_accepted": 191, "total_submissions": 421, "contest": "", "has_followed_by": false}, "split-concatenated-strings": {"id": 876, "unique_name": "split-concatenated-strings", "user_status": null, "title": "Split Concatenated Strings", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.\r\n\r\nSpecifically, to find the lexicographically biggest string, you need to experience two phases:\r\n\r\n1. Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\r\n2. Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint.\r\nAnd your job is to find the lexicographically biggest one among all the possible regular strings.", "notice": "1. The input strings will only contain `lowercase letters`.\r\n2. The total length of all the strings will not over `1,000`.", "clarification": "", "example": "Given str = `[\"abc\", \"xyz\"]`, return `\"zyxcba\"`\r\n```\r\nExplanation: \r\nYou can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", \r\nwhere '-' represents the looped status. \r\nThe answer string came from the fourth looped one, \r\nwhere you could cut from the middle character 'a' and get \"zyxcba\".\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 91, "name": "Alibaba", "cn_name": "Alibaba", "type": 3, "unique_name": "alibaba", "alias": "", "problem_count": 7}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"awef\",\"eawf\",\"zdaeff\",\"awefzewaf\",\"awefzewaf\"]", "total_accepted": 84, "total_submissions": 248, "contest": "", "has_followed_by": false}, "split-array-with-equal-sum": {"id": 877, "unique_name": "split-array-with-equal-sum", "user_status": null, "title": "Split Array with Equal Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given an array with n integers, you need to find if there are triplets `(i, j, k)` which satisfies following conditions:\r\n\r\n1. `0 < i, i + 1 < j, j + 1 < k < n - 1`\r\n2. Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.\r\nwhere we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.", "notice": "1.`1 <= n <= 2000.`\r\n2. Elements in the given array will be in range `[-1,000,000, 1,000,000]`.", "clarification": "", "example": "Given nums = `[1,2,1,2,1,2,1]`, return `True`\r\n```\r\nExplanation:\r\ni = 1, j = 3, k = 5. \r\nsum(0, i - 1) = sum(0, 0) = 1\r\nsum(i + 1, j - 1) = sum(2, 2) = 1\r\nsum(j + 1, k - 1) = sum(4, 4) = 1\r\nsum(k + 1, n - 1) = sum(6, 6) = 1\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 91, "name": "Alibaba", "cn_name": "Alibaba", "type": 3, "unique_name": "alibaba", "alias": "", "problem_count": 7}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,3,2,1,3,2,1,3,2,1,3]", "total_accepted": 151, "total_submissions": 465, "contest": "", "has_followed_by": false}, "boundary-of-binary-tree": {"id": 878, "unique_name": "boundary-of-binary-tree", "user_status": null, "title": "Boundary of Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 34, "description": "Given a binary tree, return the values of its boundary in **anti-clockwise** direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.\r\n\r\n**Left boundary** is defined as the path from root to the **left-most** node. **Right boundary** is defined as the path from root to the **right-most** node. If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.\r\n\r\nThe **left-most** node is defined as a **leaf** node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.\r\n\r\nThe **right-most** node is also defined by the same way with left and right exchanged.", "notice": "", "clarification": "", "example": "```\r\nGiven\r\n  1\r\n   \\\r\n    2\r\n   / \\\r\n  3   4\r\n\r\nreturn\r\n[1, 3, 4, 2]\r\n\r\nExplanation:\r\nThe root doesn't have left subtree, so the root itself is left boundary.\r\nThe leaves are node 3 and 4.\r\nThe right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.\r\nSo order them in anti-clockwise without duplicates and we have [1,3,4,2].\r\n```\r\n```\r\nGiven\r\n         1\r\n   /          \\\r\n  2            3\r\n / \\          / \r\n4   5        6   \r\n   / \\      / \\\r\n  7   8    9  10  \r\n       \r\nreturn\r\n[1,2,4,7,8,9,10,6,3]\r\n\r\nExplanation:\r\nThe left boundary are node 1,2,4. (4 is the left-most node according to definition)\r\nThe leaves are node 4,7,8,9,10.\r\nThe right boundary are node 1,3,6,10. (10 is the right-most node).\r\nSo order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,2,3,4,5,6,#,#,#,7,8,9,10}", "total_accepted": 335, "total_submissions": 958, "contest": "", "has_followed_by": false}, "output-contest-matches": {"id": 879, "unique_name": "output-contest-matches", "user_status": null, "title": "Output Contest Matches", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "During the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. Now, you're given `n` teams, you need to output their **final** contest matches in the form of a string.\r\n\r\nThe `n` teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.", "notice": "1. The `n` is in range `[2, 2^12]`.\r\n2. We ensure that the input `n` can be converted into the form `2^k`, where k is a positive integer.", "clarification": "", "example": "Given n = `2`, return `\"(1,2)\"`.\r\n```\r\nExplanation: \r\nInitially, we have the team 1 and the team 2, placed like: 1,2.\r\nThen we pair the team (1,2) together with '(', ')' and ',', which is the final answer.\r\n```\r\n\r\nGiven n = `4`, return `\"((1,4),(2,3))\"`.\r\n```\r\nExplanation: \r\nIn the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.\r\nAnd we got (1,4),(2,3).\r\nIn the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.\r\nAnd we got the final answer ((1,4),(2,3)).\r\n```\r\n\r\nGiven n = `8`, return `\"(((1,8),(4,5)),((2,7),(3,6)))\"`.\r\n```\r\nExplanation: \r\nFirst round: (1,8),(2,7),(3,6),(4,5)\r\nSecond round: ((1,8),(4,5)),((2,7),(3,6))\r\nThird round: (((1,8),(4,5)),((2,7),(3,6)))\r\nSince the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).\r\n```", "challenge": "", "tags": [{"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "2", "total_accepted": 168, "total_submissions": 282, "contest": "", "has_followed_by": false}, "construct-binary-tree-from-string": {"id": 880, "unique_name": "construct-binary-tree-from-string", "user_status": null, "title": "Construct Binary Tree from String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 38, "description": "You need to construct a binary tree from a string consisting of parenthesis and integers.\r\n\r\nThe whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.\r\n\r\nYou always start to construct the **left** child node of the parent first if it exists.", "notice": "1. There will only be `'('`, `')'`, `'-'` and `'0' ~ '9'` in the input string.\r\n2. An empty tree is represented by `\"\"` instead of `\"()\"`.", "clarification": "", "example": "Given s = `\"4(2(3)(1))(6(5))\"`, return the tree root node representing the following tree:\r\n```\r\n       4\r\n     /   \\\r\n    2     6\r\n   / \\   / \r\n  3   1 5   \r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"-4(2(3)(1))(6(5)(7))\"", "total_accepted": 297, "total_submissions": 775, "contest": "", "has_followed_by": false}, "max-consecutive-ones-ii": {"id": 883, "unique_name": "max-consecutive-ones-ii", "user_status": null, "title": "Max Consecutive Ones II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 56, "description": "Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.", "notice": "1. The input array will only contain `0` and `1`.\n2. The length of input array is a positive integer and will not exceed `10,000`.", "clarification": "", "example": "Given nums = `[1,0,1,1,0]`, return `4`.\n```\nExplanation: \nFlip the first zero will get the the maximum number of consecutive 1s.\n    After flipping, the maximum number of consecutive 1s is 4.\n```", "challenge": "", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,0,1,1,0]", "total_accepted": 247, "total_submissions": 434, "contest": "", "has_followed_by": false}, "find-permutation": {"id": 884, "unique_name": "find-permutation", "user_status": null, "title": "Find Permutation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "By now, you are given a **secret signature** consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our **secret signature** was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature \"DI\" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the \"DI\" **secret signature**.\n\nOn the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given **secret signature** in the input.", "notice": "1. The input string will only contain the character `'D'` and `'I'`.\n2. The length of input string is a positive integer and will not exceed `10,000`.", "clarification": "", "example": "Given str = `\"I\"`, return `[1,2]`.\n```\nExplanation: \n[1,2] is the only legal initial spectial string can construct secret signature \"I\", where the number 1 and 2 construct an increasing relationship.\n```\n\nGiven str = `\"DI\"`, return `[2,1,3]`.\n```\nExplanation: \nBoth [2,1,3] and [3,1,2] can construct the secret signature \"DI\", \nbut since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]\n```", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"DI\"", "total_accepted": 136, "total_submissions": 304, "contest": "", "has_followed_by": false}, "encode-string-with-shortest-length": {"id": 885, "unique_name": "encode-string-with-shortest-length", "user_status": null, "title": "Encode String with Shortest Length", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 44, "description": "Given a non-empty string, encode the string such that its encoded length is the shortest.\n\nThe encoding rule is: `k[encoded_string]`, where the encoded_string inside the square brackets is being repeated exactly k times.", "notice": "* `k` will be a positive integer and encoded string will not be empty or have extra space.\n* You may assume that the input string contains only `lowercase` English letters. The string's length is at most `160`.\n* If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them is fine.", "clarification": "", "example": "Given s = `\"aaa\"`, return `\"aaa\"`.\n```\nExplanation: \nThere is no way to encode it such that it is shorter than the input string, so we do not encode it.\n```\n\nGiven s = `\"aaaaa\"`, return `\"5[a]\"`.\n```\nExplanation: \n\"5[a]\" is shorter than \"aaaaa\" by 1 character.\n```\nGiven s = `\"aaaaaaaaaa\"`, return `\"10[a]\"`.\n```\nExplanation: \n\"a9[a]\" or \"9[a]a\" are also valid solutions, both of them have the same length = 5, which is the same as \"10[a]\".\n```\n\nGiven s = `\"aabcaabcd\"`, return `\"2[aabc]d\"`.\n```\nExplanation: \n\"aabc\" occurs twice, so one answer can be \"2[aabc]d\".\n```\n\nGiven s = `\"abbbabbbcabbbabbbc\"`, return `\"2[2[abbb]c]\"`.\n```\nExplanation: \n\"abbbabbbc\" occurs twice, but \"abbbabbbc\" can also be encoded to \"2[abbb]c\", so one answer can be \"2[2[abbb]c]\".\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 575, "title": "Decode String", "unique_name": "decode-string", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "\"abbbabbbcabbbabbbc\"", "total_accepted": 87, "total_submissions": 195, "contest": "", "has_followed_by": false}, "convex-polygon": {"id": 886, "unique_name": "convex-polygon", "user_status": null, "title": "Convex Polygon", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 33, "description": "Given a list of points that form a polygon when joined sequentially, find if this polygon is convex ([Convex polygon definition](https://en.wikipedia.org/wiki/Convex_polygon \"Convex polygon definition\")).\r\n\r\n", "notice": "1. There are at least `3` and at most `10,000` points.\r\n2. Coordinates are in the range `-10,000 to 10,000`.\r\n3. You may assume the polygon formed by given points is always a simple polygon ([Simple polygon definition](https://en.wikipedia.org/wiki/Simple_polygon \"Simple polygon defination\")). In other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise **don't intersect each other**.", "clarification": "", "example": "Given points = `[[0, 0], [0, 1], [1, 1], [1, 0]]`, \r\nreturn `True`.\r\nExplanation:\r\n![https://lintcode-media.s3.amazonaws.com/problem/E3N5G.png](https://lintcode-media.s3.amazonaws.com/problem/E3N5G.png \"https://lintcode-media.s3.amazonaws.com/problem/E3N5G.png\")\r\n\r\nGiven points = `[[0, 0], [0, 10], [10, 10], [10, 0], [5, 5]]`, \r\nreturn `False`.\r\n\r\nExplanation\r\n![https://lintcode-media.s3.amazonaws.com/problem/E3f02.png](https://lintcode-media.s3.amazonaws.com/problem/E3f02.png \"https://lintcode-media.s3.amazonaws.com/problem/E3f02.png\")\r\n", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[0,0],[0,10],[5,5],[10,10],[10,0]]", "total_accepted": 154, "total_submissions": 463, "contest": "", "has_followed_by": false}, "ternary-expression-parser": {"id": 887, "unique_name": "ternary-expression-parser", "user_status": null, "title": "Ternary Expression Parser", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits `0-9`, `?`, `:`, `T` and `F` (`T` and `F` represent True and False respectively).", "notice": "1. The length of the given string is `\u00e2\u2030\u00a4 10000`.\r\n2. Each number will contain only one digit.\r\n3. The conditional expressions group right-to-left (as usual in most languages).\r\n4. The condition will always be either `T` or `F`. That is, the condition will never be a digit.\r\n5. The result of the expression will always evaluate to either a digit `0-9`, `T` or `F`.", "clarification": "", "example": "Given expression = `\"T?2:3\"`, return `\"2\"`.\r\n```\r\nExplanation: \r\nIf true, then result is 2; otherwise result is 3.\r\n```\r\n\r\nGiven expression = `\"F?1:T?4:5\"`, return `\"4\"`.\r\n```\r\nExplanation: \r\nThe conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\r\n\r\n             \"(F ? 1 : (T ? 4 : 5))\"                   \"(F ? 1 : (T ? 4 : 5))\"\r\n          -> \"(F ? 1 : 4)\"                 or       -> \"(T ? 4 : 5)\"\r\n          -> \"4\"                                    -> \"4\"\r\n```\r\n\r\nGiven expression = `\"T?T?F:5:3\"`, return `\"F\"`.\r\n```\r\nExplanation: \r\nThe conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\r\n\r\n             \"(T ? (T ? F : 5) : 3)\"                   \"(T ? (T ? F : 5) : 3)\"\r\n          -> \"(T ? F : 3)\"                 or       -> \"(T ? F : 5)\"\r\n          -> \"F\"                                    -> \"F\"\r\n```", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 1061, "title": "Parse Lisp Expression", "unique_name": "parse-lisp-expression", "level": 3, "accepted_rate": 75}], "comment_count": 0, "testcase_sample": "\"F?1:T?3:1\"", "total_accepted": 133, "total_submissions": 301, "contest": "", "has_followed_by": false}, "valid-word-square": {"id": 888, "unique_name": "valid-word-square", "user_status": null, "title": "Valid Word Square", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 64, "description": "Given a sequence of words, check whether it forms a valid word square.\r\n\r\nA sequence of words forms a valid word square if the k^th row and column read the exact same string, where `0 \u00e2\u2030\u00a4 k < max(numRows, numColumns)`.\r\n\r\n", "notice": "1. The number of words given is at least 1 and does not exceed `500`.\r\n2. Word length will be at least 1 and does not exceed `500`.\r\n3. Each word contains only lowercase English alphabet `a-z`.", "clarification": "", "example": "```\r\nGiven\r\n[\r\n  \"abcd\",\r\n  \"bnrt\",\r\n  \"crmy\",\r\n  \"dtye\"\r\n]\r\nreturn true\r\n\r\nExplanation:\r\nThe first row and first column both read \"abcd\".\r\nThe second row and second column both read \"bnrt\".\r\nThe third row and third column both read \"crmy\".\r\nThe fourth row and fourth column both read \"dtye\".\r\n\r\nTherefore, it is a valid word square.\r\n```\r\n```\r\nGiven\r\n[\r\n  \"abcd\",\r\n  \"bnrt\",\r\n  \"crm\",\r\n  \"dt\"\r\n]\r\nreturn true\r\n\r\nExplanation:\r\nThe first row and first column both read \"abcd\".\r\nThe second row and second column both read \"bnrt\".\r\nThe third row and third column both read \"crm\".\r\nThe fourth row and fourth column both read \"dt\".\r\n\r\nTherefore, it is a valid word square.\r\n```\r\n```\r\nGiven\r\n[\r\n  \"ball\",\r\n  \"area\",\r\n  \"read\",\r\n  \"lady\"\r\n]\r\nreturn false\r\n\r\nExplanation:\r\nThe third row reads \"read\" while the third column reads \"lead\".\r\n\r\nTherefore, it is NOT a valid word square.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1042, "title": "Toeplitz Matrix", "unique_name": "toeplitz-matrix", "level": 1, "accepted_rate": 69}, {"id": 634, "title": "Word Squares", "unique_name": "word-squares", "level": 3, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[\"abcd\", \"bnrt\", \"crmy\",\"dtye\"]", "total_accepted": 1083, "total_submissions": 1680, "contest": "", "has_followed_by": false}, "sentence-screen-fitting": {"id": 889, "unique_name": "sentence-screen-fitting", "user_status": null, "title": "Sentence Screen Fitting", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 36, "description": "Given a `rows x cols` screen and a sentence represented by a list of **non-empty** words, find **how many times** the given sentence can be fitted on the screen.", "notice": "1. A word cannot be split into two lines.\r\n2. The order of words in the sentence must remain unchanged.\r\n3. Two consecutive words **in a line** must be separated by a single space.\r\n4. Total words in the sentence won't exceed `100`.\r\n5. Length of each word is greater than 0 and won't exceed `10`.\r\n6. `1 \u2264 rows, cols \u2264 20,000`.", "clarification": "", "example": "Given rows = `2`, cols = `8`, sentence = `[\"hello\", \"world\"]`, retrun `1`.\r\n```\r\nExplanation:\r\nhello---\r\nworld---\r\n\r\nThe character '-' signifies an empty space on the screen.\r\n```\r\nGiven rows = `3`, cols = `6`, sentence = `[\"a\", \"bcd\", \"e\"]`, return `2`.\r\n```\r\nExplanation:\r\na-bcd- \r\ne-a---\r\nbcd-e-\r\n\r\nThe character '-' signifies an empty space on the screen.\r\n```\r\n\r\nGiven rows = `4`, cols = `5`, sentence = `[\"I\", \"had\", \"apple\", \"pie\"]`, return `1`.\r\n```\r\nExplanation:\r\nI-had\r\napple\r\npie-I\r\nhad--\r\n\r\nThe character '-' signifies an empty space on the screen.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"I\", \"had\", \"apple\", \"pie\"]\n4\n5", "total_accepted": 271, "total_submissions": 731, "contest": "", "has_followed_by": false}, "valid-palindrome-ii": {"id": 891, "unique_name": "valid-palindrome-ii", "user_status": null, "title": "Valid Palindrome II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 44, "description": "Given a non-empty string `s`, you may delete at most one character. Judge whether you can make it a palindrome.", "notice": "The string will only contain lowercase characters a-z. The maximum length of the string is 50000.", "clarification": "", "example": "Given s = `\"aba\"` return `true`\r\nGiven s = `\"abca\"` return `true` // delete `c`", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}], "related_problems": [{"id": 678, "title": "Shortest Palindrome", "unique_name": "shortest-palindrome", "level": 2, "accepted_rate": 24}, {"id": 491, "title": "Palindrome Number", "unique_name": "palindrome-number", "level": 1, "accepted_rate": 38}, {"id": 627, "title": "Longest Palindrome", "unique_name": "longest-palindrome", "level": 1, "accepted_rate": 32}, {"id": 415, "title": "Valid Palindrome", "unique_name": "valid-palindrome", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "\"aba\"", "total_accepted": 994, "total_submissions": 2220, "contest": "", "has_followed_by": false}, "alien-dictionary": {"id": 892, "unique_name": "alien-dictionary", "user_status": null, "title": "Alien Dictionary", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 21, "description": "There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of **non-empty** words from the dictionary, where words are **sorted lexicographically by the rules of this new language**. Derive the order of letters in this language.", "notice": "1. You may assume all letters are in lowercase.\r\n2. You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.\r\n3. If the order is invalid, return an empty string.\r\n4. There may be multiple valid order of letters, `return the smallest in lexicographical order`", "clarification": "", "example": "Given the following words in dictionary,\r\n```\r\n[\r\n  \"wrt\",\r\n  \"wrf\",\r\n  \"er\",\r\n  \"ett\",\r\n  \"rftt\"\r\n]\r\n```\r\nThe correct order is: `\"wertf\"`\r\n\r\nGiven the following words in dictionary,\r\n```\r\n[\r\n  \"z\",\r\n  \"x\"\r\n]\r\n```\r\nThe correct order is: `\"zx\"`.", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 80, "name": "Topological Sort", "cn_name": "Topological Sort", "type": 1, "unique_name": "topological-sort", "alias": "", "problem_count": 7}, {"id": 82, "name": "Directed Graph", "cn_name": "Directed Graph", "type": 2, "unique_name": "directed-graph", "alias": "", "problem_count": 2}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 616, "title": "Course Schedule II", "unique_name": "course-schedule-ii", "level": 2, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]", "total_accepted": 542, "total_submissions": 2493, "contest": "", "has_followed_by": false}, "longest-palindromic-substring-ii": {"id": 893, "title": "Longest Palindromic Substring II", "unique_name": "longest-palindromic-substring-ii", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "pancake-sorting": {"id": 894, "title": "Pancake Sorting", "unique_name": "pancake-sorting", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "friend-request": {"id": 895, "title": "Friend Request", "unique_name": "friend-request", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [{"id": 18, "title": "Weekly Mock Interview Contest #9 (For Facebook Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/fb.png", "start_at": "2018-03-17T01:30:00Z"}], "no_permission": true}, "prime-product": {"id": 896, "title": "Prime Product", "unique_name": "prime-product", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "island-city": {"id": 897, "title": "Island City", "unique_name": "island-city", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "leftmost-one": {"id": 898, "title": "Leftmost One", "unique_name": "leftmost-one", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "closest-binary-search-tree-value": {"id": 900, "unique_name": "closest-binary-search-tree-value", "user_status": null, "title": "Closest Binary Search Tree Value", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 40, "description": "Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.", "notice": "* Given target value is a floating point.\r\n* You are guaranteed to have only one unique value in the BST that is closest to the target.", "clarification": "", "example": "Given root = `{1}`, target = `4.428571`, return `1`.", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 901, "title": "Closest Binary Search Tree Value II", "unique_name": "closest-binary-search-tree-value-ii", "level": 3, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "{1}\n4.428571", "total_accepted": 2855, "total_submissions": 7043, "contest": "", "has_followed_by": false}, "closest-binary-search-tree-value-ii": {"id": 901, "unique_name": "closest-binary-search-tree-value-ii", "user_status": null, "title": "Closest Binary Search Tree Value II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 39, "description": "Given a non-empty binary search tree and a target value, find `k` values in the BST that are closest to the target.", "notice": "* Given target value is a floating point.\r\n* You may assume `k` is always valid, that is: `k \u00e2\u2030\u00a4 total` nodes.\r\n* You are guaranteed to have only one `unique` set of k values in the BST that are closest to the target.", "clarification": "", "example": "Given root = `{1}`, target = `0.000000`, k = `1`, return `[1]`.", "challenge": "Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 900, "title": "Closest Binary Search Tree Value", "unique_name": "closest-binary-search-tree-value", "level": 1, "accepted_rate": 40}, {"id": 67, "title": "Binary Tree Inorder Traversal", "unique_name": "binary-tree-inorder-traversal", "level": 1, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "{1}\n0.000000\n1", "total_accepted": 1678, "total_submissions": 4217, "contest": "", "has_followed_by": false}, "kth-smallest-element-in-a-bst": {"id": 902, "unique_name": "kth-smallest-element-in-a-bst", "user_status": null, "title": "Kth Smallest Element in a BST", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "Given a binary search tree, write a function `kthSmallest` to find the kth smallest element in it.", "notice": "You may assume k is always valid, `1 \u2264 k \u2264 BST's total elements`.", "clarification": "", "example": "Given root = `{1,#,2}`, k = `2`, return `2`.", "challenge": "What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1094, "title": "Second Minimum Node In a Binary Tree", "unique_name": "second-minimum-node-in-a-binary-tree", "level": 1, "accepted_rate": 55}, {"id": 67, "title": "Binary Tree Inorder Traversal", "unique_name": "binary-tree-inorder-traversal", "level": 1, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "{1,#,2}\n2", "total_accepted": 2683, "total_submissions": 5214, "contest": "", "has_followed_by": false}, "range-addition": {"id": 903, "unique_name": "range-addition", "user_status": null, "title": "Range Addition", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Assume you have an array of length `n` initialized with all `0`'s and are given `k` update operations.\n\nEach operation is represented as a triplet: `[startIndex, endIndex, inc]` which increments each element of subarray `A[startIndex ... endIndex]` (startIndex and endIndex inclusive) with `inc`.\n\nReturn the modified array after all `k` operations were executed.", "notice": "", "clarification": "", "example": "```\nGiven:\nlength = 5,\nupdates = \n[\n[1,  3,  2],\n[2,  4,  3],\n[0,  2, -2]\n]\nreturn [-2, 0, 3, 5, 3]\n\nExplanation:\nInitial state:\n[ 0, 0, 0, 0, 0 ]\nAfter applying operation [1, 3, 2]:\n[ 0, 2, 2, 2, 0 ]\nAfter applying operation [2, 4, 3]:\n[ 0, 2, 5, 5, 3 ]\nAfter applying operation [0, 2, -2]:\n[-2, 0, 3, 5, 3 ]\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "5\n[[1,3,2],[2,4,3],[0,2, -2]]", "total_accepted": 191, "total_submissions": 329, "contest": "", "has_followed_by": false}, "plus-one-linked-list": {"id": 904, "unique_name": "plus-one-linked-list", "user_status": null, "title": "Plus One Linked List", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Given a non-negative integer represented as **non-empty** a singly linked list of digits, plus one to the integer.\n\nYou may assume the integer do not contain any leading zero, except the number 0 itself.\n\nThe digits are stored such that the most significant digit is at the head of the list.", "notice": "", "clarification": "", "example": "Given head = `1 -> 2 -> 3 -> null`, return `1 -> 2 -> 4 -> null`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 407, "title": "Plus One", "unique_name": "plus-one", "level": 1, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "1->2->3->null", "total_accepted": 451, "total_submissions": 902, "contest": "", "has_followed_by": false}, "sort-transformed-array": {"id": 906, "unique_name": "sort-transformed-array", "user_status": null, "title": "Sort Transformed Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 50, "description": "Given a **sorted** array of integers nums and integer values a, b and c. Apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element x in the array.\n\nThe returned array must be in **sorted order**.", "notice": "Expected time complexity: **O(n)**", "clarification": "", "example": "Given nums = `[-4, -2, 2, 4]`, a = `1`, b = `3`, c = `5`, return `[3, 9, 15, 33]`\nGiven nums = `[-4, -2, 2, 4]`, a = `-1`, b = `3`, c = `5`, return `[-23, -5, 1, 7]`", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[-4,-2,2,4]\n1\n3\n5", "total_accepted": 190, "total_submissions": 375, "contest": "", "has_followed_by": false}, "line-reflection": {"id": 908, "unique_name": "line-reflection", "user_status": null, "title": "Line Reflection", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given `n` points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.", "notice": "", "clarification": "", "example": "Given points = `[[1,1],[-1,1]]`, return `true`.\nGiven points = `[[1,1],[-1,-1]]`, return `false`.", "challenge": "Could you do better than O(n2)?", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1237, "title": "Number of Boomerangs", "unique_name": "number-of-boomerangs", "level": 1, "accepted_rate": 57}, {"id": 186, "title": "Max Points on a Line ", "unique_name": "max-points-on-a-line", "level": 2, "accepted_rate": 16}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 215, "total_submissions": 826, "contest": "", "has_followed_by": false}, "android-unlock-patterns": {"id": 909, "unique_name": "android-unlock-patterns", "user_status": null, "title": "Android Unlock Patterns", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Given an Android `3x3` key lock screen and two integers `m` and `n`, where `1 \u2264 m \u2264 n \u2264 9`, count the total number of unlock patterns of the Android lock screen, which consist of minimum of `m` keys and maximum `n` keys.\r\n\r\n**Rules for a valid pattern:**\r\n1. Each pattern must connect at least `m` keys and at most `n` keys.\r\n2. All the keys must be distinct.\r\n3. If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.\r\n4. The order of keys used matters.\r\n![android unlock](https://lintcode-media.s3.amazonaws.com/problem/andriod-unlock.png \"android unlock\")\r\n**Explanation:**\r\n```\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n```\r\n**Invalid move:** `4 - 1 - 3 - 6`\r\nLine 1 - 3 passes through key 2 which had not been selected in the pattern.\r\n\r\n**Invalid move:** `4 - 1 - 9 - 2`\r\nLine 1 - 9 passes through key 5 which had not been selected in the pattern.\r\n\r\n**Valid move:** `2 - 4 - 1 - 3 - 6`\r\nLine 1 - 3 is valid because it passes through key 2, which had been selected in the pattern\r\n\r\n**Valid move:** `6 - 5 - 4 - 1 - 9 - 2`\r\nLine 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.", "notice": "", "clarification": "", "example": "Given m = `1`, n = `1`, return `9`.", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "1\n1", "total_accepted": 240, "total_submissions": 569, "contest": "", "has_followed_by": false}, "maximum-size-subarray-sum-equals-k": {"id": 911, "unique_name": "maximum-size-subarray-sum-equals-k", "user_status": null, "title": "Maximum Size Subarray Sum Equals k", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "Given an array `nums` and a target value `k`, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.", "notice": "The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.", "clarification": "", "example": "Given nums = `[1, -1, 5, -2, 3]`, k = `3`, return `4`. \r\n```\r\nExplanation:\r\nbecause the subarray [1, -1, 5, -2] sums to 3 and is the longest.\r\n```\r\nGiven nums = `[-2, -1, 2, 1]`, k = `1`, return `2`. \r\n```\r\nExplanation:\r\nbecause the subarray [-1, 2] sums to 1 and is the longest.\r\n```", "challenge": "Can you do it in O(n) time?", "tags": [{"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 1075, "title": "Subarray Product Less Than K", "unique_name": "subarray-product-less-than-k", "level": 2, "accepted_rate": 64}, {"id": 994, "title": "Contiguous Array", "unique_name": "contiguous-array", "level": 2, "accepted_rate": 45}, {"id": 944, "title": "Maximum Submatrix", "unique_name": "maximum-submatrix", "level": 2, "accepted_rate": 37}, {"id": 406, "title": "Minimum Size Subarray Sum ", "unique_name": "minimum-size-subarray-sum", "level": 2, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[1,-1,5,-2,3]\n3", "total_accepted": 617, "total_submissions": 1387, "contest": "", "has_followed_by": false}, "best-meeting-point": {"id": 912, "unique_name": "best-meeting-point", "user_status": null, "title": "Best Meeting Point", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 43, "description": "A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values `0` or `1`, where each `1` marks the home of someone in the group. The distance is calculated using [Manhattan Distance](https://en.wikipedia.org/wiki/Taxicab_geometry \"manhattan distance\"), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.", "notice": "", "clarification": "", "example": "Given three people living at `(0,0)`, `(0,4)`, and `(2,2)`:\r\n```\r\n1 - 0 - 0 - 0 - 1\r\n|   |   |   |   |\r\n0 - 0 - 0 - 0 - 0\r\n|   |   |   |   |\r\n0 - 0 - 1 - 0 - 0\r\n```\r\nThe point `(0,2)` is an ideal meeting point, as the total travel distance of `2 + 2 + 2 = 6` is minimal. So return `6`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 803, "title": "Shortest Distance from All Buildings", "unique_name": "shortest-distance-from-all-buildings", "level": 3, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "[[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]", "total_accepted": 144, "total_submissions": 328, "contest": "", "has_followed_by": false}, "flip-game-ii": {"id": 913, "unique_name": "flip-game-ii", "user_status": null, "title": "Flip Game II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "You are playing the following Flip Game with your friend: Given a string that contains only these two characters: `+` and `-`, you and your friend take turns to flip two **consecutive** `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move and therefore the other person will be the winner.\r\n\r\nWrite a function to determine if the starting player can guarantee a win.", "notice": "", "clarification": "", "example": "Given s = `\"++++\"`, return `true`. \n```\nExplanation:\nThe starting player can guarantee a win by flipping the middle \"++\" to become \"+--+\".\n```", "challenge": "Derive your algorithm's runtime complexity.", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 985, "title": "Can I Win", "unique_name": "can-i-win", "level": 3, "accepted_rate": 36}, {"id": 914, "title": "Flip Game", "unique_name": "flip-game", "level": 1, "accepted_rate": 57}, {"id": 666, "title": "Guess Number Higher or Lower II", "unique_name": "guess-number-higher-or-lower-ii", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "\"++++\"", "total_accepted": 256, "total_submissions": 547, "contest": "", "has_followed_by": false}, "flip-game": {"id": 914, "unique_name": "flip-game", "user_status": null, "title": "Flip Game", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "You are playing the following Flip Game with your friend: Given a string that contains only these two characters: `+` and `-`, you and your friend take turns to flip two **consecutive** `\"++\"` into `\"--\"`. The game ends when a person can no longer make a move and therefore the other person will be the winner.\n\nWrite a function to compute all possible states of the string after one valid move.", "notice": "", "clarification": "", "example": "Given s = `\"++++\"`, after one move, it may become one of the following states:\n```\n[\n  \"--++\",\n  \"+--+\",\n  \"++--\"\n]\n```\nIf there is no valid move, return an empty list `[]`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 913, "title": "Flip Game II", "unique_name": "flip-game-ii", "level": 2, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "\"++++\"", "total_accepted": 1005, "total_submissions": 1740, "contest": "", "has_followed_by": false}, "inorder-predecessor-in-bst": {"id": 915, "title": "Inorder Predecessor in BST", "unique_name": "inorder-predecessor-in-bst", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}, {"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}, {"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "palindrome-permutation": {"id": 916, "unique_name": "palindrome-permutation", "user_status": null, "title": "Palindrome Permutation", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 58, "description": "Given a string, determine if a permutation of the string could form a palindrome.", "notice": "", "clarification": "", "example": "Given s = `\"code\"`, return `False`.\nGiven s = `\"aab\"`, return `True`.\nGiven s = `\"carerac\"`, return `True`.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 917, "title": "Palindrome Permutation II", "unique_name": "palindrome-permutation-ii", "level": 2, "accepted_rate": 32}, {"id": 616, "title": "Course Schedule II", "unique_name": "course-schedule-ii", "level": 2, "accepted_rate": 23}, {"id": 627, "title": "Longest Palindrome", "unique_name": "longest-palindrome", "level": 1, "accepted_rate": 32}, {"id": 200, "title": "Longest Palindromic Substring", "unique_name": "longest-palindromic-substring", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "\"as\"", "total_accepted": 651, "total_submissions": 1120, "contest": "", "has_followed_by": false}, "palindrome-permutation-ii": {"id": 917, "unique_name": "palindrome-permutation-ii", "user_status": null, "title": "Palindrome Permutation II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given a string `s`, return all the palindromic permutations (**without duplicates**) of it. Return an empty list if no palindromic permutation could be form.", "notice": "", "clarification": "", "example": "Given s = `\"aabb\"`, return `[\"abba\",\"baab\"]`.\nGiven s = `\"abc\"`, return `[]`.", "challenge": "", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 916, "title": "Palindrome Permutation", "unique_name": "palindrome-permutation", "level": 1, "accepted_rate": 58}, {"id": 52, "title": "Next Permutation", "unique_name": "next-permutation", "level": 2, "accepted_rate": 26}, {"id": 16, "title": "Permutations II", "unique_name": "permutations-ii", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "\"aabb\"", "total_accepted": 198, "total_submissions": 616, "contest": "", "has_followed_by": false}, "3sum-smaller": {"id": 918, "unique_name": "3sum-smaller", "user_status": null, "title": "3Sum Smaller", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "Given an array of `n` integers nums and a `target`, find the number of index triplets `i, j, k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.", "notice": "", "clarification": "", "example": "Given nums = `[-2,0,1,3]`, target = `2`, return `2`. \r\n```\r\nExplanation:\r\nBecause there are two triplets which sums are less than 2:\r\n[-2, 0, 1]\r\n[-2, 0, 3]\r\n```\r\n", "challenge": "Could you solve it in O(n2) runtime?", "tags": [{"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1132, "title": "Valid Triangle Number", "unique_name": "valid-triangle-number", "level": 2, "accepted_rate": 50}, {"id": 765, "title": "Valid Triangle", "unique_name": "valid-triangle", "level": 1, "accepted_rate": 66}, {"id": 59, "title": "3Sum Closest", "unique_name": "3sum-closest", "level": 2, "accepted_rate": 32}, {"id": 57, "title": "3Sum", "unique_name": "3sum", "level": 2, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "[-2,0,1,3]\n2", "total_accepted": 539, "total_submissions": 1148, "contest": "", "has_followed_by": false}, "meeting-rooms-ii": {"id": 919, "unique_name": "meeting-rooms-ii", "user_status": null, "title": "Meeting Rooms II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given an array of meeting time intervals consisting of start and end times `[[s1,e1],[s2,e2],...] (si < ei)`, find the minimum number of conference rooms required.", "notice": "", "clarification": "", "example": "Given intervals = `[(0,30),(5,10),(15,20)]`, return `2`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 54, "name": "Interval", "cn_name": "Interval", "type": 22, "unique_name": "interval", "alias": "", "problem_count": 9}, {"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 920, "title": "Meeting Rooms", "unique_name": "meeting-rooms", "level": 1, "accepted_rate": 38}, {"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[(2,7)]", "total_accepted": 998, "total_submissions": 2548, "contest": "", "has_followed_by": false}, "meeting-rooms": {"id": 920, "unique_name": "meeting-rooms", "user_status": null, "title": "Meeting Rooms", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Given an array of meeting time intervals consisting of start and end times `[[s1,e1],[s2,e2],...] (si < ei)`, determine if a person could attend all meetings.", "notice": "", "clarification": "", "example": "Given intervals = `[[0,30],[5,10],[15,20]]`, return `false`.", "challenge": "", "tags": [{"id": 2, "name": "Sort", "cn_name": "Sort", "type": 12, "unique_name": "sort", "alias": "", "problem_count": 34}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 919, "title": "Meeting Rooms II", "unique_name": "meeting-rooms-ii", "level": 2, "accepted_rate": 39}, {"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[(5,8),(6,8)]", "total_accepted": 876, "total_submissions": 2251, "contest": "", "has_followed_by": false}, "count-univalue-subtrees": {"id": 921, "unique_name": "count-univalue-subtrees", "user_status": null, "title": "Count Univalue Subtrees", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 48, "description": "Given a binary tree, count the number of uni-value subtrees.\n\nA Uni-value subtree means all nodes of the subtree have the same value.", "notice": "", "clarification": "", "example": "Given root = `{5,1,5,5,5,#,5}`, return `4`.\n```\n              5\n             / \\\n            1   5\n           / \\   \\\n          5   5   5\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}], "related_problems": [{"id": 1165, "title": "Subtree of Another Tree", "unique_name": "subtree-of-another-tree", "level": 1, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "{1,2,3,4,5}", "total_accepted": 187, "total_submissions": 384, "contest": "", "has_followed_by": false}, "reverse-words-in-a-string-ii": {"id": 927, "unique_name": "reverse-words-in-a-string-ii", "user_status": null, "title": "Reverse Words in a String II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 64, "description": "Given an input `character array`, reverse the array word by word. A word is defined as a sequence of non-space characters.\n\nThe input character array does not contain leading or trailing spaces and the words are always separated by a single space.", "notice": "", "clarification": "", "example": "Given s = \"the sky is blue\", \nafter reversing : \"blue is sky the\"", "challenge": "Could you do it in-place without allocating extra space?", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 1334, "title": "Rotate Array", "unique_name": "rotate-array", "level": 1, "accepted_rate": 45}, {"id": 53, "title": "Reverse Words in a String", "unique_name": "reverse-words-in-a-string", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "\"zpetg pufmmdf l onwmwpsyr qlke vuijr yrr sndp txvcv x hgkczoo cfuadsza prz e sucs\"", "total_accepted": 424, "total_submissions": 658, "contest": "", "has_followed_by": false}, "median-of-k-sorted-arrays": {"id": 931, "title": "Median of K Sorted Arrays", "unique_name": "median-of-k-sorted-arrays", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 1, "title": "Algorithm", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alg-square5.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "friends-within-three-jumps": {"id": 932, "title": "Friends Within Three Jumps", "unique_name": "friends-within-three-jumps", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}], "contest_set": [{"id": 19, "title": "Weekly Mock Interview Contest #10 (For Linkedin Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/linkedin.png", "start_at": "2018-03-24T01:30:00Z"}], "no_permission": true}, "tuple-multiply": {"id": 933, "title": "Tuple Multiply", "unique_name": "tuple-multiply", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}], "contest_set": [{"id": 48, "title": "\u7b2c 35 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-08-05T01:30:00Z"}], "no_permission": true}, "unlock-problem": {"id": 934, "title": "Unlock Problem", "unique_name": "unlock-problem", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "cartesian-product": {"id": 935, "title": "Cartesian Product", "unique_name": "cartesian-product", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 23, "title": "Linkedin", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Linkedin_circle.svg_.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "binary-tree-kth-floor-node": {"id": 939, "title": "Binary Tree Kth Floor Node", "unique_name": "binary-tree-kth-floor-node", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 21, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #1", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-03-24T12:00:00Z"}], "no_permission": true}, "maximum-absolute-value": {"id": 940, "title": "Maximum Absolute Value", "unique_name": "maximum-absolute-value", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 21, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #1", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-03-24T12:00:00Z"}], "no_permission": true}, "sliding-puzzle": {"id": 941, "unique_name": "sliding-puzzle", "user_status": null, "title": "Sliding Puzzle", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 44, "description": "On a `2x3 board`, there are `5` tiles represented by the integers `1` through `5`, and an empty square represented by `0`.\r\n\r\nA move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\r\n\r\nThe state of the board is solved if and only if the `board` is `[[1,2,3],[4,5,0]].`\r\n\r\nGiven a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return `-1`.", "notice": "* `board` will be a `2 x 3` array as described above.\r\n* `board[i][j]` will be a permutation of `[0, 1, 2, 3, 4, 5]`.", "clarification": "", "example": "Given board = `[[1,2,3],[4,0,5]]`, return `1`.\r\n```\r\nExplanation: \r\nSwap the 0 and the 5 in one move.\r\n```\r\nGiven board = `[[1,2,3],[5,4,0]]`, return `-1`.\r\n```\r\nExplanation: \r\nNo number of moves will make the board solved.\r\n```\r\nGiven board = `[[4,1,2],[5,0,3]]`, return `5`.\r\n```\r\nExplanation: \r\n5 is the smallest number of moves that solves the board.\r\nAn example path:\r\nAfter move 0: [[4,1,2],[5,0,3]]\r\nAfter move 1: [[4,1,2],[0,5,3]]\r\nAfter move 2: [[0,1,2],[4,5,3]]\r\nAfter move 3: [[1,0,2],[4,5,3]]\r\nAfter move 4: [[1,2,0],[4,5,3]]\r\nAfter move 5: [[1,2,3],[4,5,0]]\r\n```\r\nGiven board = `[[3,2,4],[1,5,0]]`, return `14`.", "challenge": "", "tags": [{"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}], "related_problems": [{"id": 794, "title": "Sliding Puzzle II", "unique_name": "sliding-puzzle-ii", "level": 3, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "[[1,2,3],[4,0,5]]", "total_accepted": 163, "total_submissions": 361, "contest": "", "has_followed_by": false}, "range-sum-query-immutable": {"id": 943, "unique_name": "range-sum-query-immutable", "user_status": null, "title": "Range Sum Query - Immutable", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 51, "description": "Given an integer array nums, find the sum of the elements between indices `i` and `j` `(i \u00e2\u2030\u00a4 j)`, inclusive.", "notice": "1. You may assume that the array does not change.\r\n2. There are many calls to `sumRange` function.", "clarification": "", "example": "```\r\nGiven nums = [-2, 0, 3, -5, 2, -1]\r\n\r\nsumRange(0, 2) -> 1\r\nsumRange(2, 5) -> -1\r\nsumRange(0, 5) -> -3\r\n```", "challenge": "", "tags": [{"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 840, "title": "Range Sum Query - Mutable", "unique_name": "range-sum-query-mutable", "level": 2, "accepted_rate": 43}, {"id": 817, "title": "Range Sum Query 2D - Mutable", "unique_name": "range-sum-query-2d-mutable", "level": 2, "accepted_rate": 38}, {"id": 665, "title": "Range Sum Query 2D - Immutable", "unique_name": "range-sum-query-2d-immutable", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "NumArray([-2,0,3,-5,2,-1])\nsumRange(0, 2)\nsumRange(2, 5)\nsumRange(0, 5)", "total_accepted": 641, "total_submissions": 1233, "contest": "", "has_followed_by": false}, "maximum-submatrix": {"id": 944, "unique_name": "maximum-submatrix", "user_status": null, "title": "Maximum Submatrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 37, "description": "Given an `n x n` matrix of `positive` and `negative` integers, find the submatrix with the largest possible sum.", "notice": "", "clarification": "", "example": "```\r\nGiven matrix = \r\n[\r\n[1,3,-1],\r\n[2,3,-2],\r\n[-1,-2,-3]\r\n]\r\nreturn 9.\r\nExplanation:\r\nthe submatrix with the largest possible sum is:\r\n[\r\n[1,2],\r\n[2,3]\r\n]\r\n```", "challenge": "", "tags": [{"id": 47, "name": "Matrix", "cn_name": "Matrix", "type": 22, "unique_name": "matrix", "alias": "", "problem_count": 14}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 911, "title": "Maximum Size Subarray Sum Equals k", "unique_name": "maximum-size-subarray-sum-equals-k", "level": 2, "accepted_rate": 44}, {"id": 405, "title": "Submatrix Sum", "unique_name": "submatrix-sum", "level": 2, "accepted_rate": 26}, {"id": 41, "title": "Maximum Subarray", "unique_name": "maximum-subarray", "level": 1, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[[1,3,-1],[2,3,-2],[-1,-2,-3]]", "total_accepted": 755, "total_submissions": 2006, "contest": "", "has_followed_by": false}, "task-scheduler": {"id": 945, "unique_name": "task-scheduler", "user_status": null, "title": "Task Scheduler", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 54, "description": "Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.\r\n\r\nHowever, there is a non-negative cooling interval `n` that means between two `same tasks`, there must be at least n intervals that CPU are doing different tasks or just be idle.\r\n\r\nYou need to return the `least` number of intervals the CPU will take to finish all the given tasks.", "notice": "1. The number of tasks is in the range `[1, 10000]`.\r\n2. The integer n is in the range `[0, 100]`.", "clarification": "", "example": "Given tasks = `['A','A','A','B','B','B']`, n = `2`, return `8`.\r\n```\r\nExplanation: \r\nA -> B -> idle -> A -> B -> idle -> A -> B.\r\n```", "challenge": "", "tags": [{"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"AAABBB\"\n2", "total_accepted": 505, "total_submissions": 929, "contest": "", "has_followed_by": false}, "233-matrix": {"id": 946, "unique_name": "233-matrix", "user_status": null, "title": "233 Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 10, "description": "Given a matric A. The first row of matrix A is 0, 233, 2333, 23333...(i.e., A(0,0)=0,A(0,1)=233,A(0,2)=2333,A(0,3)=23333...). Besides, A(i,j)=A(i-1,j)+A(i,j-1).\n\nGiven an array X with `n` integers. X[i] is A(i+1,0), (i.e., X[0] is A(1,0), X[1] is A(2,0) ...), and a positive integer m.\n\nReturn the value of A(n,m) % 10000007.", "notice": "n <=1 0, m <= 10^9\n0 =< A(i,0) < 2^31", "clarification": "", "example": "```\ninput:\nX=[1]\nm=1\noutput:\n234\nexplanation:\n[[0,233],\n [1,234]]\n```\n```\ninput:\nX=[0,0]\nm=2\noutput:\n2799\nexplanation:\n[[0,233,2333],\n [0,233,2566],\n [0,233,2799]]\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[]\n0", "total_accepted": 35, "total_submissions": 348, "contest": "", "has_followed_by": false}, "matrix-power-series": {"id": 947, "unique_name": "matrix-power-series", "user_status": null, "title": "Matrix Power Series", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 40, "description": "Given a n \u00d7 n matrix A and a positive integer k and a positive integer m, find the sum S = A + A^2 + A^3 + \u2026 + A^k,return the elements of S modulo m", "notice": "n<=30,1<=k<=10^9,1<=m<10^4\nthe range of the element of the Matrix A is [0,10000]", "clarification": "", "example": "```\ninput:\nA=[[0,1],\n   [1,1]]\nk=2\nm=4\noutput:\n[[1,2],\n [3,4]]\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[[570,6428,3427],[3096,407,3265],[6094,4155,1693]]\n10\n2333", "total_accepted": 38, "total_submissions": 94, "contest": "", "has_followed_by": false}, "fibonacci-ii": {"id": 949, "unique_name": "fibonacci-ii", "user_status": null, "title": "Fibonacci II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 18, "description": "In the Fibonacci integer sequence, F0 = 0, F1 = 1, and Fn = Fn \u2212 1 + Fn \u2212 2 for n \u2265 2. For example, the first ten terms of the Fibonacci sequence are:0,1,1,2,3,5,8,13,21,34,\u2026\nAn alternative formula for the Fibonacci sequence is:\n![](https://lintcode-media.s3.amazonaws.com/problem/3070_1.png \"\")\nGiven an integer n, your goal is to compute the last 4 digits of Fn", "notice": "1.0 \u2264 n \u2264 1,000,000,000\n2.If the last four digits of Fn are all zeros, print \u20180\u2019; otherwise, omit any leading zeros(print Fn mod 10000)", "clarification": "", "example": "Given: n = `9`\r\nReturn: `34`", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "30", "total_accepted": 156, "total_submissions": 838, "contest": "", "has_followed_by": false}, "sliding-puzzle-iii": {"id": 950, "title": "Sliding Puzzle III", "unique_name": "sliding-puzzle-iii", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "rearrange": {"id": 951, "title": "Rearrange", "unique_name": "rearrange", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "digital-problem": {"id": 952, "title": "Digital Problem", "unique_name": "digital-problem", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 22, "title": "Weekly Mock Interview Contest #11 (For A-Company Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/a-company.png", "start_at": "2018-03-31T01:30:00Z"}], "no_permission": true}, "the-biggest-score-on-the-tree": {"id": 953, "title": "The Biggest Score On The Tree", "unique_name": "the-biggest-score-on-the-tree", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "insert-delete-getrandom-o1-duplicates-allowed": {"id": 954, "unique_name": "insert-delete-getrandom-o1-duplicates-allowed", "user_status": null, "title": "Insert Delete GetRandom O(1) - Duplicates allowed", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 37, "description": "Design a data structure that supports all following operations in average **O(1)** time.", "notice": "**Duplicate elements are allowed.**\r\n1. `insert(val):` Inserts an item val to the collection.\r\n2. `remove(val):` Removes an item val from the collection if present.\r\n3. `getRandom:` Returns a random element from current collection of elements. The probability of each element being returned is `linearly related` to the number of same value the collection contains.", "clarification": "", "example": "```\r\n// Init an empty collection.\r\nRandomizedCollection collection = new RandomizedCollection();\r\n\r\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\r\ncollection.insert(1);\r\n\r\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\r\ncollection.insert(1);\r\n\r\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\r\ncollection.insert(2);\r\n\r\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\r\ncollection.getRandom();\r\n\r\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\r\ncollection.remove(1);\r\n\r\n// getRandom should return 1 and 2 both equally likely.\r\ncollection.getRandom();\r\n```", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 57, "name": "Data Structure Design", "cn_name": "Data Structure Design", "type": 2, "unique_name": "data-structure-design", "alias": "", "problem_count": 11}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 657, "title": "Insert Delete GetRandom O(1)", "unique_name": "insert-delete-getrandom-o1", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "insert(1)\ninsert(1)\ninsert(2)\ngetRandom()\nremove(1)\ngetRandom()", "total_accepted": 209, "total_submissions": 550, "contest": "", "has_followed_by": false}, "implement-queue-by-circular-array": {"id": 955, "unique_name": "implement-queue-by-circular-array", "user_status": null, "title": "Implement Queue by Circular Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "Implement queue by circulant array. You need to support the following methods:\r\n1. `CircularQueue(n):`  initialize a circular array with size n to store elements\r\n2. `boolean isFull():`  return `true` if the array is full\r\n3. `boolean isEmpty():`  return `true` if there is no element in the array \r\n4. `void enqueue(element):`  add an element to the queue\r\n5. `int dequeue():`  pop an element from the queue", "notice": "it's guaranteed in the test cases we `won't call enqueue if it's full` and we also `won't call dequeue if it's empty`. So it's ok to raise exception in scenarios described above.", "clarification": "", "example": "```\r\nCircularQueue(5)\r\nisFull()   => false\r\nisEmpty() => true\r\nenqueue(1)\r\ndequeue()  => 1\r\n```", "challenge": "", "tags": [{"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 546, "title": "Implement Queue by Interface", "unique_name": "implement-queue-by-interface", "level": 1, "accepted_rate": 30}, {"id": 495, "title": "Implement Stack", "unique_name": "implement-stack", "level": 1, "accepted_rate": 47}, {"id": 493, "title": "Implement Queue by Linked List II", "unique_name": "implement-queue-by-linked-list-ii", "level": 1, "accepted_rate": 31}, {"id": 492, "title": "Implement Queue by Linked List", "unique_name": "implement-queue-by-linked-list", "level": 1, "accepted_rate": 36}, {"id": 40, "title": "Implement Queue by Two Stacks", "unique_name": "implement-queue-by-two-stacks", "level": 2, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "CircularQueue(5)\nisFull()\nisEmpty()\nenqueue(1)\nenqueue(2)\ndequeue()", "total_accepted": 300, "total_submissions": 680, "contest": "", "has_followed_by": false}, "data-segmentation": {"id": 956, "title": "Data Segmentation", "unique_name": "data-segmentation", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 28, "title": "Snapchat", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/syFSpLD0.jpg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "radar-detection": {"id": 957, "title": "Radar Detection", "unique_name": "radar-detection", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 28, "title": "Snapchat", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/syFSpLD0.jpg", "privacy": "Password required"}], "contest_set": [{"id": 23, "title": "Weekly Mock Interview Contest #12 (For Snapchat Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/snapchat.png", "start_at": "2018-04-07T01:30:00Z"}], "no_permission": true}, "palindrome-data-stream": {"id": 958, "title": "Palindrome Data Stream", "unique_name": "palindrome-data-stream", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 28, "title": "Snapchat", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/syFSpLD0.jpg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "k-spaced-array-sorting": {"id": 959, "title": "K Spaced Array Sorting", "unique_name": "k-spaced-array-sorting", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 28, "title": "Snapchat", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/syFSpLD0.jpg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "first-unique-number-in-a-stream-ii": {"id": 960, "unique_name": "first-unique-number-in-a-stream-ii", "user_status": null, "title": "First Unique Number in a Stream II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "We need to implement a data structure named `DataStream`. There are `two` methods required to be implemented:\r\n\r\n1. `void add(number)` // add a new number \r\n2. `int firstUnique()` // return first unique number", "notice": "You can assume that there must be at least one unique number in the stream when calling the firstUnique.   ", "clarification": "", "example": "```\r\nadd(1)\r\nadd(2)\r\nfirstUnique() => 1\r\nadd(1)\r\nfirstUnique() => 2\r\n```", "challenge": "", "tags": [{"id": 97, "name": "Data Stream", "cn_name": "Data Stream", "type": 1, "unique_name": "data-stream", "alias": "", "problem_count": 9}, {"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 685, "title": "First Unique Number In Stream", "unique_name": "first-unique-number-in-stream", "level": 2, "accepted_rate": 25}, {"id": 646, "title": "First Position Unique Character", "unique_name": "first-position-unique-character", "level": 1, "accepted_rate": 33}, {"id": 209, "title": "First Unique Character in a String", "unique_name": "first-unique-character-in-a-string", "level": 1, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "add(1)\nadd(2)\nfirstUnique()\nadd(1)\nfirstUnique()", "total_accepted": 302, "total_submissions": 717, "contest": "", "has_followed_by": false}, "longest-repeating-substring": {"id": 969, "title": "Longest Repeating Substring", "unique_name": "longest-repeating-substring", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "big-business": {"id": 970, "title": "Big Business", "unique_name": "big-business", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 24, "title": "Weekly Mock Interview Contest #13 (For Netflix Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/netflix.png", "start_at": "2018-04-14T01:30:00Z"}], "no_permission": true}, "surplus-value-backpack": {"id": 971, "title": "Surplus Value Backpack", "unique_name": "surplus-value-backpack", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 16, "title": "Dynamic Programming", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/dp3-square.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [], "no_permission": true}, "deliver-the-message": {"id": 972, "title": "Deliver The Message ", "unique_name": "deliver-the-message", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "1-bit-and-2-bit-characters": {"id": 973, "unique_name": "1-bit-and-2-bit-characters", "user_status": null, "title": "1-bit and 2-bit Characters", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 51, "description": "We have two special characters. The first character can be represented by one bit `0`. The second character can be represented by two bits (`10` or `11`).\r\n\r\nNow given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.", "notice": "1.`1 <= len(bits) <= 1000`.\r\n2.`bits[i]` is always `0` or `1`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \r\nbits = [1, 0, 0]\r\nOutput: True\r\nExplanation: \r\nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\r\n```\r\n**Example 2:**\r\n```\r\nInput: \r\nbits = [1, 1, 1, 0]\r\nOutput: False\r\nExplanation: \r\nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 152, "name": "Quora", "cn_name": "Quora", "type": 3, "unique_name": "quora", "alias": "", "problem_count": 6}], "related_problems": [{"id": 1079, "title": "Count Binary Substrings", "unique_name": "count-binary-substrings", "level": 1, "accepted_rate": 61}, {"id": 987, "title": "Binary Number with Alternating Bits", "unique_name": "binary-number-with-alternating-bits", "level": 1, "accepted_rate": 75}, {"id": 411, "title": "Gray Code", "unique_name": "gray-code", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "[1,0,0]", "total_accepted": 155, "total_submissions": 300, "contest": "", "has_followed_by": false}, "01-matrix": {"id": 974, "unique_name": "01-matrix", "user_status": null, "title": "01 Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\r\n\r\nThe distance between two adjacent cells is 1.", "notice": "The number of elements of the given matrix will not exceed 10,000.\r\nThere are at least one 0 in the given matrix.\r\nThe cells are adjacent in only four directions: up, down, left and right.", "clarification": "", "example": "input:\r\n[[0,0,0],\r\n[0,1,0],\r\n[1,1,1]]\r\noutput:\r\n[[0,0,0],\r\n[0,1,0],\r\n[1,2,1]]", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]", "total_accepted": 88, "total_submissions": 308, "contest": "", "has_followed_by": false}, "2-keys-keyboard": {"id": 975, "unique_name": "2-keys-keyboard", "user_status": null, "title": "2 Keys Keyboard", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 55, "description": "Initially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step:\r\n\r\n1. `Copy All:` You can copy all the characters present on the notepad (partial copy is not allowed).\r\n2. `Paste:` You can paste the characters which are copied **last time**.\r\nGiven a number `n`. You have to get **exactly** `n` 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get `n` 'A'.", "notice": "The `n` will be in the range `[1, 1000]`.", "clarification": "", "example": "```\r\nInput: 3\r\nOutput: 3\r\nExplanation:\r\nIntitally, we have one character 'A'.\r\nIn step 1, we use Copy All operation.\r\nIn step 2, we use Paste operation to get 'AA'.\r\nIn step 3, we use Paste operation to get 'AAA'.\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 867, "title": "4 Keys Keyboard", "unique_name": "4-keys-keyboard", "level": 2, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "3", "total_accepted": 117, "total_submissions": 209, "contest": "", "has_followed_by": false}, "4sum-ii": {"id": 976, "unique_name": "4sum-ii", "user_status": null, "title": "4Sum II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 46, "description": "Given four lists A, B, C, D of integer values, compute how many tuples `(i, j, k, l)` there are such that `A[i] + B[j] + C[k] + D[l]` is zero.\r\n\r\nTo make problem a bit easier, all A, B, C, D have same length of N where 0 \u2264 N \u2264 500. All integers are in the range of -2^28 to 2^28 - 1 and the result is guaranteed to be at most 2^31 - 1.", "notice": "", "clarification": "", "example": "```\r\nInput:\r\nA = [ 1, 2]\r\nB = [-2,-1]\r\nC = [-1, 2]\r\nD = [ 0, 2]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nThe two tuples are:\r\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\r\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2]\n[-2,-1]\n[-1,2]\n[0,2]", "total_accepted": 89, "total_submissions": 191, "contest": "", "has_followed_by": false}, "base-7": {"id": 977, "unique_name": "base-7", "user_status": null, "title": "Base 7", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 53, "description": "Given an integer, return its base 7 string representation.", "notice": " The input will be in range of `[-1e7, 1e7].`", "clarification": "", "example": "Given  num = `100`, return `\"202\"`.\r\n\r\nGiven num = `-7`, return `\"-10\"`.", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "100", "total_accepted": 108, "total_submissions": 201, "contest": "", "has_followed_by": false}, "basic-calculator": {"id": 978, "unique_name": "basic-calculator", "user_status": null, "title": "Basic Calculator", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 52, "description": "Implement a basic calculator to evaluate a simple expression string.\r\n\r\nThe expression string may contain open `(` and closing parentheses `)`, the plus `+` or minus sign `-`, **non-negative** integers and empty spaces ` `.\r\n\r\nYou may assume that the given expression is always valid.", "notice": "**Do not** use the `eval` built-in library function.", "clarification": "", "example": "```\r\n\"1 + 1\" = 2\r\n\" 2-1 + 2 \" = 3\r\n\"(1+(4+5+2)-3)+(6+8)\" = 23\r\n```", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 980, "title": "Basic Calculator II", "unique_name": "basic-calculator-ii", "level": 2, "accepted_rate": 42}, {"id": 849, "title": "Basic Calculator III", "unique_name": "basic-calculator-iii", "level": 3, "accepted_rate": 41}, {"id": 424, "title": "Evaluate Reverse Polish Notation ", "unique_name": "evaluate-reverse-polish-notation", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "\"1 + 1\"", "total_accepted": 138, "total_submissions": 263, "contest": "", "has_followed_by": false}, "additive-number": {"id": 979, "unique_name": "additive-number", "user_status": null, "title": "Additive Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 56, "description": "Additive number is a string whose digits can form additive sequence.\r\n\r\nA valid additive sequence should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.", "notice": "Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\r\n\r\nGiven a string containing only digits `'0'-'9'`, write a function to determine if it's an additive number.", "clarification": "", "example": "`\"112358\"` is an additive number because the digits can form an additive sequence: `1, 1, 2, 3, 5, 8`.\r\n```\r\n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\r\n```\r\n`\"199100199\"` is also an additive number, the additive sequence is: `1, 99, 100, 199`.\r\n```\r\n1 + 99 = 100, 99 + 100 = 199\r\n```", "challenge": "How would you handle overflow for very large input integers?", "tags": [{"id": 65, "name": "Epic Systems", "cn_name": "Epic Systems", "type": 3, "unique_name": "epic-systems", "alias": "", "problem_count": 2}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"112358\"", "total_accepted": 75, "total_submissions": 132, "contest": "", "has_followed_by": false}, "basic-calculator-ii": {"id": 980, "unique_name": "basic-calculator-ii", "user_status": null, "title": "Basic Calculator II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Implement a basic calculator to evaluate a simple expression string.\r\n\r\nThe expression string contains only **non-negative** integers, `+`, `-`, `*`, `/` operators and empty spaces ` `. The integer division should truncate toward zero.\r\n\r\nYou may assume that the given expression is always valid.", "notice": "**Do not** use the `eval` built-in library function.", "clarification": "", "example": "```\r\n\"3+2*2\" = 7\r\n\" 3/2 \" = 1\r\n\" 3+5 / 2 \" = 5\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}], "related_problems": [{"id": 978, "title": "Basic Calculator", "unique_name": "basic-calculator", "level": 3, "accepted_rate": 52}, {"id": 849, "title": "Basic Calculator III", "unique_name": "basic-calculator-iii", "level": 3, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "\"3+2*2\"", "total_accepted": 128, "total_submissions": 299, "contest": "", "has_followed_by": false}, "basic-calculator-iv": {"id": 981, "unique_name": "basic-calculator-iv", "user_status": null, "title": "Basic Calculator IV", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 81, "description": "Given an `expression` such as `expression = \"e + 8 - a + 5\"` and an evaluation map such as `{\"e\": 1}` (given in terms of `evalvars = [\"e\"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[\"-1*a\",\"14\"]`\r\n\r\n* An expression alternates chunks and symbols, with a space separating each chunk and symbol.\r\n* A chunk is either an expression in parentheses, a variable, or a non-negative integer.\r\n* A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x\"` or `\"-x\"`.\r\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, `expression = \"1 + 2 * 3\"` has an answer of `[\"7\"]`.\r\n\r\nThe format of the output is as follows:\r\n\r\n* For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like `\"b*a*c\"`, only `\"a*b*c\"`.\r\n* Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, `\"a*a*b*c\"` has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\r\n* The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.\r\n* An example of a well formatted answer is `[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]` \r\n* Terms (including constant terms) with coefficient 0 are not included.  For example, an expression of \"0\" has an output of [].", "notice": "1. `expression` will have length in range `[1, 250]`.\r\n2. `evalvars`, `evalints` will have equal lengths in range `[0, 100]`.", "clarification": "", "example": "```\r\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\r\nOutput: [\"-1*a\",\"14\"]\r\n\r\nInput: expression = \"e - 8 + temperature - pressure\",\r\nevalvars = [\"e\", \"temperature\"], evalints = [1, 12]\r\nOutput: [\"-1*pressure\",\"5\"]\r\n\r\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\r\nOutput: [\"1*e*e\",\"-64\"]\r\n\r\nInput: expression = \"7 - 7\", evalvars = [], evalints = []\r\nOutput: []\r\n\r\nInput: expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []\r\nOutput: [\"5*a*b*c\"]\r\n\r\nInput: expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\",\r\nevalvars = [], evalints = []\r\nOutput: [\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 156, "name": "Intuit", "cn_name": "Intuit", "type": 3, "unique_name": "intuit", "alias": "", "problem_count": 3}], "related_problems": [{"id": 1061, "title": "Parse Lisp Expression", "unique_name": "parse-lisp-expression", "level": 3, "accepted_rate": 75}, {"id": 849, "title": "Basic Calculator III", "unique_name": "basic-calculator-iii", "level": 3, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "\"e + 8 - a + 5\"\n[\"e\"]\n[1]", "total_accepted": 28, "total_submissions": 33, "contest": "", "has_followed_by": false}, "arithmetic-slices": {"id": 982, "unique_name": "arithmetic-slices", "user_status": null, "title": "Arithmetic Slices", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 61, "description": "A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\r\n\r\nFor example, these are arithmetic sequence:\r\n```\r\n1, 3, 5, 7, 9\r\n7, 7, 7, 7\r\n3, -1, -5, -9\r\n```\r\nThe following sequence is not arithmetic.\r\n```\r\n1, 1, 2, 5, 7\r\n```\r\nA zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.\r\n\r\nA slice (P, Q) of array A is called arithmetic if the sequence:\r\nA[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.\r\n\r\nThe function should return the number of arithmetic slices in the array A.", "notice": "", "clarification": "", "example": "```\r\nA = [1, 2, 3, 4]\r\n\r\nreturn: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.\r\n```", "challenge": "", "tags": [{"id": 177, "name": "Aetion", "cn_name": "Aetion", "type": 3, "unique_name": "aetion", "alias": "", "problem_count": 1}, {"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 984, "title": "Arithmetic Slices II - Subsequence", "unique_name": "arithmetic-slices-ii-subsequence", "level": 3, "accepted_rate": 60}], "comment_count": 0, "testcase_sample": "[1,2,3,4]", "total_accepted": 92, "total_submissions": 148, "contest": "", "has_followed_by": false}, "baseball-game": {"id": 983, "unique_name": "baseball-game", "user_status": null, "title": "Baseball Game", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 56, "description": "You're now a baseball game point recorder.\r\n\r\nGiven a list of strings, each string can be one of the 4 following types:\r\n\r\n1. `Integer` (one round's score): Directly represents the number of points you get in this round.\r\n2. `\"+\"` (one round's score): Represents that the points you get in this round are the sum of the last two `valid` round's points.\r\n3. `\"D\"` (one round's score): Represents that the points you get in this round are the doubled data of the last `valid` round's points.\r\n4. `\"C\"` (an operation, which isn't a round's score): Represents the last `valid` round's points you get were invalid and should be removed.\r\nEach round's operation is permanent and could have an impact on the round before and the round after.\r\n\r\nYou need to return the sum of the points you could get in all the rounds.\r\n\r\n", "notice": "* The size of the input list will be between `1` and `1000`.\r\n* Every integer represented in the list will be between `-30000` and `30000`.", "clarification": "", "example": "Example1:\r\n```\r\nInput: [\"5\",\"2\",\"C\",\"D\",\"+\"]\r\nOutput: 30\r\nExplanation: \r\nRound 1: You could get 5 points. The sum is: 5.\r\nRound 2: You could get 2 points. The sum is: 7.\r\nOperation 1: The round 2's data was invalid. The sum is: 5.  \r\nRound 3: You could get 10 points (the round 2's data has been removed). The sum is: 15.\r\nRound 4: You could get 5 + 10 = 15 points. The sum is: 30.\r\n```\r\nExample2:\r\n```\r\nInput: [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\r\nOutput: 27\r\nExplanation: \r\nRound 1: You could get 5 points. The sum is: 5.\r\nRound 2: You could get -2 points. The sum is: 3.\r\nRound 3: You could get 4 points. The sum is: 7.\r\nOperation 1: The round 3's data is invalid. The sum is: 3.  \r\nRound 4: You could get -4 points (the round 3's data has been removed). The sum is: -1.\r\nRound 5: You could get 9 points. The sum is: 8.\r\nRound 6: You could get -4 + 9 = 5 points. The sum is 13.\r\nRound 7: You could get 9 + 5 = 14 points. The sum is 27.\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"5\",\"2\",\"C\",\"D\",\"+\"]", "total_accepted": 201, "total_submissions": 353, "contest": "", "has_followed_by": false}, "arithmetic-slices-ii-subsequence": {"id": 984, "unique_name": "arithmetic-slices-ii-subsequence", "user_status": null, "title": "Arithmetic Slices II - Subsequence", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 60, "description": "A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\r\n\r\nFor example, these are arithmetic sequences:\r\n```\r\n1, 3, 5, 7, 9\r\n7, 7, 7, 7\r\n3, -1, -5, -9\r\n```\r\nThe following sequence is not arithmetic.\r\n```\r\n1, 1, 2, 5, 7\r\n```\r\nA zero-indexed array A consisting of N numbers is given. A subsequence slice of that array is any sequence of integers (P0, P1, ..., Pk) such that 0 \u2264 P0 < P1 < ... < Pk < N.\r\n\r\nA subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic. In particular, this means that k \u2265 2.\r\n\r\nThe function should return the number of arithmetic subsequence slices in the array A.\r\n\r\nThe input contains N integers. Every integer is in the range of -2^31 and 231-1 and 0 \u2264 N \u2264 1000. The output is guaranteed to be less than 2^31-1.\r\n\r\n", "notice": "", "clarification": "", "example": "```\r\nInput: [2, 4, 6, 8, 10]\r\n\r\nOutput: 7\r\n\r\nExplanation:\r\nAll arithmetic subsequence slices are:\r\n[2,4,6]\r\n[4,6,8]\r\n[6,8,10]\r\n[2,4,6,8]\r\n[4,6,8,10]\r\n[2,4,6,8,10]\r\n[2,6,10]\r\n```", "challenge": "", "tags": [{"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [{"id": 982, "title": "Arithmetic Slices", "unique_name": "arithmetic-slices", "level": 2, "accepted_rate": 61}], "comment_count": 0, "testcase_sample": "[2,4,6,8,10]", "total_accepted": 53, "total_submissions": 86, "contest": "", "has_followed_by": false}, "can-i-win": {"id": 985, "unique_name": "can-i-win", "user_status": null, "title": "Can I Win", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 36, "description": "In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.\r\n\r\nWhat if we change the game so that players cannot re-use integers?\r\n\r\nFor example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.\r\n\r\nGiven an integer `maxChoosableInteger` and another integer `desiredTotal`, determine if the first player to move can force a win, assuming both players play optimally.\r\n\r\nYou can always assume that `maxChoosableInteger` will not be larger than 20 and `desiredTotal` will not be larger than 300.", "notice": "", "clarification": "", "example": "**Example**\r\n```\r\nInput:\r\nmaxChoosableInteger = 10\r\ndesiredTotal = 11\r\n\r\nOutput:\r\nfalse\r\n\r\nExplanation:\r\nNo matter which integer the first player choose, the first player will lose.\r\nThe first player can choose an integer from 1 up to 10.\r\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\r\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\r\nSame with other integers chosen by the first player, the second player will always win.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 913, "title": "Flip Game II", "unique_name": "flip-game-ii", "level": 2, "accepted_rate": 46}, {"id": 707, "title": "Optimal Account Balancing", "unique_name": "optimal-account-balancing", "level": 4, "accepted_rate": 17}], "comment_count": 0, "testcase_sample": "10\n11", "total_accepted": 71, "total_submissions": 197, "contest": "", "has_followed_by": false}, "battleships-in-a-board": {"id": 986, "unique_name": "battleships-in-a-board", "user_status": null, "title": "Battleships in a Board", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 79, "description": "Given an 2D board, count how many battleships are in it. The battleships are represented with `'X'`s, empty slots are represented with `'.'`s. You may assume the following rules:\r\n* You receive a valid board, made of only battleships or empty slots.\r\n* Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape `1xN` (1 row, N columns) or `Nx1` (N rows, 1 column), where N can be of any size.\r\n* At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.", "notice": "", "clarification": "", "example": "**Valid Example:**\r\n```\r\nX..X\r\n...X\r\n...X\r\n```\r\nIn the above board there are 2 battleships.\r\n**Invalid Example:**\r\n```\r\n...X\r\nXXXX\r\n...X\r\n```\r\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.", "challenge": "Could you do it in **one-pass**, using only **O(1) extra memory** and **without modifying** the value of the board?", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"X..X\",\"...X\",\"...X\"]", "total_accepted": 115, "total_submissions": 144, "contest": "", "has_followed_by": false}, "binary-number-with-alternating-bits": {"id": 987, "unique_name": "binary-number-with-alternating-bits", "user_status": null, "title": "Binary Number with Alternating Bits", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 75, "description": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: 5\r\nOutput: True\r\nExplanation:\r\nThe binary representation of 5 is: 101\r\n```\r\n**Example 2:**\r\n```\r\nInput: 7\r\nOutput: False\r\nExplanation:\r\nThe binary representation of 7 is: 111.\r\n```\r\n**Example 3:**\r\n```\r\nInput: 11\r\nOutput: False\r\nExplanation:\r\nThe binary representation of 11 is: 1011.\r\n```\r\n**Example 4:**\r\n```\r\nInput: 10\r\nOutput: True\r\nExplanation:\r\nThe binary representation of 10 is: 1010.\r\n```", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}], "related_problems": [{"id": 973, "title": "1-bit and 2-bit Characters", "unique_name": "1-bit-and-2-bit-characters", "level": 1, "accepted_rate": 51}, {"id": 664, "title": "Counting Bits", "unique_name": "counting-bits", "level": 2, "accepted_rate": 51}, {"id": 236, "title": "Swap Bits", "unique_name": "swap-bits", "level": 1, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "5", "total_accepted": 147, "total_submissions": 194, "contest": "", "has_followed_by": false}, "arranging-coins": {"id": 988, "unique_name": "arranging-coins", "user_status": null, "title": "Arranging Coins", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.\r\n\r\nGiven n, find the total number of **full** staircase rows that can be formed.\r\n\r\nn is a non-negative integer and fits within the range of a 32-bit signed integer.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nn = 5\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 3rd row is incomplete, we return 2.\r\n```\r\n**Example 2:**\r\n```\r\nn = 8\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 4th row is incomplete, we return 3.\r\n```", "challenge": "", "tags": [{"id": 109, "name": "GoDaddy", "cn_name": "GoDaddy", "type": 3, "unique_name": "godaddy", "alias": "", "problem_count": 2}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "5", "total_accepted": 201, "total_submissions": 484, "contest": "", "has_followed_by": false}, "array-nesting": {"id": 989, "unique_name": "array-nesting", "user_status": null, "title": "Array Nesting", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 54, "description": "A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\r\n\r\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]\u00e2\u20ac\u00a6 By that analogy, we stop adding right before a duplicate element occurs in S.", "notice": "1.N is an integer within the range [1, 20,000].\r\n2.The elements of A are all distinct.\r\n3.Each element of A is an integer within the range [0, N-1].", "clarification": "", "example": "```\r\nInput: A = [5,4,0,3,1,6,2]\r\nOutput: 4\r\nExplanation: \r\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\r\n\r\nOne of the longest S[K]:\r\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\r\n```", "challenge": "", "tags": [{"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 551, "title": "Nested List Weight Sum", "unique_name": "nested-list-weight-sum", "level": 1, "accepted_rate": 47}, {"id": 528, "title": "Flatten Nested List Iterator", "unique_name": "flatten-nested-list-iterator", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[5,4,0,3,1,6,2]", "total_accepted": 87, "total_submissions": 158, "contest": "", "has_followed_by": false}, "beautiful-arrangement": {"id": 990, "unique_name": "beautiful-arrangement", "user_status": null, "title": "Beautiful Arrangement", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Suppose you have **N** integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these **N** numbers successfully if one of the following is true for the `ith` position (1 <= i <= N) in this array:\r\n\r\n1. The number at the `ith` position is divisible by i.\r\n2. **i** is divisible by the number at the ith position.\r\nNow given N, how many beautiful arrangements can you construct?", "notice": "**N** is a positive integer and will not exceed `15`.", "clarification": "", "example": "```\r\nInput: 2\r\nOutput: 2\r\nExplanation: \r\n\r\nThe first beautiful arrangement is [1, 2]:\r\n\r\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\r\n\r\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\r\n\r\nThe second beautiful arrangement is [2, 1]:\r\n\r\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\r\n\r\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\r\n```", "challenge": "", "tags": [{"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 992, "title": "Beautiful Arrangement II", "unique_name": "beautiful-arrangement-ii", "level": 2, "accepted_rate": 62}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 396, "total_submissions": 793, "contest": "", "has_followed_by": false}, "bulb-switcher": {"id": 991, "unique_name": "bulb-switcher", "user_status": null, "title": "Bulb Switcher", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 54, "description": "There are `n` bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb. Find how many bulbs are on after `n` rounds.", "notice": "", "clarification": "", "example": "**Example:**\r\n```\r\nGiven n = 3. \r\n\r\nAt first, the three bulbs are [off, off, off].\r\nAfter first round, the three bulbs are [on, on, on].\r\nAfter second round, the three bulbs are [on, off, on].\r\nAfter third round, the three bulbs are [on, off, off]. \r\n\r\nSo you should return 1, because there is only one bulb is on.\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 704, "title": "Bulb Switcher II", "unique_name": "bulb-switcher-ii", "level": 2, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "3", "total_accepted": 73, "total_submissions": 132, "contest": "", "has_followed_by": false}, "beautiful-arrangement-ii": {"id": 992, "unique_name": "beautiful-arrangement-ii", "user_status": null, "title": "Beautiful Arrangement II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 62, "description": "Given two integers `n` and `k`, you need to construct a list which contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: \r\nSuppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly `k` distinct integers.\r\n\r\nIf there are multiple answers, print any of them.", "notice": "The `n` and `k` are in the range `1 <= k < n <= 10^4`.", "clarification": "", "example": "**Example1:**\r\n```\r\nInput: n = 3, k = 1\r\nOutput: [1, 2, 3]\r\nExplanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.\r\n```\r\n**Example2:**\r\n```\r\nInput: n = 3, k = 2\r\nOutput: [1, 3, 2]\r\nExplanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 990, "title": "Beautiful Arrangement", "unique_name": "beautiful-arrangement", "level": 2, "accepted_rate": 49}], "comment_count": 0, "testcase_sample": "3\n1", "total_accepted": 97, "total_submissions": 154, "contest": "", "has_followed_by": false}, "array-partition-i": {"id": 993, "unique_name": "array-partition-i", "user_status": null, "title": "Array Partition I", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 77, "description": "Given an array of **2n** integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.", "notice": "1.**n** is a positive integer, which is in the range of [1, 10000].\r\n2.All the integers in the array will be in the range of [-10000, 10000].", "clarification": "", "example": "```\r\nInput: [1,4,3,2]\r\n\r\nOutput: 4\r\nExplanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1]", "total_accepted": 203, "total_submissions": 260, "contest": "", "has_followed_by": false}, "contiguous-array": {"id": 994, "unique_name": "contiguous-array", "user_status": null, "title": "Contiguous Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 45, "description": "Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.", "notice": "The length of the given binary array will not exceed 50,000.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [0,1]\r\nOutput: 2\r\nExplanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\r\n```\r\n**Example 2:**\r\n```\r\nInput: [0,1,0]\r\nOutput: 2\r\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\r\n```", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 911, "title": "Maximum Size Subarray Sum Equals k", "unique_name": "maximum-size-subarray-sum-equals-k", "level": 2, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "[1,0]", "total_accepted": 233, "total_submissions": 514, "contest": "", "has_followed_by": false}, "best-time-to-buy-and-sell-stock-with-cooldown": {"id": 995, "unique_name": "best-time-to-buy-and-sell-stock-with-cooldown", "user_status": null, "title": "Best Time to Buy and Sell Stock with Cooldown", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Say you have an array for which the ith element is the price of a given stock on day i.\r\n\r\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:\r\n\r\n- You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\r\n- After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)", "notice": "", "clarification": "", "example": "prices = [1, 2, 3, 0, 2]\r\nmaxProfit = 3\r\ntransactions = [buy, sell, cooldown, buy, sell]", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 150, "title": "Best Time to Buy and Sell Stock II ", "unique_name": "best-time-to-buy-and-sell-stock-ii", "level": 2, "accepted_rate": 50}, {"id": 149, "title": "Best Time to Buy and Sell Stock", "unique_name": "best-time-to-buy-and-sell-stock", "level": 2, "accepted_rate": 41}], "comment_count": 0, "testcase_sample": "[1,2,3,0,2]", "total_accepted": 146, "total_submissions": 293, "contest": "", "has_followed_by": false}, "maximum-slope-straight-line": {"id": 996, "title": "Maximum Slope Straight Line", "unique_name": "maximum-slope-straight-line", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "print-organization-chart": {"id": 997, "title": "Print Organization Chart", "unique_name": "print-organization-chart", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "construction-queue": {"id": 998, "title": "Construction Queue", "unique_name": "construction-queue", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "best-time-to-buy-and-sell-stock-with-transaction-fee": {"id": 1000, "unique_name": "best-time-to-buy-and-sell-stock-with-transaction-fee", "user_status": null, "title": "Best Time to Buy and Sell Stock with Transaction Fee", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.\r\n\r\nYou may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)\r\n\r\nReturn the maximum profit you can make.", "notice": "0 < prices.length <= 50000.\r\n0 < prices[i] < 50000.\r\n0 <= fee < 50000.", "clarification": "", "example": "Input: prices = [1, 3, 2, 8, 4, 9], fee = 2\r\nOutput: 8\r\nExplanation: The maximum profit can be achieved by:\r\nBuying at prices[0] = 1\r\nSelling at prices[3] = 8\r\nBuying at prices[4] = 4\r\nSelling at prices[5] = 9\r\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 150, "title": "Best Time to Buy and Sell Stock II ", "unique_name": "best-time-to-buy-and-sell-stock-ii", "level": 2, "accepted_rate": 50}], "comment_count": 0, "testcase_sample": "[1,4,6,2,8,3,10,14]\n3", "total_accepted": 208, "total_submissions": 357, "contest": "", "has_followed_by": false}, "asteroid-collision": {"id": 1001, "unique_name": "asteroid-collision", "user_status": null, "title": "Asteroid Collision", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 29, "description": "We are given an array asteroids of integers representing asteroids in a row.\r\n\r\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\r\n\r\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.", "notice": "The length of asteroids will be at most 10000.\r\nEach asteroid will be a non-zero integer in the range [-1000, 1000]..", "clarification": "", "example": "Input: \r\nasteroids = [5, 10, -5]\r\nOutput: [5, 10]\r\nExplanation: \r\nThe 10 and -5 collide resulting in 10.  The 5 and 10 never collide.\r\n\r\nInput: \r\nasteroids = [10, 2, -5]\r\nOutput: [10]\r\nExplanation: \r\nThe 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}], "related_problems": [{"id": 1138, "title": "Can Place Flowers", "unique_name": "can-place-flowers", "level": 1, "accepted_rate": 65}], "comment_count": 0, "testcase_sample": "[5,10,-5]", "total_accepted": 131, "total_submissions": 445, "contest": "", "has_followed_by": false}, "bus-routes": {"id": 1002, "unique_name": "bus-routes", "user_status": null, "title": "Bus Routes", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "We have a list of bus routes. Each `routes[i]` is a bus route that the i-th bus repeats forever. For example if `routes[0] = [1, 5, 7]`, this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.\r\n\r\nWe start at bus stop `S` (initially not on a bus), and we want to go to bus stop `T`. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.", "notice": "1.`1 <= routes.length <= 500`.\r\n2.`1 <= routes[i].length <= 500`.\r\n3.`0 <= routes[i][j] < 10 ^ 6`.", "clarification": "", "example": "```\r\nInput: \r\nroutes = [[1, 2, 7], [3, 6, 7]]\r\nS = 1\r\nT = 6\r\nOutput: 2\r\nExplanation: \r\nThe best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1, 2, 7], [3, 6, 7]]\n1\n6", "total_accepted": 58, "total_submissions": 194, "contest": "", "has_followed_by": false}, "binary-tree-pruning": {"id": 1003, "unique_name": "binary-tree-pruning", "user_status": null, "title": "Binary Tree Pruning", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 67, "description": "We are given the head node **root** of a binary tree, where additionally every node's value is either a 0 or a 1.\r\n\r\nReturn the same tree where every subtree (of the given tree) not containing a 1 has been removed.\r\n\r\n(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)\r\n", "notice": "1.The binary tree will have at most `100 nodes`.\r\n2.The value of each node will only be `0` or `1`.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: [1,#,0,0,1]\r\nOutput: [1,#,0,#,1]\r\n \r\nExplanation: \r\nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\r\nThe diagram on the right represents the answer.\r\n```\r\n![](https://lintcode-media.s3.amazonaws.com/problem/1028_2.png \"\")\r\n```\r\nExample 2:\r\nInput: [1,0,1,0,0,0,1]\r\nOutput: [1,#,1,#,1]\r\n```\r\n![](https://lintcode-media.s3.amazonaws.com/problem/1028_1.png \"\")\r\n```\r\nExample 3:\r\nInput: [1,1,0,1,1,0,1,0]\r\nOutput: [1,1,0,1,1,#,1]\r\n```\r\n![](https://lintcode-media.s3.amazonaws.com/problem/1028.png \"\")\r\n", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 113, "name": "Hulu", "cn_name": "Hulu", "type": 3, "unique_name": "hulu", "alias": "", "problem_count": 11}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,#,0,0,1}", "total_accepted": 109, "total_submissions": 161, "contest": "", "has_followed_by": false}, "largest-triangle-area": {"id": 1005, "unique_name": "largest-triangle-area", "user_status": null, "title": "Largest Triangle Area", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 65, "description": "You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.\r\n\r\nExample:\r\n~~~~.\r\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\r\nOutput: 2\r\nExplanation: \r\nThe five points are show in the figure below. The red triangle is the largest.\r\n~~~~\r\n\r\n![](http://lintcode-media.s3.amazonaws.com/problem/1027.png \"\")", "notice": "", "clarification": "", "example": "3 <= points.length <= 50.\r\nNo points will be duplicated.\r\n -50 <= points[i][j] <= 50.\r\nAnswers within 10^-6 of the true value will be accepted as correct.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,0],[0,0],[0,1]]", "total_accepted": 94, "total_submissions": 142, "contest": "", "has_followed_by": false}, "subdomain-visit-count": {"id": 1006, "unique_name": "subdomain-visit-count", "user_status": null, "title": "Subdomain Visit Count", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 66, "description": "A website domain like \"discuss.lintcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"lintcode.com\", and at the lowest level, \"discuss.lintcode.com\". When we visit a domain like \"discuss.lintcode.com\", we will also visit the parent domains \"lintcode.com\" and \"com\" implicitly.\r\n\r\nNow, call a \"count-paired domain\" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be \"9001 discuss.lintcode.com\".\r\n\r\nWe are given a list `cpdomains` of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.", "notice": "* The length of `cpdomains` will not exceed `100`. \r\n* The length of each domain name will not exceed `100`.\r\n* Each address will have either 1 or 2 \".\" characters.\r\n* The input count in any count-paired domain will not exceed `10000`.\r\n* The answer output can be returned in any order.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \r\n[\"9001 discuss.lintcode.com\"]\r\nOutput: \r\n[\"9001 discuss.lintcode.com\", \"9001 lintcode.com\", \"9001 com\"]\r\nExplanation: \r\nWe only have one website domain: \"discuss.lintcode.com\". As discussed above, the subdomain \"lintcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: \r\n[\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\r\nOutput: \r\n[\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\r\nExplanation: \r\nWe will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times. For the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\r\n```", "challenge": "", "tags": [{"id": 169, "name": "Roblox", "cn_name": "Roblox", "type": 3, "unique_name": "roblox", "alias": "", "problem_count": 1}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"9001 discuss.lintcode.com\"]", "total_accepted": 82, "total_submissions": 121, "contest": "", "has_followed_by": false}, "chalkboard-xor-game": {"id": 1007, "unique_name": "chalkboard-xor-game", "user_status": null, "title": "Chalkboard XOR Game", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 73, "description": "We are given non-negative integers nums[i] which are written on a chalkboard.  Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.  If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses.  (Also, we'll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)\r\n\r\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\r\n\r\nReturn True if and only if Alice wins the game, assuming both players play optimally.", "notice": "1 <= N <= 1000. \r\n0 <= nums[i] <= 2^16.", "clarification": "", "example": "Input: nums = [1, 1, 2]\r\nOutput: false\r\nExplanation: \r\nAlice has two choices: erase 1 or erase 2. \r\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \r\nIf Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.", "challenge": "", "tags": [{"id": 174, "name": "Garena", "cn_name": "Garena", "type": 3, "unique_name": "garena", "alias": "", "problem_count": 1}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,2]", "total_accepted": 34, "total_submissions": 45, "contest": "", "has_followed_by": false}, "expressive-words": {"id": 1008, "unique_name": "expressive-words", "user_status": null, "title": "Expressive Words", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 50, "description": "Sometimes people repeat letters to represent extra feeling, such as \"hello\" -> \"heeellooo\", \"hi\" -> \"hiiii\".  Here, we have groups, of adjacent letters that are all the same character, and adjacent characters to the group are different.  A group is extended if that group is length 3 or more, so \"e\" and \"o\" would be extended in the first example, and \"i\" would be extended in the second example.  As another example, the groups of \"abbcccaaaa\" would be \"a\", \"bb\", \"ccc\", and \"aaaa\"; and \"ccc\" and \"aaaa\" are the extended groups of that string.\r\n\r\nFor some given string S, a query word is stretchy if it can be made to be equal to S by extending some groups.  Formally, we are allowed to repeatedly choose a group (as defined above) of characters c, and add some number of the same character c to it so that the length of the group is 3 or more.  Note that we cannot extend a group of size one like \"h\" to a group of size two like \"hh\" - all extensions must leave the group extended - ie., at least 3 characters long.\r\n\r\nGiven a list of query words, return the number of words that are stretchy. ", "notice": "0 <= len(S) <= 100.\r\n0 <= len(words) <= 100.\r\n0 <= len(words[i]) <= 100.\r\nS and all words in words consist only of lowercase letters", "clarification": "", "example": "```\r\nInput: \r\nS = \"heeellooo\"\r\nwords = [\"hello\", \"hi\", \"helo\"]\r\nOutput: 1\r\nExplanation: \r\nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\r\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not extended.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"zzzzzyyyyy\"\n[\"zzyy\",\"zy\",\"zyy\"]", "total_accepted": 54, "total_submissions": 105, "contest": "", "has_followed_by": false}, "max-increase-to-keep-city-skyline": {"id": 1010, "unique_name": "max-increase-to-keep-city-skyline", "user_status": null, "title": "Max Increase to Keep City Skyline", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 93, "description": "In a 2 dimensional array `grid`, each value `grid[i][j]` represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. \r\n\r\nAt the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.\r\n\r\nWhat is the maximum total sum that the height of the buildings can be increased?", "notice": "* `1 < grid.length = grid[0].length <= 50`.\r\n* All heights `grid[i][j]` are in the range `[0, 100]`.\r\n* All buildings in grid[i][j] occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.", "clarification": "", "example": "```\r\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\r\nOutput: 35\r\nExplanation: \r\nThe grid is:\r\n[ [3, 0, 8, 4], \r\n  [2, 4, 5, 7],\r\n  [9, 2, 6, 3],\r\n  [0, 3, 1, 0] ]\r\n\r\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\r\nThe skyline viewed from left or right is: [8, 7, 9, 3]\r\n\r\nThe grid after increasing the height of buildings without affecting skylines is:\r\n\r\ngridNew = [ [8, 4, 8, 7],\r\n            [7, 4, 7, 7],\r\n            [9, 4, 8, 7],\r\n            [3, 3, 3, 3] ]\r\n\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]", "total_accepted": 72, "total_submissions": 76, "contest": "", "has_followed_by": false}, "number-of-lines-to-write-string": {"id": 1011, "unique_name": "number-of-lines-to-write-string", "user_status": null, "title": "Number of Lines To Write String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 70, "description": "We are to write the letters of a given string `S`, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array `widths`, an array where widths[0] is the width of 'a', widths[1] is the width of 'b', ..., and widths[25] is the width of 'z'.\r\n\r\nNow answer two questions: how many lines have at least one character from `S`, and what is the width used by the last such line? Return your answer as an integer list of length 2.", "notice": "* The length of `S` will be in the range `[1, 1000]`.\r\n* `S` will only contain lowercase letters.\r\n* `widths` is an array of length `26`.\r\n* `widths[i]` will be in the range of `[2, 10]`.", "clarification": "", "example": "**Example1 :**\r\n```\r\nInput: \r\nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = \"abcdefghijklmnopqrstuvwxyz\"\r\nOutput: [3, 60]\r\nExplanation: \r\nAll letters have the same length of 10. To write all 26 letters,\r\nwe need two full lines and one line with 60 units.\r\n```\r\n\r\n**Example2:**\r\n```\r\nInput: \r\nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = \"bbbcccdddaaa\"\r\nOutput: [2, 4]\r\nExplanation: \r\nAll letters except 'a' have the same length of 10, and \r\n\"bbbcccdddaa\" will cover 9 * 10 + 2 * 4 = 98 units.\r\nFor the last 'a', it is written on the second line because\r\nthere is only 2 units left in the first line.\r\nSo the answer is 2 lines, plus 4 units in the second line.\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n\"abcdefghijklmnopqrstuvwxyz\"", "total_accepted": 93, "total_submissions": 131, "contest": "", "has_followed_by": false}, "unique-morse-code-words": {"id": 1013, "unique_name": "unique-morse-code-words", "user_status": null, "title": "Unique Morse Code Words", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 88, "description": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `\"a\"` maps to `\".-\"`, `\"b\"` maps to `\"-...\"`, `\"c\"` maps to `\"-.-.\"`, and so on.\r\n\r\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\r\n```\r\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\r\n```\r\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-.-....-\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.\r\n\r\nReturn the number of different transformations among all words we have.", "notice": "* The length of `words` will be at most `100`.\r\n* Each `words[i]` will have length in range `[1, 12]`.\r\n* `words[i]` will only consist of lowercase letters.", "clarification": "", "example": "```\r\nExample:\r\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\r\nOutput: 2\r\nExplanation: \r\nThe transformation of each word is:\r\n\"gin\" -> \"--...-.\"\r\n\"zen\" -> \"--...-.\"\r\n\"gig\" -> \"--...--.\"\r\n\"msg\" -> \"--...--.\"\r\n\r\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"gin\", \"zen\", \"gig\", \"msg\"]", "total_accepted": 102, "total_submissions": 114, "contest": "", "has_followed_by": false}, "bricks-falling-when-hit": {"id": 1014, "unique_name": "bricks-falling-when-hit", "user_status": null, "title": "Bricks Falling When Hit", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 38, "description": "We have a grid of 1s and 0s; the 1s in a cell represent bricks.  A brick will not drop if and only if it is directly connected to the top of the grid, or at least one of its (4-way) adjacent bricks will not drop.\r\n\r\nWe will do some erasures sequentially. Each time we want to do the erasure at the location (i, j), the brick (if it exists) on that location will disappear, and then some other bricks may drop because of that erasure.\r\n\r\nReturn an array representing the number of bricks that will drop after each erasure in sequence.", "notice": "1.The number of rows and columns in the grid will be in the range [1, 200].\r\n2.The number of erasures will not exceed the area of the grid.\r\n3.It is guaranteed that each erasure will be different from any other erasure, and located inside the grid.\r\n4.An erasure may refer to a location with no brick - if it does, no bricks drop.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: \r\ngrid = [[1,0,0,0],[1,1,1,0]]\r\nhits = [[1,0]]\r\nOutput: [2]\r\nExplanation: \r\nIf we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So we should return 2.\r\n```\r\n```\r\nExample 2:\r\nInput: \r\ngrid = [[1,0,0,0],[1,1,0,0]]\r\nhits = [[1,1],[1,0]]\r\nOutput: [0,0]\r\nExplanation: \r\nWhen we erase the brick at (1, 0), the brick at (1, 1) has already disappeared due to the last move. So each erasure will cause no bricks dropping.  Note that the erased brick (1, 0) will not be counted as a dropped brick.\r\n```", "challenge": "", "tags": [{"id": 59, "name": "Union Find", "cn_name": "Union Find", "type": 21, "unique_name": "union-find", "alias": "", "problem_count": 11}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,0,0,0],[1,1,1,0]]\n[[1,0]]", "total_accepted": 65, "total_submissions": 167, "contest": "", "has_followed_by": false}, "find-eventual-safe-states": {"id": 1015, "unique_name": "find-eventual-safe-states", "user_status": null, "title": "Find Eventual Safe States", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.\r\n\r\nNow, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.\r\n\r\nWhich nodes are eventually safe?  Return them as an array in sorted order.\r\n\r\nThe directed graph has N nodes with labels 0, 1, ..., N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.", "notice": "graph will have length at most 10000.\r\nThe number of edges in the graph will not exceed 32000.\r\nEach graph[i] will be a sorted list of different integers, chosen within the range [0, graph.length - 1].", "clarification": "", "example": "```\r\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\r\nOutput: [2,4,5,6]\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2],[2,3],[5],[0],[5],[],[]]", "total_accepted": 56, "total_submissions": 140, "contest": "", "has_followed_by": false}, "minimum-swaps-to-make-sequences-increasing": {"id": 1016, "unique_name": "minimum-swaps-to-make-sequences-increasing", "user_status": null, "title": "Minimum Swaps To Make Sequences Increasing", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "We have two integer sequences `A` and `B` of the same non-zero length.\r\n\r\nWe are allowed to swap elements `A[i]` and `B[i]`.  Note that both elements are in the same index position in their respective sequences.\r\n\r\nAt the end of some number of swaps, `A` and `B` are both strictly increasing.  (A sequence is strictly increasing if and only if `A[0] < A[1] < A[2] < ... < A[A.length - 1]`.)\r\n\r\nGiven A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.", "notice": "1.`A`, `B` are arrays with the same length, and that length will be in the range `[1, 1000]`.\r\n2.`A[i]`, `B[i]` are integer values in the range `[0, 2000]`.", "clarification": "", "example": "```\r\nInput: A = [1,3,5,4], B = [1,2,3,7]\r\nOutput: 1\r\nExplanation: \r\nSwap A[3] and B[3].  Then the sequences are:\r\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\r\nwhich are both strictly increasing.\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,3,5,4]\n[1,2,3,7]", "total_accepted": 154, "total_submissions": 300, "contest": "", "has_followed_by": false}, "similar-rgb-color": {"id": 1017, "unique_name": "similar-rgb-color", "user_status": null, "title": "Similar RGB Color", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "In the following, every capital letter represents some hexadecimal digit from `0` to `f`.\r\n\r\nThe red-green-blue color `\"#AABBCC\"` can be written as `\"#ABC\"` in shorthand.  For example, `\"#15c\"` is shorthand for the color `\"#1155cc\"`.\r\n\r\nNow, say the similarity between two colors `\"#ABCDEF\"` and `\"#UVWXYZ\"` is `-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2`.\r\n\r\nGiven the color `\"#ABCDEF\"`, return a 7 character color that is most similar to `#ABCDEF`, and has a shorthand (that is, it can be represented as some `\"#XYZ\"`)", "notice": "* `color` is a string of length `7`.\r\n* `color` is a valid RGB color: for `i > 0`, `color[i]` is a hexadecimal digit from `0` to `f`\r\n* Any answer which has the same (highest) similarity as the best answer will be accepted.\r\n* All inputs and outputs should use lowercase letters, and the output is 7 characters.", "clarification": "", "example": "```\r\nInput: color = \"#09f166\"\r\nOutput: \"#11ee66\"\r\nExplanation:  \r\nThe similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.\r\nThis is the highest among any shorthand color.\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"#09f166\"", "total_accepted": 639, "total_submissions": 1114, "contest": "", "has_followed_by": false}, "champagne-tower": {"id": 1018, "unique_name": "champagne-tower", "user_status": null, "title": "Champagne Tower", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup (250ml) of champagne.\r\n\r\nThen, some champagne is poured in the first glass at the top.  When the top most glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has it's excess champagne fall on the floor.)\r\n\r\nFor example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\r\n![](http://lintcode-media.s3.amazonaws.com/problem/tower.png \"\")\r\nNow after pouring some non-negative integer cups of champagne, return how full the j-th glass in the i-th row is (both i and j are 0 indexed.)\r\n\r\n \r\n\r\nExample 1:\r\nInput: poured = 1, query_glass = 1, query_row = 1\r\nOutput: 0.0\r\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n\r\nExample 2:\r\nInput: poured = 2, query_glass = 1, query_row = 1\r\nOutput: 0.5\r\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.", "notice": "", "clarification": "", "example": "poured will be in the range of [0, 10 ^ 9].\r\nquery_glass and query_row will be in the range of [0, 99].", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "3\n0\n0", "total_accepted": 34, "total_submissions": 57, "contest": "", "has_followed_by": false}, "smallest-rotation-with-highest-score": {"id": 1019, "unique_name": "smallest-rotation-with-highest-score", "user_status": null, "title": "Smallest Rotation with Highest Score", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 75, "description": "Given an array `A`, we may rotate it by a non-negative integer `K` so that the array becomes `A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]`.  Afterward, any entries that are less than or equal to their index are worth 1 point. \r\n\r\nFor example, if we have `[2, 4, 1, 3, 0]`, and we rotate by `K = 2`, it becomes `[1, 3, 0, 2, 4]`.  This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\r\n\r\nOver all possible rotations, return the rotation index K that corresponds to the highest score we could receive.  If there are multiple answers, return the smallest such index K.", "notice": "* `A` will have length at most `20000`.\r\n* `A[i]` will be in the range `[0, A.length]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [2, 3, 1, 4, 0]\r\nOutput: 3\r\nExplanation:  \r\nScores for each K are listed below: \r\nK = 0,  A = [2,3,1,4,0],    score 2\r\nK = 1,  A = [3,1,4,0,2],    score 3\r\nK = 2,  A = [1,4,0,2,3],    score 3\r\nK = 3,  A = [4,0,2,3,1],    score 4\r\nK = 4,  A = [0,2,3,1,4],    score 3\r\nSo we should choose K = 3, which has the highest score.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: [1, 3, 0, 2, 4]\r\nOutput: 0\r\nExplanation:  A will always have 3 points no matter how it shifts.\r\nSo we will choose the smallest K, which is 0.\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[2, 3, 1, 4, 0]", "total_accepted": 55, "total_submissions": 72, "contest": "", "has_followed_by": false}, "all-paths-from-source-to-target": {"id": 1020, "unique_name": "all-paths-from-source-to-target", "user_status": null, "title": "All Paths From Source to Target", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 55, "description": "Given a directed, acyclic graph of `N` nodes.  Find all possible paths from node `0` to node `N-1`, and return them in any order.\r\n\r\nThe graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.", "notice": "* The number of nodes in the graph will be in the range `[2, 15]`.\r\n* You can print different paths in any order, but you should keep the order of nodes inside one path.", "clarification": "", "example": "```\r\nInput: [[1,2], [3], [3], []] \r\nOutput: [[0,1,3],[0,2,3]] \r\nExplanation: The graph looks like this:\r\n0--->1\r\n|    |\r\nv    v\r\n2--->3\r\nThere are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2],[3],[3],[]]", "total_accepted": 55, "total_submissions": 97, "contest": "", "has_followed_by": false}, "number-of-subarrays-with-bounded-maximum": {"id": 1021, "unique_name": "number-of-subarrays-with-bounded-maximum", "user_status": null, "title": "Number of Subarrays with Bounded Maximum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 63, "description": "We are given an array `A` of positive integers, and two positive integers `L` and `R` `(L <= R)`.\r\n\r\nReturn the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least `L` and at most `R`.", "notice": "1.L, R  and `A[i]` will be an integer in the range `[0, 10^9]`.\r\n2.The length of `A` will be in the range of `[1, 50000]`.", "clarification": "", "example": "```\r\nExample :\r\nInput: \r\nA = [2, 1, 4, 3]\r\nL = 2\r\nR = 3\r\nOutput: 3\r\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\r\n```", "challenge": "", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [], "comment_count": 0, "testcase_sample": "[2,9,2,5,6]\n2\n8", "total_accepted": 58, "total_submissions": 91, "contest": "", "has_followed_by": false}, "valid-tic-tac-toe-state": {"id": 1022, "unique_name": "valid-tic-tac-toe-state", "user_status": null, "title": "Valid Tic-Tac-Toe State", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 52, "description": "A Tic-Tac-Toe board is given as a string array `board`. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\r\n\r\nThe `board` is a 3 x 3 array, and consists of characters `\" \"`, `\"X\"`, and `\"O\"`.  The \" \" character represents an empty square.\r\n\r\nHere are the rules of Tic-Tac-Toe:\r\n\r\n* Players take turns placing characters into empty squares (\" \").\r\n* The first player always places \"X\" characters, while the second player always places \"O\" characters.\r\n* \"X\" and \"O\" characters are always placed into empty squares, never filled ones.\r\n* The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\r\n* The game also ends if all squares are non-empty.\r\n* No more moves can be played if the game is over.", "notice": "* `board` is a length-3 array of strings, where each string `board[i]` has length 3.\r\n* Each `board[i][j]` is a character in the set `{\" \", \"X\", \"O\"}`.\r\n", "clarification": "", "example": "```\r\nExample 1:\r\nInput: board = [\"O  \", \"   \", \"   \"]\r\nOutput: false\r\nExplanation: The first player always plays \"X\".\r\n\r\nExample 2:\r\nInput: board = [\"XOX\", \" X \", \"   \"]\r\nOutput: false\r\nExplanation: Players take turns making moves.\r\n\r\nExample 3:\r\nInput: board = [\"XXX\", \"   \", \"OOO\"]\r\nOutput: false\r\n\r\nExample 4:\r\nInput: board = [\"XOX\", \"O O\", \"XOX\"]\r\nOutput: true\r\n\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 8, "name": "Recursion", "cn_name": "Recursion", "type": 13, "unique_name": "recursion", "alias": "", "problem_count": 34}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 746, "title": "Design Tic-Tac-Toe", "unique_name": "design-tic-tac-toe", "level": 3, "accepted_rate": 7}], "comment_count": 0, "testcase_sample": "[\"O  \", \"   \", \"   \"]", "total_accepted": 63, "total_submissions": 119, "contest": "", "has_followed_by": false}, "preimage-size-of-factorial-zeroes-function": {"id": 1023, "unique_name": "preimage-size-of-factorial-zeroes-function", "user_status": null, "title": "Preimage Size of Factorial Zeroes Function", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 70, "description": "Let `f(x)` be the number of zeroes at the end of `x!`. (Recall that `x! = 1 * 2 * 3 * ... * x`, and by convention, `0! = 1`.)\r\n\r\nFor example, `f(3) = 0` because 3! = 6 has no zeroes at the end, while `f(11) = 2` because 11! = 39916800 has 2 zeroes at the end. Given `K`, find how many non-negative integers `x` have the property that `f(x) = K`.", "notice": "* `K` will be an integer in the range `[0, 10^9]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: K = 0\r\nOutput: 5\r\nExplanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: K = 5\r\nOutput: 0\r\nExplanation: There is no x such that x! ends in K = 5 zeroes.\r\n```", "challenge": "", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}], "related_problems": [{"id": 1347, "title": "Factorial Trailing Zeroes", "unique_name": "factorial-trailing-zeroes", "level": 1, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "0", "total_accepted": 45, "total_submissions": 62, "contest": "", "has_followed_by": false}, "number-of-matching-subsequences": {"id": 1024, "unique_name": "number-of-matching-subsequences", "user_status": null, "title": "Number of Matching Subsequences", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 61, "description": "Given string `S` and a dictionary of words `words`, find the number of `words[i]` that is a subsequence of `S`.", "notice": "* All words in `words` and `S` will only consists of lowercase letters.\r\n* The length of `S` will be in the range of `[1, 50000]`.\r\n* The length of `words` will be in the range of `[1, 5000]`.\r\n* The length of `words[i]` will be in the range of `[1, 50]`.", "clarification": "", "example": "```\r\nInput: \r\nS = \"abcde\"\r\nwords = [\"a\", \"bb\", \"acd\", \"ace\"]\r\nOutput: 3\r\nExplanation: There are three words in words that are a subsequence of S: \"a\", \"acd\", \"ace\".\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1263, "title": "Is Subsequence", "unique_name": "is-subsequence", "level": 2, "accepted_rate": 49}], "comment_count": 0, "testcase_sample": "\"abcde\"\n[\"a\", \"bb\", \"acd\", \"ace\"]", "total_accepted": 83, "total_submissions": 133, "contest": "", "has_followed_by": false}, "domino-and-tromino-tiling": {"id": 1026, "unique_name": "domino-and-tromino-tiling", "user_status": null, "title": "Domino and Tromino Tiling", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "We have two types of tiles: a 2x1 domino shape, and an \"L\" tromino shape. These shapes may be rotated.\r\n\r\n~~~~.\r\nXX  <- domino\r\n\r\nXX  <- \"L\" tromino\r\nX\r\n\r\n~~~~\r\nGiven N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.\r\n\r\n(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)", "notice": "N  will be in range [1, 1000].", "clarification": "", "example": "Input: 3\r\nOutput: 5\r\nExplanation: \r\nThe five different ways are listed below, different letters indicates different tiles:\r\nXYZ XXZ XYY XXY XYY\r\nXYZ YYZ XZZ XYY XXY", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "1", "total_accepted": 74, "total_submissions": 148, "contest": "", "has_followed_by": false}, "escape-the-ghosts": {"id": 1027, "unique_name": "escape-the-ghosts", "user_status": null, "title": "Escape The Ghosts", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 72, "description": "You are playing a simplified Pacman game. You start at the point (0, 0), and your destination is (target[0], target[1]). There are several ghosts on the map, the i-th ghost starts at (ghosts[i][0], ghosts[i][1]).\r\n\r\nEach turn, you and all ghosts simultaneously *may* move in one of 4 cardinal directions: north, east, west, or south, going from the previous point to a new point 1 unit of distance away.\r\n\r\nYou escape if and only if you can reach the target before any ghost reaches you (for any given moves the ghosts may take.)  If you reach any square (including the target) at the same time as a ghost, it doesn't count as an escape.\r\n\r\nReturn True if and only if it is possible to escape.", "notice": "All points have coordinates with absolute value <= 10000.\r\nThe number of ghosts will not exceed 100.", "clarification": "", "example": "Input: \r\nghosts = [[1, 0], [0, 3]]\r\ntarget = [0, 1]\r\nOutput: true\r\nExplanation: \r\nYou can directly reach the destination (0, 1) at time 1, while the ghosts located at (1, 0) or (0, 3) have no way to catch up with you.\r\n\r\nInput: \r\nghosts = [[1, 0]]\r\ntarget = [2, 0]\r\nOutput: false\r\nExplanation: \r\nYou need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\r\n\r\nInput: \r\nghosts = [[2, 0]]\r\ntarget = [1, 0]\r\nOutput: false\r\nExplanation: \r\nThe ghost can reach the target at the same time as you.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1, 0], [0, 3]]\n[0, 1]", "total_accepted": 68, "total_submissions": 93, "contest": "", "has_followed_by": false}, "rotated-digits": {"id": 1028, "unique_name": "rotated-digits", "user_status": null, "title": "Rotated Digits", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 64, "description": "X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.\r\n\r\nA number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other; 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.\r\n\r\nNow given a positive number `N`, how many numbers X from `1` to `N` are good?", "notice": "- N  will be in range `[1, 10000]`.", "clarification": "", "example": "**Example:**\r\n```\r\nInput: 10\r\nOutput: 4\r\nExplanation: \r\nThere are four good numbers in the range [1, 10] : 2, 5, 6, 9.\r\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "10", "total_accepted": 129, "total_submissions": 199, "contest": "", "has_followed_by": false}, "cheapest-flights-within-k-stops": {"id": 1029, "unique_name": "cheapest-flights-within-k-stops", "user_status": null, "title": "Cheapest Flights Within K Stops", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 43, "description": "There are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.\r\n\r\nNow given all the cities and fights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.", "notice": "The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.\r\nThe size of flights will be in range [0, n * (n - 1) / 2].\r\nThe format of each flight will be (src, dst, price).\r\nThe price of each flight will be in the range [1, 10000].\r\nk is in the range of [0, n - 1].\r\nThere will not be any duplicated flights or self cycles.", "clarification": "", "example": "Input: \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 1\r\nOutput: 200\r\n\r\nInput: \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 0\r\nOutput: 500", "challenge": "", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}], "related_problems": [{"id": 874, "title": "Maximum Vacation Days", "unique_name": "maximum-vacation-days", "level": 3, "accepted_rate": 37}], "comment_count": 0, "testcase_sample": "3\n[[0,1,100],[1,2,100],[0,2,500]]\n0\n2\n0", "total_accepted": 158, "total_submissions": 361, "contest": "", "has_followed_by": false}, "k-th-smallest-prime-fraction": {"id": 1030, "unique_name": "k-th-smallest-prime-fraction", "user_status": null, "title": "K-th Smallest Prime Fraction", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 64, "description": "A sorted list A contains 1, plus some number of primes.  Then, for every p < q in the list, we consider the fraction p/q.\r\n\r\nWhat is the K-th smallest fraction considered?  Return your answer as an array of ints, where answer[0] = p and answer[1] = q.", "notice": "A will have length between 2 and 2000.\r\nEach A[i] will be between 1 and 30000.\r\nK will be between 1 and A.length * (A.length - 1) / 2.", "clarification": "", "example": "Input: A = [1, 2, 3, 5], K = 3\r\nOutput: [2, 5]\r\nExplanation:\r\nThe fractions to be considered in sorted order are:\r\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\r\nThe third fraction is 2/5.\r\n\r\nInput: A = [1, 7], K = 1\r\nOutput: [1, 7]", "challenge": "", "tags": [{"id": 146, "name": "Pony.ai", "cn_name": "Pony.ai", "type": 3, "unique_name": "ponyai", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1, 2, 3, 5]\n3", "total_accepted": 37, "total_submissions": 57, "contest": "", "has_followed_by": false}, "is-graph-bipartite": {"id": 1031, "unique_name": "is-graph-bipartite", "user_status": null, "title": "Is Graph Bipartite?", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given an undirected `graph`, return `true` if and only if it is bipartite.\r\n\r\nRecall that a graph is _bipartite_ if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.\r\n\r\nThe graph is given in the following form: `graph[i]` is a list of indexes `j` for which the edge between nodes `i` and `j` exists.  Each node is an integer between `0` and `graph.length - 1`.  There are no self edges or parallel edges: `graph[i]` does not contain `i`, and it doesn't contain any element twice.", "notice": "* `graph` will have length in range `[1, 100]`.\r\n* `graph[i]` will contain integers in range `[0, graph.length - 1]`.\r\n* `graph[i]` will not contain `i` or duplicate values.\r\n* The graph is undirected: if any element `j` is in `graph[i]`, then `i` will be in `graph[j]`.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: [[1,3], [0,2], [1,3], [0,2]]\r\nOutput: true\r\nExplanation: \r\nThe graph looks like this:\r\n0----1\r\n|    |\r\n|    |\r\n3----2\r\nWe can divide the vertices into two groups: {0, 2} and {1, 3}.\r\n```\r\n```\r\nExample 2:\r\nInput: [[1,2,3], [0,2], [0,1,3], [0,2]]\r\nOutput: false\r\nExplanation: \r\nThe graph looks like this:\r\n0----1\r\n| \\  |\r\n|  \\ |\r\n3----2\r\nWe cannot find a way to divide the set of nodes into two independent subsets.\r\n```", "challenge": "", "tags": [{"id": 83, "name": "Undirected Graph", "cn_name": "Undirected Graph", "type": 2, "unique_name": "undirected-graph", "alias": "", "problem_count": 4}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,3],[0,2],[1,3],[0,2]]", "total_accepted": 208, "total_submissions": 523, "contest": "", "has_followed_by": false}, "letter-case-permutation": {"id": 1032, "unique_name": "letter-case-permutation", "user_status": null, "title": "Letter Case Permutation", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.  Return a list of all possible strings we could create.", "notice": "S will be a string with length at most 12.\r\nS will consist only of letters or digits.", "clarification": "", "example": "Input: S = \"a1b2\"\r\nOutput: [\"a1b2\", \"a1B2\", \"A1b2\", \"A1B2\"]\r\n\r\nInput: S = \"3z4\"\r\nOutput: [\"3z4\", \"3Z4\"]\r\n\r\nInput: S = \"12345\"\r\nOutput: [\"12345\"]", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"\"", "total_accepted": 362, "total_submissions": 866, "contest": "", "has_followed_by": false}, "minimum-distance-between-bst-nodes": {"id": 1033, "unique_name": "minimum-distance-between-bst-nodes", "user_status": null, "title": "Minimum Distance Between BST Nodes", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 63, "description": "Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.", "notice": "1.The size of the BST will be between 2 and `100`.\r\n2.The BST is always valid, each node's value is an integer, and each node's value is different.", "clarification": "", "example": "```\r\nInput: root = {4,2,6,1,3,#,#}\r\nOutput: 1\r\nExplanation:\r\nNote that root is a TreeNode object, not an array.\r\n\r\nThe given tree {4,2,6,1,3,#,#} is represented by the following diagram:\r\n\r\n          4\r\n        /   \\\r\n      2      6\r\n     / \\    \r\n    1   3  \r\n\r\nwhile the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "{27,#,34,#,58,50,#,44,#,#,#}", "total_accepted": 136, "total_submissions": 211, "contest": "", "has_followed_by": false}, "transform-to-chessboard": {"id": 1034, "unique_name": "transform-to-chessboard", "user_status": null, "title": "Transform to Chessboard", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 56, "description": "An N x N `board` contains only `0`s and `1`s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.\r\n\r\nWhat is the minimum number of moves to transform the board into a \"chessboard\" - a board where no `0`s and no `1`s are 4-directionally adjacent? If the task is impossible, return -1.", "notice": "* `board` will have the same number of rows and columns, a number in the range `[2, 30]`.\r\n* `board[i][j]` will be only `0`s or `1`s.", "clarification": "", "example": "```\r\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\r\nOutput: 2\r\nExplanation:\r\nOne potential sequence of moves is shown below, from left to right:\r\n\r\n0110     1010     1010\r\n0110 --> 1010 --> 0101\r\n1001     0101     1010\r\n1001     0101     0101\r\n\r\nThe first move swaps the first and second column.\r\nThe second move swaps the second and third row.\r\n\r\n\r\nInput: board = [[0, 1], [1, 0]]\r\nOutput: 0\r\nExplanation:\r\nAlso note that the board with 0 in the top left corner,\r\n01\r\n10\r\n\r\nis also a valid chessboard.\r\n\r\nInput: board = [[1, 0], [1, 0]]\r\nOutput: -1\r\nExplanation:\r\nNo matter what sequence of moves you make, you cannot end with a valid chessboard.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]", "total_accepted": 75, "total_submissions": 132, "contest": "", "has_followed_by": false}, "rabbits-in-forest": {"id": 1035, "unique_name": "rabbits-in-forest", "user_status": null, "title": "Rabbits in Forest", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 62, "description": "In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those answers are placed in an array.\r\n\r\nReturn the minimum number of rabbits that could be in the forest.", "notice": "1. answers will have length at most `1000`.\r\n2. Each answers[i] will be an integer in the range `[0, 999]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: answers = [1, 1, 2]\r\nOutput: 5\r\nExplanation:\r\nThe two rabbits that answered \"1\" could both be the same color, say red.\r\nThe rabbit than answered \"2\" can't be red or the answers would be inconsistent.\r\nSay the rabbit that answered \"2\" was blue.\r\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\r\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\r\n```\r\n**Example 2:**\r\n```\r\nInput: answers = [10, 10, 10]\r\nOutput: 11\r\n```\r\n**Example 3:**\r\n```\r\nInput: answers = []\r\nOutput: 0\r\n```", "challenge": "", "tags": [{"id": 162, "name": "Wish", "cn_name": "Wish", "type": 3, "unique_name": "wish", "alias": "", "problem_count": 1}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,2]", "total_accepted": 57, "total_submissions": 90, "contest": "", "has_followed_by": false}, "reaching-points": {"id": 1036, "unique_name": "reaching-points", "user_status": null, "title": "Reaching Points", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 62, "description": "A move consists of taking a point `(x, y)` and transforming it to either `(x, x+y)` or `(x+y, y)`.\r\n\r\nGiven a starting point `(sx, sy)` and a target point `(tx, ty)`, return `True` if and only if a sequence of moves exists to transform the point `(sx, sy)` to `(tx, ty)`. Otherwise, return `False`.", "notice": "`sx, sy, tx, ty` will all be integers in the range `[1, 10^9]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: sx = 1, sy = 1, tx = 3, ty = 5\r\nOutput: True\r\nExplanation:\r\nOne series of moves that transforms the starting point to the target is:\r\n(1, 1) -> (1, 2)\r\n(1, 2) -> (3, 2)\r\n(3, 2) -> (3, 5)\r\n```\r\n**Example 2:**\r\n```\r\nInput: sx = 1, sy = 1, tx = 2, ty = 2\r\nOutput: False\r\n```\r\n**Example 3:**\r\n```\r\nInput: sx = 1, sy = 1, tx = 1, ty = 1\r\nOutput: True\r\n```", "challenge": "", "tags": [{"id": 144, "name": "Coursera", "cn_name": "Coursera", "type": 3, "unique_name": "coursera", "alias": "", "problem_count": 3}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "1\n1\n3\n5", "total_accepted": 37, "total_submissions": 59, "contest": "", "has_followed_by": false}, "global-and-local-inversions": {"id": 1037, "unique_name": "global-and-local-inversions", "user_status": null, "title": "Global and Local Inversions", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 72, "description": "We have some permutation `A` of `[0, 1, ..., N - 1]`, where `N` is the length of `A`.\r\n\r\nThe number of (global) inversions is the number of `i < j` with `0 <= i < j < N` and `A[i] > A[j]`.\r\n\r\nThe number of local inversions is the number of `i` with `0 <= i < N` and `A[i] > A[i+1]`.\r\n\r\nReturn `true` if and only if the number of global inversions is equal to the number of local inversions.", "notice": "1.A will be a permutation of `[0, 1, ..., A.length - 1]`.\r\n2.A will have length in range `[1, 5000]`.\r\n3.The time limit for this problem has been reduced.", "clarification": "", "example": "```\r\nExample 1:\r\n\r\nInput: A = [1,0,2]\r\nOutput: true\r\nExplanation: There is 1 global inversion, and 1 local inversion.\r\n```\r\n```\r\nExample 2:\r\n\r\nInput: A = [1,2,0]\r\nOutput: false\r\nExplanation: There are 2 global inversions, and 1 local inversion.\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,0,2]", "total_accepted": 111, "total_submissions": 151, "contest": "", "has_followed_by": false}, "jewels-and-stones": {"id": 1038, "unique_name": "jewels-and-stones", "user_status": null, "title": "Jewels and Stones", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 86, "description": "You're given strings `J` representing the types of stones that are jewels, and `S` representing the stones you have.  Each character in `S` is a type of stone you have.  You want to know how many of the stones you have are also jewels.\r\n\r\nThe letters in `J` are guaranteed distinct, and all characters in `J` and `S` are letters. Letters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`.", "notice": "- `S` and `J` will consist of letters and have length at most 50.\r\n- The characters in `J` are distinct.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: J = \"aA\", S = \"aAAbbbb\"\r\nOutput: 3\r\n```\r\n**Example 2:**\r\n```\r\nInput: J = \"z\", S = \"ZZ\"\r\nOutput: 0\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [{"id": 638, "title": "Isomorphic Strings", "unique_name": "isomorphic-strings", "level": 1, "accepted_rate": 31}, {"id": 171, "title": "Anagrams", "unique_name": "anagrams", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"aA\"\n\"aAAbbbb\"", "total_accepted": 349, "total_submissions": 402, "contest": "", "has_followed_by": false}, "max-chunks-to-make-sorted": {"id": 1039, "unique_name": "max-chunks-to-make-sorted", "user_status": null, "title": "Max Chunks To Make Sorted", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 65, "description": "Given an array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`, we split the array into some number of \"chunks\" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.\r\n\r\nWhat is the most number of chunks we could have made?", "notice": "- `arr` will have length in range `[1, 10]`.\r\n- `arr[i]` will be a permutation of `[0, 1, ..., arr.length - 1]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: arr = [4,3,2,1,0]\r\nOutput: 1\r\nExplanation:\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\r\n```\r\n**Example 2:**\r\n```\r\nInput: arr = [1,0,2,3,4]\r\nOutput: 4\r\nExplanation:\r\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\r\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1040, "title": "Max Chunks To Make Sorted II", "unique_name": "max-chunks-to-make-sorted-ii", "level": 3, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "[4,3,2,1,0]", "total_accepted": 87, "total_submissions": 132, "contest": "", "has_followed_by": false}, "max-chunks-to-make-sorted-ii": {"id": 1040, "unique_name": "max-chunks-to-make-sorted-ii", "user_status": null, "title": "Max Chunks To Make Sorted II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 54, "description": "Given an array arr of integers (**not necessarily distinct**), we split the array into some number of \"chunks\" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.\r\n\r\nWhat is the most number of chunks we could have made?", "notice": "- arr will have length in range `[1, 2000]`.\r\n- arr[i] will be an integer in range `[0, 10^8]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: arr = [5,4,3,2,1]\r\nOutput: 1\r\nExplanation:\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\r\n```\r\n**Example 2:**\r\n```\r\nInput: arr = [2,1,3,4,4]\r\nOutput: 4\r\nExplanation:\r\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\r\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1039, "title": "Max Chunks To Make Sorted", "unique_name": "max-chunks-to-make-sorted", "level": 2, "accepted_rate": 65}], "comment_count": 0, "testcase_sample": "[5,4,3,2,1]", "total_accepted": 50, "total_submissions": 90, "contest": "", "has_followed_by": false}, "toeplitz-matrix": {"id": 1042, "unique_name": "toeplitz-matrix", "user_status": null, "title": "Toeplitz Matrix", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 69, "description": "A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.\r\n\r\nNow given an `M x N` matrix, return `True` if and only if the matrix is _Toeplitz_.\r\n", "notice": "1. `matrix` will be a 2D array of integers.\r\n2. `matrix` will have a number of rows and columns in range `[1, 20]`.\r\n3. `matrix[i][j]` will be integers in range `[0, 99]`.", "clarification": "", "example": "```\r\nExample 1:\r\n\r\nInput: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\r\nOutput: True\r\nExplanation:\r\n1234\r\n5123\r\n9512\r\n\r\nIn the above grid, the diagonals are \"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\", and in each diagonal all elements are the same, so the answer is True.\r\n\r\n\r\nExample 2:\r\n\r\nInput: matrix = [[1,2],[2,2]]\r\nOutput: False\r\nExplanation:\r\nThe diagonal \"[1, 2]\" has different elements.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 888, "title": "Valid Word Square", "unique_name": "valid-word-square", "level": 1, "accepted_rate": 64}], "comment_count": 0, "testcase_sample": "[[1,2,3,4],[5,1,2,3],[9,5,1,2]]", "total_accepted": 1143, "total_submissions": 1651, "contest": "", "has_followed_by": false}, "couples-holding-hands": {"id": 1043, "unique_name": "couples-holding-hands", "user_status": null, "title": "Couples Holding Hands", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 68, "description": "N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing **any** two people, then they stand up and switch seats.\r\n\r\nThe people and seats are represented by an integer from `0` to `2N-1`, the couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2N-2, 2N-1)`.\r\n\r\nThe couples' initial seating is given by `row[i]` being the value of the person who is initially sitting in the i-th seat.", "notice": "1.`len(row)` is even and in the range of `[4, 60]`.\r\n2.`row` is guaranteed to be a permutation of `0...len(row)-1`.", "clarification": "", "example": "```\r\nExample 1:\r\n\r\nInput: row = [0, 2, 1, 3]\r\nOutput: 1\r\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\r\n```\r\n```\r\nExample 2:\r\n\r\nInput: row = [3, 2, 0, 1]\r\nOutput: 0\r\nExplanation: All couples are already seated side by side.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[0,2,1,3]", "total_accepted": 56, "total_submissions": 80, "contest": "", "has_followed_by": false}, "largest-plus-sign": {"id": 1044, "unique_name": "largest-plus-sign", "user_status": null, "title": "Largest Plus Sign", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 48, "description": "In a 2D `grid` from (0, 0) to (N-1, N-1), every cell contains a `1`, except those cells in the given list `mines` which are `0`. What is the largest axis-aligned plus sign of `1`s contained in the grid? Return the order of the plus sign. If there is none, return 0.\r\n\r\nAn \"axis-aligned plus sign of `1`s of order **k**\" has some center `grid[x][y] = 1` along with 4 arms of length `k-1` going up, down, left, and right, and made of `1`s. This is demonstrated in the diagrams below. Note that there could be `0`s or `1`s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`s.\r\n\r\n**Examples of Axis-Aligned Plus Signs of Order k:**\r\n```\r\nOrder 1:\r\n000\r\n010\r\n000\r\n\r\nOrder 2:\r\n00000\r\n00100\r\n01110\r\n00100\r\n00000\r\n\r\nOrder 3:\r\n0000000\r\n0001000\r\n0001000\r\n0111110\r\n0001000\r\n0001000\r\n0000000\r\n```", "notice": "1.`N` will be an integer in the range `[1, 500]`.\r\n2.`mines` will have length at most `5000`.\r\n3.`mines[i]` will be length 2 and consist of integers in the range `[0, N-1]`.\r\n", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: N = 5, mines = [[4, 2]]\r\nOutput: 2\r\nExplanation:\r\n11111\r\n11111\r\n11111\r\n11111\r\n11011\r\nIn the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.\r\n```\r\n**Example 2:**\r\n```\r\nInput: N = 2, mines = []\r\nOutput: 1\r\nExplanation:\r\nThere is no plus sign of order 2, but there is of order 1.\r\n```\r\n**Example 3:**\r\n```\r\nInput: N = 1, mines = [[0, 0]]\r\nOutput: 0\r\nExplanation:\r\nThere is no plus sign, so return 0.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 436, "title": "Maximal Square", "unique_name": "maximal-square", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "5\n[[4,2]]", "total_accepted": 101, "total_submissions": 206, "contest": "", "has_followed_by": false}, "partition-labels": {"id": 1045, "unique_name": "partition-labels", "user_status": null, "title": "Partition Labels", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 75, "description": "A string `S` of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.", "notice": "1.`S` will have length in range `[1, 500]`.\r\n2.`S` will consist of lowercase letters (`'a'` to `'z'`) only.", "clarification": "", "example": "```\r\nInput: S = \"ababcbacadefegdehijhklij\"\r\nOutput: [9,7,8]\r\nExplanation:\r\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\r\nThis is a partition so that each letter appears in at most one part.\r\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts.\r\n```", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "\"ababcbacadefegdehijhklij\"", "total_accepted": 160, "total_submissions": 212, "contest": "", "has_followed_by": false}, "prime-number-of-set-bits-in-binary-representation": {"id": 1046, "unique_name": "prime-number-of-set-bits-in-binary-representation", "user_status": null, "title": "Prime Number of Set Bits in Binary Representation", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 65, "description": "Given two integers `L` and `R`, find the count of numbers in the range `[L, R]` (inclusive) having a prime number of set bits in their binary representation.\r\n\r\n(Recall that the number of set bits an integer has is the number of `1`s present when written in binary. For example, `21` written in binary is `10101` which has 3 set bits. Also, 1 is not a prime.)", "notice": "1.`L`, `R` will be integers `L <= R` in the range `[1, 10^6]`.\r\n2.`R - L` will be at most `10000`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: L = 6, R = 10\r\nOutput: 4\r\nExplanation:\r\n6 -> 110 (2 set bits, 2 is prime)\r\n7 -> 111 (3 set bits, 3 is prime)\r\n9 -> 1001 (2 set bits , 2 is prime)\r\n10->1010 (2 set bits , 2 is prime)\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: L = 10, R = 15\r\nOutput: 5\r\nExplanation:\r\n10 -> 1010 (2 set bits, 2 is prime)\r\n11 -> 1011 (3 set bits, 3 is prime)\r\n12 -> 1100 (2 set bits, 2 is prime)\r\n13 -> 1101 (3 set bits, 3 is prime)\r\n14 -> 1110 (3 set bits, 3 is prime)\r\n15 -> 1111 (4 set bits, 4 is not prime)\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 1332, "title": "Number of 1 Bits", "unique_name": "number-of-1-bits", "level": 1, "accepted_rate": 79}], "comment_count": 0, "testcase_sample": "6\n10", "total_accepted": 340, "total_submissions": 521, "contest": "", "has_followed_by": false}, "special-binary-string": {"id": 1047, "unique_name": "special-binary-string", "user_status": null, "title": "Special Binary String", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 82, "description": "Special binary strings are binary strings with the following two properties:\r\n\r\n- The number of 0's is equal to the number of 1's.\r\n- Every prefix of the binary string has at least as many 1's as 0's.\r\nGiven a special string S, a move consists of choosing two consecutive, non-empty, special substrings of S, and swapping them. (Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)\r\n\r\nAt the end of any number of moves, what is the lexicographically largest resulting string possible?\r\n\r\nExample 1:\r\n~~~~.\r\nInput: S = \"11011000\"\r\nOutput: \"11100100\"\r\nExplanation:\r\nThe strings \"10\" [occuring at S[1]] and \"1100\" [at S[3]] are swapped.\r\nThis is the lexicographically largest string possible after some number of swaps.\r\n~~~~", "notice": "", "clarification": "", "example": "S has length at most 50.\r\nS is guaranteed to be a special binary string as defined above.", "challenge": "", "tags": [{"id": 173, "name": "Quip", "cn_name": "Quip", "type": 3, "unique_name": "quip", "alias": "", "problem_count": 1}, {"id": 144, "name": "Coursera", "cn_name": "Coursera", "type": 3, "unique_name": "coursera", "alias": "", "problem_count": 3}], "related_problems": [{"id": 1089, "title": "Valid Parenthesis String", "unique_name": "valid-parenthesis-string", "level": 2, "accepted_rate": 39}], "comment_count": 0, "testcase_sample": "\"11011000\"", "total_accepted": 33, "total_submissions": 39, "contest": "", "has_followed_by": false}, "set-intersection-size-at-least-two": {"id": 1048, "unique_name": "set-intersection-size-at-least-two", "user_status": null, "title": "Set Intersection Size At Least Two", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 70, "description": "An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.\r\n\r\nFind the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has size at least 2.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\r\nOutput: 3\r\nExplanation:\r\nConsider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\r\nAlso, there isn't a smaller size set that fulfills the above condition.\r\nThus, we output the size of this set, which is 3.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\r\nOutput: 5\r\nExplanation:\r\nAn example of a minimum sized set is {1, 2, 3, 4, 5}.\r\n~~~~", "notice": "", "clarification": "", "example": "intervals will have length in range [1, 3000].\r\nintervals[i] will have length 2, representing some integer interval.\r\nintervals[i][j] will be an integer in [0, 10^8].\r\n", "challenge": "", "tags": [{"id": 142, "name": "Drawbridge", "cn_name": "Drawbridge", "type": 3, "unique_name": "drawbridge", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[2,10]]", "total_accepted": 35, "total_submissions": 48, "contest": "", "has_followed_by": false}, "pyramid-transition-matrix": {"id": 1049, "unique_name": "pyramid-transition-matrix", "user_status": null, "title": "Pyramid Transition Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 65, "description": "We are stacking blocks to form a pyramid. Each block has a color which is a one letter string, like `'Z'`.\r\n\r\nFor every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`. We are allowed to place the block there only if `(A, B, C)` is an allowed triple.\r\n\r\nWe start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.\r\n\r\nReturn true if we can build the pyramid all the way to the top, otherwise false.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: bottom = \"XYZ\", allowed = [\"XYD\", \"YZE\", \"DEA\", \"FFF\"]\r\nOutput: true\r\nExplanation:\r\nWe can stack the pyramid like this:\r\n    A\r\n   / \\\r\n  D   E\r\n / \\ / \\\r\nX   Y   Z\r\n\r\nThis works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.\r\n\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: bottom = \"XXYX\", allowed = [\"XXX\", \"XXY\", \"XYX\", \"XYY\", \"YXZ\"]\r\nOutput: false\r\nExplanation:\r\nWe can't stack the pyramid to the top.\r\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\r\n~~~~", "notice": "bottom will be a string with length in range [2, 8].\r\nallowed will have length in range [0, 200].\r\nLetters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"ABC\"\n[\"ABD\",\"BCE\",\"DEF\",\"FFF\"]", "total_accepted": 88, "total_submissions": 133, "contest": "", "has_followed_by": false}, "contain-virus": {"id": 1051, "unique_name": "contain-virus", "user_status": null, "title": "Contain Virus", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 61, "description": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\r\n\r\nThe world is modeled as a 2-D array of cells, where `0` represents uninfected cells, and `1` represents cells contaminated with the virus. A wall (and only one wall) can be installed **between any two 4-directionally adjacent cells**, on the shared boundary.\r\n\r\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.\r\n\r\nCan you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.", "notice": "* The number of rows and columns of `grid` will each be in the range `[1, 50]`.\r\n* Each `grid[i][j]` will be either `0` or `1`.\r\n* Throughout the described process, there is always a contiguous viral region that will infect **strictly more** uncontaminated squares in the next round.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: grid = \r\n[[0,1,0,0,0,0,0,1],\r\n [0,1,0,0,0,0,0,1],\r\n [0,0,0,0,0,0,0,1],\r\n [0,0,0,0,0,0,0,0]]\r\nOutput: 10\r\nExplanation:\r\nThere are 2 contaminated regions.\r\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\r\n\r\n[[0,1,0,0,0,0,1,1],\r\n [0,1,0,0,0,0,1,1],\r\n [0,0,0,0,0,0,1,1],\r\n [0,0,0,0,0,0,0,1]]\r\n\r\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\r\n```\r\n**Example 2:**\r\n```\r\nInput: grid = \r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\nOutput: 4\r\nExplanation: Even though there is only one cell saved, there are 4 walls built.\r\nNotice that walls are only built on the shared boundary of two different cells.\r\n```\r\n**Example 3:**\r\n```\r\nInput: grid = \r\n[[1,1,1,0,0,0,0,0,0],\r\n [1,0,1,0,1,1,1,1,1],\r\n [1,1,1,0,0,0,0,0,0]]\r\nOutput: 13\r\nExplanation: The region on the left only builds two new walls.\r\n```", "challenge": "", "tags": [{"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]", "total_accepted": 45, "total_submissions": 71, "contest": "", "has_followed_by": false}, "shortest-completing-word": {"id": 1052, "unique_name": "shortest-completing-word", "user_status": null, "title": "Shortest Completing Word", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 69, "description": "Find the minimum length word from a given dictionary words, which has all the letters from the string licensePlate. Such a word is said to complete the given string licensePlate\r\n\r\nHere, for letters we ignore case. For example, \"P\" on the licensePlate still matches \"p\" on the word.\r\n\r\nIt is guaranteed an answer exists. If there are multiple answers, return the one that occurs first in the array.\r\n\r\nThe license plate might have the same letter occurring multiple times. For example, given a licensePlate of \"PP\", the word \"pair\" does not complete the licensePlate, but the word \"supper\" does.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\r\nOutput: \"steps\"\r\nExplanation: The smallest length word that contains the letters \"S\", \"P\", \"S\", and \"T\".\r\nNote that the answer is not \"step\", because the letter \"s\" must occur in the word twice.\r\nAlso note that we ignored case for the purposes of comparing whether a letter exists in the word.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\r\nOutput: \"pest\"\r\nExplanation: There are 3 smallest length words that contains the letters \"s\".\r\nWe return the one that occurred first.\r\n~~~~", "notice": "licensePlate will be a string with length in range [1, 7].\r\nlicensePlate will contain digits, spaces, or letters (uppercase or lowercase).\r\nwords will have a length in the range [10, 1000].\r\nEvery words[i] will consist of lowercase letters, and have length in range [1, 15].", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"1s3 PSt\"\n[\"step\", \"steps\", \"stripe\", \"stepple\"]", "total_accepted": 66, "total_submissions": 94, "contest": "", "has_followed_by": false}, "min-cost-climbing-stairs": {"id": 1054, "unique_name": "min-cost-climbing-stairs", "user_status": null, "title": "Min Cost Climbing Stairs", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "On a staircase, the `i`-th step has some non-negative cost `cost[i]` assigned (0 indexed).\r\n\r\nOnce you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.", "notice": "1.`cost` will have a length in the range `[2, 1000]`.\r\n2.Every `cost[i]` will be an integer in the range `[0, 999]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: cost = [10, 15, 20]\r\nOutput: 15\r\nExplanation: Cheapest is start on cost[1], pay that cost and go to the top.\r\n```\r\n**Example 2:**\r\n```\r\nInput: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\r\nOutput: 6\r\nExplanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "[0,0,0,0]", "total_accepted": 184, "total_submissions": 318, "contest": "", "has_followed_by": false}, "find-smallest-letter-greater-than-target": {"id": 1056, "unique_name": "find-smallest-letter-greater-than-target", "user_status": null, "title": "Find Smallest Letter Greater Than Target", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "Given a list of sorted characters `letters` containing only lowercase letters, and given a `target` letter target, find the smallest element in the list that is larger than the given target.\r\n\r\nLetters also wrap around. For example, if the target is `target = 'z'` and `letters = ['a', 'b']`, the answer is `'a'`.", "notice": "1.`letters` has a length in range `[2, 10000]`.\r\n2.`letters` consists of lowercase letters, and contains at least 2 unique letters.\r\n3.`target` is a lowercase letter.", "clarification": "", "example": "```\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"a\"\r\nOutput: \"c\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"c\"\r\nOutput: \"f\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"d\"\r\nOutput: \"f\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"g\"\r\nOutput: \"j\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"j\"\r\nOutput: \"c\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"k\"\r\nOutput: \"c\"\r\n```", "challenge": "", "tags": [{"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"cfj\"\na", "total_accepted": 129, "total_submissions": 224, "contest": "", "has_followed_by": false}, "network-delay-time": {"id": 1057, "unique_name": "network-delay-time", "user_status": null, "title": "Network Delay Time", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "There are `N` network nodes, labelled `1` to `N`.\r\n\r\nGiven `times`, a list of travel times as **directed** edges `times[i] = (u, v, w)`, where `u` is the source node, `v` is the target node, and `w` is the time it takes for a signal to travel from source to target.\r\n\r\nNow, we send a signal from a certain node `K`. How long will it take for all nodes to receive the signal? If it is impossible, return `-1`.", "notice": "1.`N` will be in the range `[1, 100]`.\r\n2.`K` will be in the range `[1, N]`.\r\n3.The length of `times` will be in the range `[1, 6000]`.\r\n4.All edges `times[i] = (u, v, w)` will have `1 <= u, v <= N` and `1 <= w <= 100`.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 154, "name": "Akuna Capital", "cn_name": "Akuna Capital", "type": 3, "unique_name": "akuna-capital", "alias": "", "problem_count": 4}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[2,1,1],[2,3,1],[3,4,1]]\n4\n2", "total_accepted": 91, "total_submissions": 218, "contest": "", "has_followed_by": false}, "cherry-pickup": {"id": 1058, "unique_name": "cherry-pickup", "user_status": null, "title": "Cherry Pickup", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "In a N x N `grid` representing a field of cherries, each cell is one of three possible integers.\r\n\r\n* 0 means the cell is empty, so you can pass through;\r\n* 1 means the cell contains a cherry, that you can pick up and pass through;\r\n* -1 means the cell contains a thorn that blocks your way.\r\n\r\nYour task is to collect maximum number of cherries possible by following the rules below:\r\n\r\n* Starting at the position (0, 0) and reaching (N-1, N-1) by moving right or down through valid path cells (cells with value 0 or 1);\r\n* After reaching (N-1, N-1), returning to (0, 0) by moving left or up through valid path cells;\r\n* When passing through a path cell containing a cherry, you pick it up and the cell becomes an empty cell (0);\r\n* If there is no valid path between (0, 0) and (N-1, N-1), then no cherries can be collected.", "notice": "* `grid` is an `N` by `N` 2D array, with `1 <= N <= 50`.\r\n* Each `grid[i][j]` is an integer in the set `{-1, 0, 1}`.\r\n* It is guaranteed that grid[0][0] and grid[N-1][N-1] are not -1.", "clarification": "", "example": "```\r\nInput: grid =\r\n[[0, 1, -1],\r\n [1, 0, -1],\r\n [1, 1,  1]]\r\nOutput: 5\r\nExplanation: \r\nThe player started at (0, 0) and went down, down, right right to reach (2, 2).\r\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\r\nThen, the player went left, up, up, left to return home, picking up one more cherry.\r\nThe total number of cherries picked up is 5, and this is the maximum possible.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 154, "name": "Akuna Capital", "cn_name": "Akuna Capital", "type": 3, "unique_name": "akuna-capital", "alias": "", "problem_count": 4}], "related_problems": [{"id": 1346, "title": "Dungeon Game", "unique_name": "dungeon-game", "level": 3, "accepted_rate": 70}, {"id": 110, "title": "Minimum Path Sum ", "unique_name": "minimum-path-sum", "level": 1, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[[0,1,-1],[1,0,-1],[1,1,1]]", "total_accepted": 63, "total_submissions": 177, "contest": "", "has_followed_by": false}, "delete-and-earn": {"id": 1059, "unique_name": "delete-and-earn", "user_status": null, "title": "Delete and Earn", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 66, "description": "Given an array nums of integers, you can perform operations on the array.\r\n\r\nIn each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.\r\n\r\nYou start with 0 points. Return the maximum number of points you can earn by applying such operations.", "notice": "The length of nums is at most 20000.\r\nEach element nums[i] is an integer in the range [1, 10000].", "clarification": "", "example": "Input: nums = [3, 4, 2]\r\nOutput: 6\r\nExplanation: \r\nDelete 4 to earn 4 points, consequently 3 is also deleted.\r\nThen, delete 2 to earn 2 points. 6 total points are earned.\r\n\r\nInput: nums = [2, 2, 3, 3, 3, 4]\r\nOutput: 9\r\nExplanation: \r\nDelete 3 to earn 3 points, deleting both 2's and the 4.\r\nThen, delete 3 again to earn 3 points, and 3 again to earn 3 points.\r\n9 total points are earned.", "challenge": "", "tags": [{"id": 154, "name": "Akuna Capital", "cn_name": "Akuna Capital", "type": 3, "unique_name": "akuna-capital", "alias": "", "problem_count": 4}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3, 4, 2]", "total_accepted": 37, "total_submissions": 54, "contest": "", "has_followed_by": false}, "daily-temperatures": {"id": 1060, "unique_name": "daily-temperatures", "user_status": null, "title": "Daily Temperatures", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 67, "description": "Given a list of daily `temperatures`, produce a list that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.\r\n\r\nFor example, given the list `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`.", "notice": "1.The length of `temperatures` will be in the range `[1, 30000]`. Each temperature will be an integer in the range `[30, 100]`", "clarification": "", "example": "```\r\nInput:\r\ntemperatures = [73, 74, 75, 71, 69, 72, 76, 73]\r\nOutput:\r\n[1, 1, 4, 2, 1, 1, 0, 0]\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[73,74,75,71,69,72,76,73]", "total_accepted": 96, "total_submissions": 141, "contest": "", "has_followed_by": false}, "parse-lisp-expression": {"id": 1061, "unique_name": "parse-lisp-expression", "user_status": null, "title": "Parse Lisp Expression", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 75, "description": "You are given a string `expression` representing a Lisp-like expression to return the integer value of.\r\n\r\nThe syntax for these expressions is given as follows.\r\n\r\n- An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable. Expressions always evaluate to a single integer.\r\n- An integer could be positive or negative.\r\n- A let-expression takes the form `(let v1 e1 v2 e2 ... vn en expr)`, where `let` is always the string `\"let\"`, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on **sequentially**; and then the value of this let-expression is the value of the expression `expr`.\r\n- An add-expression takes the form `(add e1 e2)` where add is always the string \"add\", there are always two expressions `e1, e2`, and this expression evaluates to the addition of the evaluation of e1 and the evaluation of e2.\r\n- A mult-expression takes the form `(mult e1 e2)` where `mult` is always the string `\"mult\"`, there are always two expressions `e1, e2`, and this expression evaluates to the multiplication of the evaluation of `e1` and the evaluation of `e2`.\r\n- For the purposes of this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.\r\n- Finally, there is the concept of scope. When an expression of a variable name is evaluated, **within the context of that evaluation**, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on scope.", "notice": "\u00b7 The given string expression is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses. The expression is guaranteed to be legal and evaluate to an integer.\r\n\u00b7 The length of expression is at most 2000. (It is also non-empty, as that would not be a legal expression.)\r\n\u00b7 The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.", "clarification": "", "example": "```\r\nInput: (add 1 2)\r\nOutput: 3\r\n```\r\n```\r\nInput: (mult 3 (add 2 3))\r\nOutput: 15\r\n```\r\n```\r\nInput: (let x 2 (mult x 5))\r\nOutput: 10\r\n```\r\n```\r\nInput: (let x 2 (mult x (let x 3 y 4 (add x y))))\r\nOutput: 14\r\nExplanation: In the expression (add x y), when checking for the value of the variable x,\r\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\r\nSince x = 3 is found first, the value of x is 3.\r\n```\r\n```\r\nInput: (let x 3 x 2 x)\r\nOutput: 2\r\nExplanation: Assignment in let statements is processed sequentially.\r\n```\r\n```\r\nInput: (let x 1 y 2 x (add x y) (add x y))\r\nOutput: 5\r\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\r\nThe second (add x y) evaluates as 3+2 = 5.\r\n```\r\n```\r\nInput: (let x 2 (add (let x 3 (let x 4 x)) x))\r\nOutput: 6\r\nExplanation: Even though (let x 4 x) has a deeper scope, it is outside the context\r\nof the final x in the add-expression.  That final x will equal 2.\r\n```\r\n```\r\nInput: (let a1 3 b2 (add a1 1) b2) \r\nOutput 4\r\nExplanation: Variable names can contain digits after the first character.\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 155, "name": "Affirm", "cn_name": "Affirm", "type": 3, "unique_name": "affirm", "alias": "", "problem_count": 1}], "related_problems": [{"id": 1066, "title": "Verify Preorder Serialization of a Binary Tree", "unique_name": "verify-preorder-serialization-of-a-binary-tree", "level": 2, "accepted_rate": 52}, {"id": 981, "title": "Basic Calculator IV", "unique_name": "basic-calculator-iv", "level": 3, "accepted_rate": 81}, {"id": 887, "title": "Ternary Expression Parser", "unique_name": "ternary-expression-parser", "level": 2, "accepted_rate": 43}], "comment_count": 0, "testcase_sample": "\"(add 1 2)\"", "total_accepted": 23, "total_submissions": 29, "contest": "", "has_followed_by": false}, "flood-fill": {"id": 1062, "unique_name": "flood-fill", "user_status": null, "title": "Flood Fill", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 68, "description": "An `image` is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\r\n\r\nGiven a coordinate `(sr, sc)` representing the starting pixel (row and column) of the flood fill, and a pixel value `newColor`, \"flood fill\" the image.\r\n\r\nTo perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.\r\n\r\nAt the end, return the modified image.", "notice": "* The length of `image` and `image[0]` will be in the range `[1, 50]`.\r\n* The given starting pixel will satisfy `0 <= sr < image.length` and `0 <= sc < image[0].length`.\r\n* The value of each color in `image[i][j]` and `newColor` will be an integer in `[0, 65535]`.", "clarification": "", "example": "```\r\nInput: \r\nimage = [[1,1,1],[1,1,0],[1,0,1]]\r\nsr = 1, sc = 1, newColor = 2\r\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\r\nExplanation: \r\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels connected \r\nby a path of the same color as the starting pixel are colored with the new color.\r\nNote the bottom corner is not colored 2, because it is not 4-directionally connected\r\nto the starting pixel.\r\n```", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}], "related_problems": [{"id": 1225, "title": "Island Perimeter", "unique_name": "island-perimeter", "level": 1, "accepted_rate": 69}], "comment_count": 0, "testcase_sample": "[[1,1,1],[1,1,0],[1,0,1]]\n1\n1\n2", "total_accepted": 136, "total_submissions": 197, "contest": "", "has_followed_by": false}, "my-calendar-iii": {"id": 1063, "unique_name": "my-calendar-iii", "user_status": null, "title": "My Calendar III", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 80, "description": "Implement a `MyCalendarThree` class to store your events. A new event can **always** be added.\r\n\r\nYour class will have one method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\r\n\r\nA K-booking happens when **K** events have some non-empty intersection (ie., there is some time that is common to all K events.)\r\n\r\nFor each call to the method `MyCalendar.book`, return an integer `K` representing the largest integer such that there exists a `K`-booking in the calendar.\r\n\r\nYour class will be called like this: `MyCalendarThree cal = new MyCalendarThree(); MyCalendarThree.book(start, end)`", "notice": "* The number of calls to `MyCalendarThree.book` per test case will be at most 400.\r\n* In calls to `MyCalendarThree.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.", "clarification": "", "example": "```\r\nMyCalendarThree();\r\nMyCalendarThree.book(10, 20); // returns 1\r\nMyCalendarThree.book(50, 60); // returns 1\r\nMyCalendarThree.book(10, 40); // returns 2\r\nMyCalendarThree.book(5, 15); // returns 3\r\nMyCalendarThree.book(5, 10); // returns 3\r\nMyCalendarThree.book(25, 55); // returns 3\r\nExplanation: \r\nThe first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.\r\nThe third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.\r\nThe remaining events cause the maximum K-booking to be only a 3-booking.\r\nNote that the last event locally causes a 2-booking, but the answer is still 3 because\r\neg. [10, 20), [10, 40), and [5, 15) are still triple booked.\r\n```", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1065, "title": "My Calendar I", "unique_name": "my-calendar-i", "level": 2, "accepted_rate": 57}, {"id": 1064, "title": "My Calendar II", "unique_name": "my-calendar-ii", "level": 2, "accepted_rate": 55}], "comment_count": 0, "testcase_sample": "MyCalendarThree()\nbook(10,20)\nbook(50,60)\nbook(10,40)\nbook(5,15)\nbook(5,10)\nbook(25,55)", "total_accepted": 82, "total_submissions": 101, "contest": "", "has_followed_by": false}, "my-calendar-ii": {"id": 1064, "unique_name": "my-calendar-ii", "user_status": null, "title": "My Calendar II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 55, "description": "Implement a `MyCalendarTwo` class to store your events. A new event can be added if adding the event will not cause a **triple** booking.\r\n\r\nYour class will have one method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\r\n\r\nA triple booking happens when **three** events have some non-empty intersection (ie., there is some time that is common to all 3 events.)\r\n\r\nFor each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a **triple** booking. Otherwise, return `false` and do not add the event to the calendar.\r\n\r\nYour class will be called like this: `MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)`", "notice": "* The number of calls to MyCalendar.book per test case will be at most 1000.\r\n* In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.", "clarification": "", "example": "```\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(50, 60); // returns true\r\nMyCalendar.book(10, 40); // returns true\r\nMyCalendar.book(5, 15); // returns false\r\nMyCalendar.book(5, 10); // returns true\r\nMyCalendar.book(25, 55); // returns true\r\nExplanation: \r\nThe first two events can be booked.  The third event can be double booked.\r\nThe fourth event (5, 15) can't be booked, because it would result in a triple booking.\r\nThe fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.\r\nThe sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;\r\nthe time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\r\n```", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1065, "title": "My Calendar I", "unique_name": "my-calendar-i", "level": 2, "accepted_rate": 57}, {"id": 1063, "title": "My Calendar III", "unique_name": "my-calendar-iii", "level": 3, "accepted_rate": 80}], "comment_count": 0, "testcase_sample": "MyCalendarTwo()\nbook(10,20)\nbook(50,60)\nbook(10,40)\nbook(5,15)\nbook(5,10)\nbook(25,55)", "total_accepted": 185, "total_submissions": 333, "contest": "", "has_followed_by": false}, "my-calendar-i": {"id": 1065, "unique_name": "my-calendar-i", "user_status": null, "title": "My Calendar I", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Implement a `MyCalendar` class to store your events. A new event can be added if adding the event will not cause a double booking.\r\n\r\nYour class will have the method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers x such that `start <= x < end`.\r\n\r\nA double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)\r\n\r\nFor each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a double booking. Otherwise, return `false` and do not add the event to the calendar.\r\n\r\nYour class will be called like this: `MyCalendar cal = new MyCalendar()`; `MyCalendar.book(start, end)`", "notice": "* The number of calls to `MyCalendar.book` per test case will be at most `1000`.\r\n* In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.", "clarification": "", "example": "```\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(15, 25); // returns false\r\nMyCalendar.book(20, 30); // returns true\r\nExplanation: \r\nThe first event can be booked.  The second can't because time 15 is already booked by another event.\r\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1064, "title": "My Calendar II", "unique_name": "my-calendar-ii", "level": 2, "accepted_rate": 55}, {"id": 1063, "title": "My Calendar III", "unique_name": "my-calendar-iii", "level": 3, "accepted_rate": 80}], "comment_count": 0, "testcase_sample": "MyCalendar()\nbook(10,20)\nbook(15,25)\nbook(20,30)", "total_accepted": 255, "total_submissions": 439, "contest": "", "has_followed_by": false}, "verify-preorder-serialization-of-a-binary-tree": {"id": 1066, "unique_name": "verify-preorder-serialization-of-a-binary-tree", "user_status": null, "title": "Verify Preorder Serialization of a Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 52, "description": "One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.\r\n\r\n~~~~.\r\n     _9_\r\n    /   \\\r\n   3     2\r\n  / \\   / \\\r\n 4   1  #  6\r\n/ \\ / \\   / \\\r\n# # # #   # #\r\n~~~~\r\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where # represents a null node.\r\n\r\nGiven a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.\r\n\r\nEach comma separated value in the string must be either an integer or a character '#' representing null pointer.\r\n\r\nYou may assume that the input format is always valid, for example it could never contain two consecutive commas such as \"1,,3\".\r\n\r\nExample 1:\r\n~~~~.\r\n\"9,3,4,#,#,1,#,#,2,#,6,#,#\"\r\nReturn true\r\n~~~~\r\n\r\nExample 2:\r\n~~~~.\r\n\"1,#\"\r\nReturn false\r\n~~~~\r\n\r\nExample 3:\r\n~~~~.\r\n\"9,#,#,1\"\r\nReturn false\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1061, "title": "Parse Lisp Expression", "unique_name": "parse-lisp-expression", "level": 3, "accepted_rate": 75}], "comment_count": 0, "testcase_sample": "\"#\"", "total_accepted": 88, "total_submissions": 165, "contest": "", "has_followed_by": false}, "find-pivot-index": {"id": 1068, "unique_name": "find-pivot-index", "user_status": null, "title": "Find Pivot Index", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 50, "description": "Given an array of integers `nums`, write a method that returns the \"pivot\" index of this array.\r\n\r\nWe define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.\r\n\r\nIf no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.", "notice": "* The length of `nums` will be in the range `[0, 10000]`.\r\n* Each element `nums[i]` will be an integer in the range `[-1000, 1000]`.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: \r\nnums = [1, 7, 3, 6, 5, 6]\r\nOutput: 3\r\nExplanation: \r\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\r\nAlso, 3 is the first index where this occurs.\r\n```\r\n```\r\nExample 2:\r\nInput: \r\nnums = [1, 2, 3]\r\nOutput: -1\r\nExplanation: \r\nThere is no index that satisfies the conditions in the problem statement.\r\n```", "challenge": "", "tags": [{"id": 104, "name": "Coupang", "cn_name": "Coupang", "type": 3, "unique_name": "coupang", "alias": "", "problem_count": 8}, {"id": 151, "name": "Radius", "cn_name": "Radius", "type": 3, "unique_name": "radius", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,7,3,6,5,6]", "total_accepted": 81, "total_submissions": 157, "contest": "", "has_followed_by": false}, "remove-comments": {"id": 1069, "unique_name": "remove-comments", "user_status": null, "title": "Remove Comments", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "\r\nGiven a C++ program, remove comments from it. The program source is an array where source[i] is the i-th line of the source code. This represents the result of splitting the original source code string by the newline character \\n.\r\n\r\nIn C++, there are two types of comments, line comments, and block comments.\r\n\r\nThe string // denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\r\n\r\nThe string /* denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of */ should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string /*/ does not yet end the block comment, as the ending would be overlapping the beginning.\r\n\r\nThe first effective comment takes precedence over others: if the string // occurs in a block comment, it is ignored. Similarly, if the string /* occurs in a line or block comment, it is also ignored.\r\n\r\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\r\n\r\nThere will be no control characters, single quote, or double quote characters. For example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case. (Also, nothing else such as defines or macros will interfere with the comments.)\r\n\r\nIt is guaranteed that every open block comment will eventually be closed, so /* outside of a line or block comment always starts a new comment.\r\n\r\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\r\n\r\nAfter removing the comments from the source code, return the source code in the same format.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \r\nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n\r\nThe line by line code is visualized as below:\r\n/*Test program */\r\nint main()\r\n{ \r\n  // variable declaration \r\nint a, b, c;\r\n/* This is a test\r\n   multiline  \r\n   comment for \r\n   testing */\r\na = b + c;\r\n}\r\n\r\nOutput: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n\r\nThe line by line code is visualized as below:\r\nint main()\r\n{ \r\n  \r\nint a, b, c;\r\na = b + c;\r\n}\r\n\r\nExplanation: \r\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \r\nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\nOutput: [\"ab\"]\r\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n~~~~", "notice": "The length of source is in the range [1, 100].\r\nThe length of source[i] is in the range [0, 80].\r\nEvery open block comment is eventually closed.\r\nThere are no single-quote, double-quote, or control characters in the source code.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]", "total_accepted": 51, "total_submissions": 156, "contest": "", "has_followed_by": false}, "accounts-merge": {"id": 1070, "unique_name": "accounts-merge", "user_status": null, "title": "Accounts Merge", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Given a list accounts, each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\r\n\r\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\r\n\r\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \r\naccounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\nOutput: [[\"John\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\nExplanation: \r\nThe first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\r\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\r\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \r\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\r\n~~~~", "notice": "", "clarification": "", "example": "The length of accounts will be in the range [1, 1000].\r\nThe length of accounts[i] will be in the range [1, 10].\r\nThe length of accounts[i][j] will be in the range [1, 30].", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]", "total_accepted": 129, "total_submissions": 272, "contest": "", "has_followed_by": false}, "longest-word-in-dictionary": {"id": 1071, "unique_name": "longest-word-in-dictionary", "user_status": null, "title": "Longest Word in Dictionary", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 61, "description": "Given a list of strings `words` representing an English Dictionary, find the longest word in `words` that can be built one character at a time by other words in `words`. If there is more than one possible answer, return the longest word with the smallest lexicographical order.\r\n\r\nIf there is no answer, return the empty string.", "notice": "1.All the strings in the input will only contain lowercase letters.\r\n2.The length of `words` will be in the range `[1, 1000]`.\r\n3.The length of `words[i]` will be in the range `[1, 30]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \r\nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\r\nOutput: \"world\"\r\nExplanation: \r\nThe word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\r\n```\r\n**Example 2:**\r\n```\r\nInput: \r\nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\r\nOutput: \"apple\"\r\nExplanation: \r\nBoth \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\r\n```", "challenge": "", "tags": [{"id": 147, "name": "Pinterest", "cn_name": "Pinterest", "type": 3, "unique_name": "pinterest", "alias": "", "problem_count": 3}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"w\",\"wo\",\"wor\",\"worl\", \"world\"]", "total_accepted": 97, "total_submissions": 155, "contest": "", "has_followed_by": false}, "range-module": {"id": 1074, "unique_name": "range-module", "user_status": null, "title": "Range Module", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 47, "description": "A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.\r\n\r\n- `addRange(int left, int right)` Adds the half-open interval `[left, right)`, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked.\r\n- `queryRange(int left, int right)` Returns true if and only if every real number in the interval `[left, right)` is currently being tracked.\r\n- `removeRange(int left, int right)` Stops tracking every real number currently being tracked in the interval `[left, right)`.", "notice": "- A half open interval `[left, right)` denotes all real numbers `left <= x < right`.\r\n- `0 < left < right < 10^9` in all calls to `addRange, queryRange, removeRange`.\r\n- The total number of calls to `addRange` in a single test case is at most `1000`.\r\n- The total number of calls to `queryRange` in a single test case is at most `5000`.\r\n- The total number of calls to `removeRange` in a single test case is at most `1000`.", "clarification": "", "example": "```\r\naddRange(10, 20): null\r\nremoveRange(14, 16): null\r\nqueryRange(10, 14): true (Every number in [10, 14) is being tracked)\r\nqueryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\r\nqueryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation\r\n```", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 48, "name": "Segment Tree", "cn_name": "Segment Tree", "type": 21, "unique_name": "segment-tree", "alias": "", "problem_count": 16}, {"id": 172, "name": "Machine Zone", "cn_name": "Machine Zone", "type": 3, "unique_name": "machine-zone", "alias": "", "problem_count": 1}, {"id": 104, "name": "Coupang", "cn_name": "Coupang", "type": 3, "unique_name": "coupang", "alias": "", "problem_count": 8}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}, {"id": 30, "title": "Insert Interval", "unique_name": "insert-interval", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "addRange(10,20)\nremoveRange(14,16)\nqueryRange(10,14)\nqueryRange(13,15)\nqueryRange(16,17)", "total_accepted": 34, "total_submissions": 69, "contest": "", "has_followed_by": false}, "subarray-product-less-than-k": {"id": 1075, "unique_name": "subarray-product-less-than-k", "user_status": null, "title": "Subarray Product Less Than K", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 64, "description": "Your are given an array of positive integers `nums`.\r\n\r\nCount and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than `k`.", "notice": "* `0 < nums.length <= 50000`.\r\n* `0 < nums[i] < 1000`.\r\n* `0 <= k < 10^6`.", "clarification": "", "example": "```\r\nInput: nums = [10, 5, 2, 6], k = 100\r\nOutput: 8\r\nExplanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].\r\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\r\n```", "challenge": "", "tags": [{"id": 153, "name": "Yatra", "cn_name": "Yatra", "type": 3, "unique_name": "yatra", "alias": "", "problem_count": 1}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 911, "title": "Maximum Size Subarray Sum Equals k", "unique_name": "maximum-size-subarray-sum-equals-k", "level": 2, "accepted_rate": 44}, {"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[10, 5, 2, 6]\n100", "total_accepted": 78, "total_submissions": 119, "contest": "", "has_followed_by": false}, "minimum-ascii-delete-sum-for-two-strings": {"id": 1076, "unique_name": "minimum-ascii-delete-sum-for-two-strings", "user_status": null, "title": "Minimum ASCII Delete Sum for Two Strings", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 77, "description": "Given two strings `s1, s2`, find the lowest ASCII sum of deleted characters to make two strings equal.", "notice": "* `0 < s1.length, s2.length <= 1000`.\r\n* All elements of each string will have an ASCII value in `[97, 122]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: s1 = \"sea\", s2 = \"eat\"\r\nOutput: 231\r\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\r\nDeleting \"t\" from \"eat\" adds 116 to the sum.\r\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\r\n```\r\n**Example 2:**\r\n```\r\nInput: s1 = \"delete\", s2 = \"leet\"\r\nOutput: 403\r\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\r\nadds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\r\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\r\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\r\n```", "challenge": "", "tags": [{"id": 158, "name": "TripleByte", "cn_name": "TripleByte", "type": 3, "unique_name": "triplebyte", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"sea\"\n\"eat\"", "total_accepted": 68, "total_submissions": 87, "contest": "", "has_followed_by": false}, "falling-squares": {"id": 1077, "unique_name": "falling-squares", "user_status": null, "title": "Falling Squares", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 62, "description": "On an infinite number line (x-axis), we drop given squares in the order they are given.\r\n\r\nThe i-th square dropped (positions[i] = (left, side_length)) is a square with the left-most point being positions[i][0] and sidelength positions[i][1].\r\n\r\nThe square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.\r\n\r\nThe squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.\r\n\r\n\r\nReturn a list ans of heights. Each height ans[i] represents the current highest height of any square we have dropped, after dropping squares represented by positions[0], positions[1], ..., positions[i].", "notice": "1 <= positions.length <= 1000.\r\n1 <= positions[i][0] <= 10^8.\r\n1 <= positions[i][1] <= 10^6.", "clarification": "", "example": "```\r\nInput: [[1, 2], [2, 3], [6, 1]]\r\nOutput: [2, 5, 5]\r\nExplanation:\r\n\r\nAfter the first drop of positions[0] = [1, 2]:\r\n_aa\r\n_aa\r\n-------\r\nThe maximum height of any square is 2.\r\n\r\n\r\nAfter the second drop of positions[1] = [2, 3]:\r\n__aaa\r\n__aaa\r\n__aaa\r\n_aa__\r\n_aa__\r\n--------------\r\nThe maximum height of any square is 5.  \r\nThe larger square stays on top of the smaller square despite where its center\r\nof gravity is, because squares are infinitely sticky on their bottom edge.\r\n\r\n\r\nAfter the third drop of positions[1] = [6, 1]:\r\n__aaa\r\n__aaa\r\n__aaa\r\n_aa\r\n_aa___a\r\n--------------\r\nThe maximum height of any square is still 5.\r\n\r\nThus, we return an answer of [2, 5, 5].\r\n```\r\n\r\n```\r\nInput: [[100, 100], [200, 100]]\r\nOutput: [100, 100]\r\nExplanation: Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.\r\n```", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 108, "name": "Square", "cn_name": "Square", "type": 3, "unique_name": "square", "alias": "", "problem_count": 3}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2],[2,3],[6,1]]", "total_accepted": 62, "total_submissions": 98, "contest": "", "has_followed_by": false}, "degree-of-an-array": {"id": 1078, "unique_name": "degree-of-an-array", "user_status": null, "title": "Degree of an Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 58, "description": "Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\r\n\r\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.", "notice": "nums.length will be between 1 and 50,000.\r\nnums[i] will be an integer between 0 and 49,999.", "clarification": "", "example": "Input: [1, 2, 2, 3, 1]\r\nOutput: 2\r\nExplanation: \r\nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\r\nOf the subarrays that have the same degree:\r\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\r\nThe shortest length is 2. So return 2.", "challenge": "", "tags": [{"id": 178, "name": "GE Digital", "cn_name": "GE Digital", "type": 3, "unique_name": "ge-digital", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1, 2, 2, 3, 1]", "total_accepted": 74, "total_submissions": 125, "contest": "", "has_followed_by": false}, "count-binary-substrings": {"id": 1079, "unique_name": "count-binary-substrings", "user_status": null, "title": "Count Binary Substrings", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 61, "description": "Give a string `s`, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\r\n\r\nSubstrings that occur multiple times are counted the number of times they occur.", "notice": "`s.length` will be between `1` and `50,000`.\r\n`s` will only consist of `\"0\"` or `\"1\"` characters.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \"00110011\"\r\nOutput: 6\r\nExplanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\r\n\r\nNotice that some of these substrings repeat and are counted the number of times they occur.\r\n\r\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.\r\n```\r\n**Example 2:**\r\n```\r\nInput: \"10101\"\r\nOutput: 4\r\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\r\n```", "challenge": "", "tags": [{"id": 164, "name": "Helix", "cn_name": "Helix", "type": 3, "unique_name": "helix", "alias": "", "problem_count": 1}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [{"id": 973, "title": "1-bit and 2-bit Characters", "unique_name": "1-bit-and-2-bit-characters", "level": 1, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "\"00110011\"", "total_accepted": 100, "total_submissions": 160, "contest": "", "has_followed_by": false}, "max-area-of-island": {"id": 1080, "unique_name": "max-area-of-island", "user_status": null, "title": "Max Area of Island", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 52, "description": "Given a non-empty 2D array `grid` of 0's and 1's, an **island** is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\r\n\r\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)", "notice": "The length of each dimension in the given `grid` does not exceed 50.", "clarification": "", "example": "**Example 1:**\r\n```\r\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\r\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\r\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\r\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\r\n```\r\nGiven the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.\r\n\r\n**Example 2:**\r\n```\r\n[[0,0,0,0,0,0,0,0]]\r\n```\r\nGiven the above grid, return 0.", "challenge": "", "tags": [{"id": 156, "name": "Intuit", "cn_name": "Intuit", "type": 3, "unique_name": "intuit", "alias": "", "problem_count": 3}], "related_problems": [{"id": 1225, "title": "Island Perimeter", "unique_name": "island-perimeter", "level": 1, "accepted_rate": 69}], "comment_count": 0, "testcase_sample": "[[0,0,0,0,0,0,0,0]]", "total_accepted": 119, "total_submissions": 225, "contest": "", "has_followed_by": false}, "stickers-to-spell-word": {"id": 1081, "unique_name": "stickers-to-spell-word", "user_status": null, "title": "Stickers to Spell Word", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 65, "description": "We are given N different types of stickers. Each sticker has a lowercase English word on it.\r\n\r\nYou would like to spell out the given `target` string by cutting individual letters from your collection of stickers and rearranging them.\r\n\r\nYou can use each sticker more than once if you want, and you have infinite quantities of each sticker.\r\n\r\nWhat is the minimum number of stickers that you need to spell out the `target`? If the task is impossible, return -1.", "notice": "* `stickers` has length in the range `[1, 50]`.\r\n* `stickers` consists of lowercase English words (without apostrophes).\r\n* `target` has length in the range `[1, 15]`, and consists of lowercase English letters.\r\n* In all test cases, all words were chosen randomly from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.\r\n* The time limit may be more challenging than usual. It is expected that a 50 sticker test case can be solved within 35ms on average.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\n[\"with\", \"example\", \"science\"], \"thehat\"\r\nOutput:\r\n3\r\nExplanation:\r\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\r\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\r\nAlso, this is the minimum number of stickers necessary to form the target string.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput:\r\n[\"notice\", \"possible\"], \"basicbasic\"\r\nOutput:\r\n-1\r\nExplanation:\r\nWe can't form the target \"basicbasic\" from cutting letters from the given stickers.\r\n```", "challenge": "", "tags": [{"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}], "related_problems": [{"id": 1270, "title": "Ransom Note", "unique_name": "ransom-note", "level": 1, "accepted_rate": 57}], "comment_count": 0, "testcase_sample": "[\"with\", \"example\", \"science\"]\n\"thehat\"", "total_accepted": 37, "total_submissions": 55, "contest": "", "has_followed_by": false}, "maximum-sum-of-3-non-overlapping-subarrays": {"id": 1083, "unique_name": "maximum-sum-of-3-non-overlapping-subarrays", "user_status": null, "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 52, "description": "In a given array `nums` of positive integers, find three non-overlapping subarrays with maximum sum.\r\n\r\nEach subarray will be of size `k`, and we want to maximize the sum of all `3*k` entries.\r\n\r\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.", "notice": "* `nums.length` will be between 1 and 20000.\r\n* `nums[i]` will be between 1 and 65535.\r\n* `k` will be between 1 and floor(nums.length / 3).", "clarification": "", "example": "```\r\nInput: [1,2,1,2,6,7,5,1], 2\r\nOutput: [0, 3, 5]\r\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\r\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,1,2,6,7,5,1]\n2", "total_accepted": 123, "total_submissions": 232, "contest": "", "has_followed_by": false}, "longest-univalue-path": {"id": 1085, "unique_name": "longest-univalue-path", "user_status": null, "title": "Longest Univalue Path", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 52, "description": "Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.", "notice": "1.The length of path between two nodes is represented by the number of edges between them.\r\n2.The given binary tree has not more than 10000 nodes. The height of the tree is not more than 1000.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\n\r\n              5\r\n             / \\\r\n            4   5\r\n           / \\   \\\r\n          1   1   5\r\nOutput:\r\n\r\n2\r\n```\r\n**Example 2:**\r\n```\r\nInput:\r\n\r\n              1\r\n             / \\\r\n            4   5\r\n           / \\   \\\r\n          4   4   5\r\nOutput:\r\n\r\n2\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "{5,4,5,1,1,#,5}", "total_accepted": 140, "total_submissions": 266, "contest": "", "has_followed_by": false}, "repeated-string-match": {"id": 1086, "unique_name": "repeated-string-match", "user_status": null, "title": "Repeated String Match", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 43, "description": "Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.", "notice": "The length of A and B will be between 1 and 10000.", "clarification": "", "example": "with A = \"abcd\" and B = \"cdabcdab\".\r\n\r\nReturn 3, because by repeating A three times (\u201cabcdabcdabcd\u201d), B is a substring of it; and B is not a substring of A repeated two times (\"abcdabcd\").", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"a\"\n\"aa\"", "total_accepted": 152, "total_submissions": 346, "contest": "", "has_followed_by": false}, "redundant-connection-ii": {"id": 1087, "unique_name": "redundant-connection-ii", "user_status": null, "title": "Redundant Connection II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 34, "description": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\r\n\r\nThe given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, ..., N), with one additional directed edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n\r\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] that represents a directed edge connecting nodes u and v, where u is a parent of child v.\r\n\r\nReturn an edge that can be removed so that the resulting graph is a rooted tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [[1,2], [1,3], [2,3]]\r\nOutput: [2,3]\r\nExplanation: The given directed graph will be like this:\r\n  1\r\n / \\\r\nv   v\r\n2-->3\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: [[1,2], [2,3], [3,4], [4,1], [1,5]]\r\nOutput: [4,1]\r\nExplanation: The given directed graph will be like this:\r\n5 <- 1 -> 2\r\n     ^    |\r\n     |    v\r\n     4 <- 3\r\n~~~~", "notice": "", "clarification": "", "example": "The size of the input 2D-array will be between 3 and 1000.\r\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2], [1,3], [2,3]]", "total_accepted": 57, "total_submissions": 166, "contest": "", "has_followed_by": false}, "redundant-connection": {"id": 1088, "unique_name": "redundant-connection", "user_status": null, "title": "Redundant Connection", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "In this problem, a tree is an undirected graph that is connected and has no cycles.\r\n\r\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n\r\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.\r\n\r\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [[1,2], [1,3], [2,3]]\r\nOutput: [2,3]\r\nExplanation: The given undirected graph will be like this:\r\n  1\r\n / \\\r\n2 - 3\r\n~~~~\r\n\r\nExample 2:\r\n~~~~.\r\nInput: [[1,2], [2,3], [3,4], [1,4], [1,5]]\r\nOutput: [1,4]\r\nExplanation: The given undirected graph will be like this:\r\n5 - 1 - 2\r\n    |   |\r\n    4 - 3\r\n~~~~", "notice": "", "clarification": "", "example": "The size of the input 2D-array will be between 3 and 1000.\r\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2],[1,3],[2,3]]", "total_accepted": 74, "total_submissions": 148, "contest": "", "has_followed_by": false}, "valid-parenthesis-string": {"id": 1089, "unique_name": "valid-parenthesis-string", "user_status": null, "title": "Valid Parenthesis String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:\r\n\r\n1. Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.\r\n2. Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.\r\n3. Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.\r\n4. `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string.\r\n5. An empty string is also valid.", "notice": "1. The string size will be in the range `[1, 100]`.", "clarification": "", "example": "```\r\nInput: \"()\"\r\nOutput: True\r\n\r\nInput: \"(*)\"\r\nOutput: True\r\n\r\nInput: \"(*))\"\r\nOutput: True\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 91, "name": "Alibaba", "cn_name": "Alibaba", "type": 3, "unique_name": "alibaba", "alias": "", "problem_count": 7}], "related_problems": [{"id": 1047, "title": "Special Binary String", "unique_name": "special-binary-string", "level": 3, "accepted_rate": 82}], "comment_count": 0, "testcase_sample": "\"()\"", "total_accepted": 104, "total_submissions": 260, "contest": "", "has_followed_by": false}, "map-sum-pairs": {"id": 1090, "unique_name": "map-sum-pairs", "user_status": null, "title": "Map Sum Pairs", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Implement a MapSum class with `insert`, and `sum` methods.\r\n\r\nFor the method `insert`, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n\r\nFor the method `sum`, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.", "notice": "", "clarification": "", "example": "```\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n```", "challenge": "", "tags": [{"id": 34, "name": "Trie", "cn_name": "Trie", "type": 21, "unique_name": "trie", "alias": "Prefix Tree", "problem_count": 11}, {"id": 154, "name": "Akuna Capital", "cn_name": "Akuna Capital", "type": 3, "unique_name": "akuna-capital", "alias": "", "problem_count": 4}], "related_problems": [], "comment_count": 0, "testcase_sample": "MapSum()\ninsert(\"apple\", 3)\nsum(\"ap\")\ninsert(\"app\", 2)\nsum(\"ap\")", "total_accepted": 48, "total_submissions": 97, "contest": "", "has_followed_by": false}, "cut-off-trees-for-golf-event": {"id": 1092, "unique_name": "cut-off-trees-for-golf-event", "user_status": null, "title": "Cut Off Trees for Golf Event", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "You are asked to cut off trees in a forest for a golf event. The forest is represented as a non-negative 2D map, in this map:\r\n1. represents the obstacle can't be reached.\r\n2. represents the ground can be walked through.\r\n3. The place with number bigger than 1 represents a tree can be walked through, and this positive number represents the tree's height.\r\nYou are asked to cut off all the trees in this forest in the order of tree's height - always cut off the tree with lowest height first. And after cutting, the original place has the tree will become a grass (value 1).\r\n\r\nYou will start from the point (0, 0) and you should output the minimum steps you need to walk to cut off all the trees. If you can't cut off all the trees, output -1 in that situation.\r\n\r\nYou are guaranteed that no two trees have the same height and there is at least one tree needs to be cut off.", "notice": "size of the given matrix will not exceed 50x50.", "clarification": "", "example": "Input: \r\n[\r\n [1,2,3],\r\n [0,0,4],\r\n [7,6,5]\r\n]\r\nOutput: 6\r\n\r\nInput: \r\n[\r\n [1,2,3],\r\n [0,0,0],\r\n [7,6,5]\r\n]\r\nOutput: -1\r\n\r\nInput: \r\n[\r\n [2,3,4],\r\n [0,0,5],\r\n [8,7,6]\r\n]\r\nOutput: 6\r\nExplanation: You started from the point (0,0) and you can cut off the tree in (0,0) directly without walking.", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2,3],[0,0,4],[7,6,5]]", "total_accepted": 75, "total_submissions": 251, "contest": "", "has_followed_by": false}, "number-of-longest-increasing-subsequence": {"id": 1093, "unique_name": "number-of-longest-increasing-subsequence", "user_status": null, "title": "Number of Longest Increasing Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "Given an unsorted array of integers, find the number of longest increasing subsequence.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [1,3,5,4,7]\r\nOutput: 2\r\nExplanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].\r\n```\r\n**Example 2:**\r\n```\r\nInput: [2,2,2,2,2]\r\nOutput: 5\r\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 397, "title": "Longest Continuous Increasing Subsequence", "unique_name": "longest-continuous-increasing-subsequence", "level": 1, "accepted_rate": 30}, {"id": 76, "title": "Longest Increasing Subsequence", "unique_name": "longest-increasing-subsequence", "level": 2, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "[1,3,5,4,7]", "total_accepted": 171, "total_submissions": 428, "contest": "", "has_followed_by": false}, "second-minimum-node-in-a-binary-tree": {"id": 1094, "unique_name": "second-minimum-node-in-a-binary-tree", "user_status": null, "title": "Second Minimum Node In a Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 55, "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes.\r\n\r\nGiven such a binary tree, you need to output the **second minimum** value in the set made of all the nodes' value in the whole tree.\r\n\r\nIf no such second minimum value exists, output -1 instead.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \r\n    2\r\n   / \\\r\n  2   5\r\n     / \\\r\n    5   7\r\n\r\nOutput: 5\r\nExplanation: The smallest value is 2, the second smallest value is 5.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: \r\n    2\r\n   / \\\r\n  2   2\r\n\r\nOutput: -1\r\nExplanation: The smallest value is 2, but there isn't any second smallest value.\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 902, "title": "Kth Smallest Element in a BST", "unique_name": "kth-smallest-element-in-a-bst", "level": 2, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "{2,2,5,#,#,5,7}", "total_accepted": 155, "total_submissions": 280, "contest": "", "has_followed_by": false}, "maximum-swap": {"id": 1095, "unique_name": "maximum-swap", "user_status": null, "title": "Maximum Swap", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 54, "description": "Given a non-negative integer, you could swap two digits **at most** once to get the maximum valued number. Return the maximum valued number you could get.", "notice": "1. The given number is in the range [0, 10^8]", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: 2736\r\nOutput: 7236\r\nExplanation: Swap the number 2 and the number 7.\r\n```\r\n**Example 2:**\r\n```\r\nInput: 9973\r\nOutput: 9973\r\nExplanation: No swap.\r\n```", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "2736", "total_accepted": 152, "total_submissions": 278, "contest": "", "has_followed_by": false}, "kth-smallest-number-in-multiplication-table": {"id": 1097, "unique_name": "kth-smallest-number-in-multiplication-table", "user_status": null, "title": "Kth Smallest Number in Multiplication Table", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "Nearly every one have used the Multiplication Table. But could you find out the k-th smallest number quickly from the multiplication table?\r\n\r\nGiven the height m and the length n of a m * n Multiplication Table, and a positive integer k, you need to return the k-th smallest number in this table.", "notice": "The m and n will be in the range [1, 30000].\r\nThe k will be in the range [1, m * n]", "clarification": "", "example": "```\r\nInput: m = 3, n = 3, k = 5\r\nOutput: \r\nExplanation: \r\nThe Multiplication Table:\r\n1\t2\t3\r\n2\t4\t6\r\n3\t6\t9\r\n\r\nThe 5-th smallest number is 3 (1, 2, 2, 3, 3).\r\n\r\nInput: m = 2, n = 3, k = 6\r\nOutput: \r\nExplanation: \r\nThe Multiplication Table:\r\n1\t2\t3\r\n2\t4\t6\r\n\r\nThe 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "1\n1\n1", "total_accepted": 57, "total_submissions": 190, "contest": "", "has_followed_by": false}, "non-decreasing-array": {"id": 1099, "unique_name": "non-decreasing-array", "user_status": null, "title": "Non-decreasing Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 47, "description": "Given an array with `n` integers, your task is to check if it could become non-decreasing by modifying **at most** `1` element.\r\n\r\nWe define an array is non-decreasing if `array[i] <= array[i + 1]` holds for every `i` (1 <= i < n).", "notice": "The `n` belongs to [1, 10,000].", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [4,2,3]\r\nOutput: True\r\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: [4,2,1]\r\nOutput: False\r\nExplanation: You can't get a non-decreasing array by modify at most one element.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4,2,3]", "total_accepted": 116, "total_submissions": 243, "contest": "", "has_followed_by": false}, "strange-printer": {"id": 1100, "unique_name": "strange-printer", "user_status": null, "title": "Strange Printer", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 61, "description": "There is a strange printer with the following two special requirements:\r\n\r\n1. The printer can only print a sequence of the same character each time.\r\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\r\nGiven a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.", "notice": "Length of the given string will not exceed `100`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \"aaabbb\"\r\nOutput: 2\r\nExplanation: Print \"aaa\" first and then print \"bbb\".\r\n```\r\n**Example 2:**\r\n```\r\nInput: \"aba\"\r\nOutput: 2\r\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 1180, "title": "Remove Boxes", "unique_name": "remove-boxes", "level": 3, "accepted_rate": 60}], "comment_count": 0, "testcase_sample": "\"aaabbb\"", "total_accepted": 43, "total_submissions": 68, "contest": "", "has_followed_by": false}, "maximum-width-of-binary-tree": {"id": 1101, "unique_name": "maximum-width-of-binary-tree", "user_status": null, "title": "Maximum Width of Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a **full binary tree**, but some nodes are `null`.\r\n\r\nThe width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.", "notice": "Answer will in the range of 32-bit signed integer.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \r\n\r\n           1\r\n         /   \\\r\n        3     2\r\n       / \\     \\  \r\n      5   3     9 \r\n\r\nOutput: 4\r\nExplanation: The maximum width existing in the third level with the length 4 (5,3,#,9).\r\n```\r\n**Example 2:**\r\n```\r\nInput: \r\n\r\n          1\r\n         /  \r\n        3    \r\n       / \\       \r\n      5   3     \r\n\r\nOutput: 2\r\nExplanation: The maximum width existing in the third level with the length 2 (5,3).\r\n```\r\n**Example 3:**\r\n```\r\nInput: \r\n\r\n          1\r\n         / \\\r\n        3   2 \r\n       /        \r\n      5      \r\n\r\nOutput: 2\r\nExplanation: The maximum width existing in the second level with the length 2 (3,2).\r\n```\r\n**Example 4:**\r\n```\r\nInput: \r\n\r\n          1\r\n         / \\\r\n        3   2\r\n       /     \\  \r\n      5       9 \r\n     /         \\\r\n    6           7\r\nOutput: 8\r\nExplanation:The maximum width existing in the fourth level with the length 8 (6,#,#,#,#,#,#,7).\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,3,2,5,3,#,9}", "total_accepted": 129, "total_submissions": 259, "contest": "", "has_followed_by": false}, "split-array-into-consecutive-subsequences": {"id": 1103, "unique_name": "split-array-into-consecutive-subsequences", "user_status": null, "title": "Split Array into Consecutive Subsequences", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 45, "description": "You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [1,2,3,3,4,5]\r\nOutput: True\r\nExplanation:\r\nYou can split them into two consecutive subsequences : \r\n1, 2, 3\r\n3, 4, 5\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: [1,2,3,3,4,4,5,5]\r\nOutput: True\r\nExplanation:\r\nYou can split them into two consecutive subsequences : \r\n1, 2, 3, 4, 5\r\n3, 4, 5\r\n~~~~\r\nExample 3:\r\n~~~~.\r\nInput: [1,2,3,4,4,5]\r\nOutput: False\r\n~~~~", "notice": "", "clarification": "", "example": "The length of the input is in range of [1, 10000]", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1]", "total_accepted": 66, "total_submissions": 144, "contest": "", "has_followed_by": false}, "judge-route-circle": {"id": 1104, "unique_name": "judge-route-circle", "user_status": null, "title": "Judge Route Circle", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 77, "description": "Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to **the original place** finally.\r\n\r\nThe move sequence is represented by a string. And each move is represent by a character. The valid robot moves are `R` (Right), `L` (Left), `U` (Up) and `D` (down). The output should be true or false representing whether the robot makes a circle.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \"UD\"\r\nOutput: true\r\n```\r\n**Example 2:**\r\n```\r\nInput: \"LL\"\r\nOutput: false\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"UD\"", "total_accepted": 168, "total_submissions": 215, "contest": "", "has_followed_by": false}, "print-binary-tree": {"id": 1105, "unique_name": "print-binary-tree", "user_status": null, "title": "Print Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "\r\nPrint a binary tree in an `m*n 2D` string array following these rules:\r\n\r\n1. The row number `m` should be equal to the height of the given binary tree.\r\n2. The column number `n` should always be an odd number.\r\n3. The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (**left-bottom part and right-bottom part**). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them.\r\n4. Each unused space should contain an empty string `\"\"`.\r\n5. Print the subtrees following the same rules.", "notice": "The height of binary tree is in the range of `[1, 10]`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\n     1\r\n    /\r\n   2\r\nOutput:\r\n[[\"\", \"1\", \"\"],\r\n [\"2\", \"\", \"\"]]\r\n```\r\n**Example 2:**\r\n```\r\nInput:\r\n     1\r\n    / \\\r\n   2   3\r\n    \\\r\n     4\r\nOutput:\r\n[[\"\", \"\", \"\", \"1\", \"\", \"\", \"\"],\r\n [\"\", \"2\", \"\", \"\", \"\", \"3\", \"\"],\r\n [\"\", \"\", \"4\", \"\", \"\", \"\", \"\"]]\r\n```\r\n**Example 3:**\r\n```\r\nInput:\r\n      1\r\n     / \\\r\n    2   5\r\n   / \r\n  3 \r\n / \r\n4 \r\nOutput:\r\n\r\n[[\"\",  \"\",  \"\", \"\",  \"\", \"\", \"\", \"1\", \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\r\n [\"\",  \"\",  \"\", \"2\", \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"5\", \"\", \"\", \"\"]\r\n [\"\",  \"3\", \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\r\n [\"4\", \"\",  \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]]\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 167, "name": "Poynt", "cn_name": "Poynt", "type": 3, "unique_name": "poynt", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2]", "total_accepted": 44, "total_submissions": 72, "contest": "", "has_followed_by": false}, "maximum-binary-tree": {"id": 1106, "unique_name": "maximum-binary-tree", "user_status": null, "title": "Maximum Binary Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 76, "description": "Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:\r\n\r\n* The root is the maximum number in the array.\r\n* The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.\r\n* The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.\r\n\r\nConstruct the maximum tree by the given array and output the root node of this tree.", "notice": "The size of the given array will be in the range [1,1000].", "clarification": "", "example": "```\r\nInput: [3,2,1,6,0,5]\r\nOutput: return the tree root node representing the following tree:\r\n\r\n      6\r\n    /   \\\r\n   3     5\r\n    \\    / \r\n     2  0   \r\n       \\\r\n        1\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,2,1,6,0,5]", "total_accepted": 182, "total_submissions": 236, "contest": "", "has_followed_by": false}, "dota2-senate": {"id": 1109, "unique_name": "dota2-senate", "user_status": null, "title": "Dota2 Senate", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 63, "description": "In the world of Dota2, there are two parties: the Radiant and the Dire.\r\n\r\nThe Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\r\n\r\nBan one senator's right: \r\nA senator can make another senator lose all his rights in this and all the following rounds.\r\nAnnounce the victory: \r\nIf this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.\r\nGiven a string representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party respectively. Then if there are n senators, the size of the given string will be n.\r\n\r\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\r\n\r\nSuppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be Radiant or Dire.", "notice": "The length of the given string will in the range [1, 10,000].", "clarification": "", "example": "Input: \"RD\"\r\nOutput: \"Radiant\"\r\nExplanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. \r\nAnd the second senator can't exercise any rights any more since his right has been banned. \r\nAnd in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\r\n\r\nInput: \"RDD\"\r\nOutput: \"Dire\"\r\nExplanation: \r\nThe first senator comes from Radiant and he can just ban the next senator's right in the round 1. \r\nAnd the second senator can't exercise any rights anymore since his right has been banned. \r\nAnd the third senator comes from Dire and he can ban the first senator's right in the round 1. \r\nAnd in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.", "challenge": "", "tags": [{"id": 175, "name": "Valve", "cn_name": "Valve", "type": 3, "unique_name": "valve", "alias": "", "problem_count": 1}], "related_problems": [{"id": 1207, "title": "Teemo Attacking", "unique_name": "teemo-attacking", "level": 2, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "\"RD\"", "total_accepted": 42, "total_submissions": 65, "contest": "", "has_followed_by": false}, "replace-words": {"id": 1110, "unique_name": "replace-words", "user_status": null, "title": "Replace Words", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 53, "description": "In English, we have a concept called root, which can be followed by some other words to form another longer word - let's call this word successor. For example, the root an, followed by other, which can form another word another.\r\n\r\nNow, given a dictionary consisting of many roots and a sentence. You need to replace all the successor in the sentence with the root forming it. If a successor has many roots can form it, replace it with the root with the shortest length.\r\n\r\nYou need to output the sentence after the replacement.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: dict = [\"cat\", \"bat\", \"rat\"]\r\nsentence = \"the cattle was rattled by the battery\"\r\nOutput: \"the cat was rat by the bat\"\r\n~~~~", "notice": "The input will only have lower-case letters.\r\n1 <= dict words number <= 1000\r\n1 <= sentence words number <= 1000\r\n1 <= root length <= 100\r\n1 <= sentence words length <= 1000", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"cat\", \"bat\", \"rat\"]\n\"the cattle was rattled by the battery\"", "total_accepted": 83, "total_submissions": 155, "contest": "", "has_followed_by": false}, "set-mismatch": {"id": 1112, "unique_name": "set-mismatch", "user_status": null, "title": "Set Mismatch", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 49, "description": "The set `S` originally contains numbers from 1 to `n`. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.\r\n\r\nGiven an array `nums` representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.", "notice": "1.The given array size will in the range [2, 10000].\r\n2.The given array's numbers won't have any order.", "clarification": "", "example": "```\r\nInput: nums = [1,2,2,4]\r\nOutput: [2,3]\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 633, "title": "Find the Duplicate Number", "unique_name": "find-the-duplicate-number", "level": 2, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[1,2,2,4]", "total_accepted": 179, "total_submissions": 359, "contest": "", "has_followed_by": false}, "solve-the-equation": {"id": 1113, "unique_name": "solve-the-equation", "user_status": null, "title": "Solve the Equation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "Solve a given equation and return the value of x in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable x and its coefficient.\r\n\r\nIf there is no solution for the equation, return \"No solution\".\r\n\r\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\r\n\r\nIf there is exactly one solution for the equation, we ensure that the value of x is an integer.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \"x+5-3+x=6+x-2\"\r\nOutput: \"x=2\"\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \"x=x\"\r\nOutput: \"Infinite solutions\"\r\n~~~~\r\nExample 3:\r\n~~~~.\r\nInput: \"2x=x\"\r\nOutput: \"x=0\"\r\n~~~~\r\nExample 4:\r\n~~~~.\r\nInput: \"2x+3x-6x=x+2\"\r\nOutput: \"x=-1\"\r\n~~~~\r\nExample 5:\r\n~~~~.\r\nInput: \"x=x+2\"\r\nOutput: \"No solution\"\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"x=x\"", "total_accepted": 90, "total_submissions": 172, "contest": "", "has_followed_by": false}, "shopping-offers": {"id": 1114, "unique_name": "shopping-offers", "user_status": null, "title": "Shopping Offers", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 70, "description": "In LeetCode Store, there are some kinds of items to sell. Each item has a price.\r\n\r\nHowever, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\r\n\r\nYou are given the each item's price, a set of special offers, and the number we need to buy for each item. The job is to output the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers.\r\n\r\nEach special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.\r\n\r\nYou could use any of special offers as many times as you want.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [2,5], [[3,0,5],[1,2,10]], [3,2]\r\nOutput: 14\r\nExplanation: \r\nThere are two kinds of items, A and B. Their prices are $2 and $5 respectively. \r\nIn special offer 1, you can pay $5 for 3A and 0B\r\nIn special offer 2, you can pay $10 for 1A and 2B. \r\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\r\nOutput: 11\r\nExplanation: \r\nThe price of A is $2, and $3 for B, $4 for C. \r\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \r\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \r\nYou cannot add more items, though only $9 for 2A ,2B and 1C.\r\n~~~~", "notice": "There are at most 6 kinds of items, 100 special offers.\r\nFor each item, you need to buy at most 6 of them.\r\nYou are not allowed to buy more items than you want, even if that would lower the overall price.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[2,5]\n[[3,0,5],[1,2,10]]\n[3,2]", "total_accepted": 60, "total_submissions": 84, "contest": "", "has_followed_by": false}, "exclusive-time-of-functions": {"id": 1116, "unique_name": "exclusive-time-of-functions", "user_status": null, "title": "Exclusive Time of Functions", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 52, "description": "Given the running logs of n functions that are executed in a nonpreemptive single threaded CPU, find the exclusive time of these functions.\r\n\r\nEach function has a unique id, start from 0 to n-1. A function may be called recursively or by another function.\r\n\r\nA log is a string has this format : function_id:start_or_end:timestamp. For example, \"0:start:0\" means function 0 starts from the very beginning of time 0. \"0:end:0\" means function 0 ends to the very end of time 0.\r\n\r\nExclusive time of a function is defined as the time spent within this function, the time spent by calling other functions should not be considered as this function's exclusive time. You should return the exclusive time of each function sorted by their function id.", "notice": "Input logs will be sorted by timestamp, NOT log id.\r\nYour output should be sorted by function id, which means the 0th element of your output corresponds to the exclusive time of function 0.\r\nTwo functions won't start or end at the same time.\r\nFunctions could be called recursively, and will always end.\r\n1 <= n <= 100", "clarification": "", "example": "```\r\nInput:\r\nn = 2\r\nlogs = \r\n[\"0:start:0\",\r\n \"1:start:2\",\r\n \"1:end:5\",\r\n \"0:end:6\"]\r\nOutput:[3, 4]\r\nExplanation:\r\nFunction 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. \r\nNow function 0 calls function 1, function 1 starts at time 2, executes 4 units of time and end at time 5.\r\nFunction 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. \r\nSo function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.\r\n```", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "2\n[\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]", "total_accepted": 126, "total_submissions": 236, "contest": "", "has_followed_by": false}, "smallest-range": {"id": 1117, "unique_name": "smallest-range", "user_status": null, "title": "Smallest Range", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 31, "description": "You have `k` lists of sorted integers in ascending order. Find the **smallest** range that includes at least one number from each of the k lists.", "notice": "1. the range `[a,b]` is smaller than range `[c,d]` if `b-a < d-c` or `a < c` if `b-a == d-c`.\r\n2. The given list may contain duplicates, so ascending order means >= here.\r\n3. 1 <= `k` <= 3500\r\n4. -105 <= `value of elements` <= 105.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\r\nOutput: [20,24]\r\nExplanation: \r\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\r\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\r\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\r\n```", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 111, "name": "Lyft", "cn_name": "Lyft", "type": 3, "unique_name": "lyft", "alias": "", "problem_count": 2}], "related_problems": [{"id": 32, "title": "Minimum Window Substring ", "unique_name": "minimum-window-substring", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]", "total_accepted": 62, "total_submissions": 196, "contest": "", "has_followed_by": false}, "k-inverse-pairs-array": {"id": 1118, "unique_name": "k-inverse-pairs-array", "user_status": null, "title": "K Inverse Pairs Array", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 64, "description": "Given two integers n and k, find how many different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs.\r\n\r\nWe define an inverse pair as following: For ith and jth element in the array, if i < j and a[i] > a[j] then it's an inverse pair; Otherwise, it's not.\r\n\r\nSince the answer may be very large, the answer should be modulo 109 + 7.", "notice": "The integer n is in the range [1, 1000] and k is in the range [0, 1000].", "clarification": "", "example": "Input: n = 3, k = 0\r\nOutput: 1\r\nExplanation: \r\nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.\r\n\r\nInput: n = 3, k = 1\r\nOutput: 2\r\nExplanation: \r\nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.", "challenge": "", "tags": [{"id": 102, "name": "Works Applications", "cn_name": "Works Applications", "type": 3, "unique_name": "works-applications", "alias": "", "problem_count": 3}], "related_problems": [], "comment_count": 0, "testcase_sample": "3\n0", "total_accepted": 21, "total_submissions": 31, "contest": "", "has_followed_by": false}, "maximum-product-of-three-numbers": {"id": 1119, "unique_name": "maximum-product-of-three-numbers", "user_status": null, "title": "Maximum Product of Three Numbers", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 46, "description": "Given an integer array, find three numbers whose product is maximum and output the maximum product.", "notice": "1. The length of the given array will be in range `[3,10^4]` and all elements are in the range `[-1000, 1000]`.\r\n2. Multiplication of any three numbers in the input won't exceed the range of 32-bit signed integer.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [1,2,3]\r\nOutput: 6\r\n```\r\n**Example 2:**\r\n```\r\nInput: [1,2,3,4]\r\nOutput: 24\r\n```", "challenge": "", "tags": [{"id": 156, "name": "Intuit", "cn_name": "Intuit", "type": 3, "unique_name": "intuit", "alias": "", "problem_count": 3}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}, {"id": 50, "title": "Product of Array Exclude Itself", "unique_name": "product-of-array-exclude-itself", "level": 1, "accepted_rate": 28}], "comment_count": 0, "testcase_sample": "[1,2,3]", "total_accepted": 141, "total_submissions": 301, "contest": "", "has_followed_by": false}, "add-one-row-to-tree": {"id": 1122, "unique_name": "add-one-row-to-tree", "user_status": null, "title": "Add One Row to Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 73, "description": "Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.\r\n\r\nThe adding rule is: given a positive integer depth d, for each NOT null tree nodes N in depth d-1, create two tree nodes with value v as N's left subtree root and right subtree root. And N's original left subtree should be the left subtree of the new left subtree root, its original right subtree should be the right subtree of the new right subtree root. If depth d is 1 that means there is no depth d-1 at all, then create a tree node with value v as the new root of the whole original tree, and the original tree is the new root's left subtree.\r\n\r\n", "notice": "The given d is in range [1, maximum depth of the given tree + 1].\r\nThe given binary tree has at least one tree node.", "clarification": "", "example": "```\r\nInput: \r\nA binary tree as following:\r\n       4\r\n     /   \\\r\n    2     6\r\n   / \\   / \r\n  3   1 5   \r\nv = 1\r\nd = 2\r\nOutput: \r\n       4\r\n      / \\\r\n     1   1\r\n    /     \\\r\n   2       6\r\n  / \\     / \r\n 3   1   5   \r\n```", "challenge": "", "tags": [{"id": 166, "name": "Gilt Groupe", "cn_name": "Gilt Groupe", "type": 3, "unique_name": "gilt-groupe", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4,2,6,3,1,5]\n1\n2", "total_accepted": 34, "total_submissions": 45, "contest": "", "has_followed_by": false}, "merge-two-binary-trees": {"id": 1126, "unique_name": "merge-two-binary-trees", "user_status": null, "title": "Merge Two Binary Trees", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 80, "description": "Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\r\n\r\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.", "notice": "The merging process must start from the root nodes of both trees.", "clarification": "", "example": "```\r\nInput: \r\n\tTree 1                     Tree 2                  \r\n          1                         2                             \r\n         / \\                       / \\                            \r\n        3   2                     1   3                        \r\n       /                           \\   \\                      \r\n      5                             4   7                  \r\nOutput: \r\nMerged tree:\r\n\t     3\r\n\t    / \\\r\n\t   4   5\r\n\t  / \\   \\ \r\n\t 5   4   7\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,3,2,5}\n{2,1,3,#,4,#,7}", "total_accepted": 214, "total_submissions": 263, "contest": "", "has_followed_by": false}, "add-bold-tag-in-string": {"id": 1127, "unique_name": "add-bold-tag-in-string", "user_status": null, "title": "Add Bold Tag in String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 53, "description": "Given a string s and a list of strings dict, you need to add a closed pair of bold tag <b> and </b> to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.", "notice": "The given dict won't contain duplicates, and its length won't exceed 100.\r\nAll the strings in input have length in range [1, 1000].", "clarification": "", "example": "```\r\nInput: \r\ns = \"abcxyz123\"\r\ndict = [\"abc\",\"123\"]\r\nOutput:\r\n\"<b>abc</b>xyz<b>123</b>\"\r\n```\r\n```\r\nInput: \r\ns = \"aaabbcc\"\r\ndict = [\"aaa\",\"aab\",\"bc\"]\r\nOutput:\r\n\"<b>aaabbc</b>c\"\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1151, "title": "Tag Validator", "unique_name": "tag-validator", "level": 3, "accepted_rate": 84}], "comment_count": 0, "testcase_sample": "\"abcxyz123\"\n[\"abc\",\"123\"]", "total_accepted": 116, "total_submissions": 216, "contest": "", "has_followed_by": false}, "valid-triangle-number": {"id": 1132, "unique_name": "valid-triangle-number", "user_status": null, "title": "Valid Triangle Number", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 50, "description": "Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.", "notice": "1. The length of the given array won't exceed `1000`.\r\n2. The integers in the given array are in the range of `[0, 1000]`.", "clarification": "", "example": "```\r\nInput: [2,2,3,4]\r\nOutput: 3\r\nExplanation:\r\nValid combinations are: \r\n2,3,4 (using the first 2)\r\n2,3,4 (using the second 2)\r\n2,2,3\r\n```", "challenge": "", "tags": [{"id": 110, "name": "Expedia", "cn_name": "Expedia", "type": 3, "unique_name": "expedia", "alias": "", "problem_count": 2}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 918, "title": "3Sum Smaller", "unique_name": "3sum-smaller", "level": 2, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "[2,2,3,4]", "total_accepted": 88, "total_submissions": 173, "contest": "", "has_followed_by": false}, "find-duplicate-file-in-system": {"id": 1134, "unique_name": "find-duplicate-file-in-system", "user_status": null, "title": "Find Duplicate File in System", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.\r\n\r\nA group of duplicate files consists of at least **two** files that have exactly the same content.\r\n\r\nA single directory info string in the **input** list has the following format:\r\n\r\n`\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"`\r\n\r\nIt means there are **n** files (`f1.txt, f2.txt ... fn.txt` with content `f1_content, f2_content ... fn_content`, respectively) in directory `root/d1/d2/.../dm`. Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.\r\n\r\nThe **output** is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\r\n\r\n`\"directory_path/file_name.txt\"`", "notice": "1.No order is required for the final output.\r\n2.You may assume the directory name, file name and file content only has letters and digits, and the length of file content is in the range of [1,50].\r\n3.The number of files given is in the range of [1,20000].\r\n4.You may assume no files or directories share the same name in the same directory.\r\n5.You may assume each given directory info represents a unique directory. Directory path and file info are separated by a single blank space.", "clarification": "", "example": "```\r\nInput:\r\n[\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"]\r\nOutput:  \r\n[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\r\n```", "challenge": "1.Imagine you are given a real file system, how will you search files? DFS or BFS?\r\n2.If the file content is very large (GB level), how will you modify your solution?\r\n3.If you can only read the file by 1kb each time, how will you modify your solution?\r\n4.What is the time complexity of your modified solution? What is the most time-consuming part and memory consuming part of it? How to optimize?\r\n5.How to make sure the duplicated files you find are not false positive?", "tags": [{"id": 75, "name": "Dropbox", "cn_name": "Dropbox", "type": 3, "unique_name": "dropbox", "alias": "", "problem_count": 9}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]", "total_accepted": 68, "total_submissions": 151, "contest": "", "has_followed_by": false}, "construct-string-from-binary-tree": {"id": 1137, "unique_name": "construct-string-from-binary-tree", "user_status": null, "title": "Construct String from Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 53, "description": "You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.\r\n\r\nThe null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: Binary tree: [1,2,3,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n   /    \r\n  4     \r\n\r\nOutput: \"1(2(4))(3)\"\r\n\r\nExplanation: Originallay it needs to be \"1(2(4)())(3()())\", \r\nbut you need to omit all the unnecessary empty parenthesis pairs. \r\nAnd it will be \"1(2(4))(3)\".\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: Binary tree: [1,2,3,null,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n     \\  \r\n      4 \r\n\r\nOutput: \"1(2()(4))(3)\"\r\n\r\nExplanation: Almost the same as the first example, \r\nexcept we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3,4]", "total_accepted": 164, "total_submissions": 303, "contest": "", "has_followed_by": false}, "can-place-flowers": {"id": 1138, "unique_name": "can-place-flowers", "user_status": null, "title": "Can Place Flowers", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 65, "description": "Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.\r\n\r\nGiven a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number **n**, return if **n** new flowers can be planted in it without violating the no-adjacent-flowers rule.", "notice": "1.The input array won't violate no-adjacent-flowers rule.\r\n2.The input array size is in the range of [1, 20000].\r\n3.n is a non-negative integer which won't exceed the input array size.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: flowerbed = [1,0,0,0,1], n = 1\r\nOutput: True\r\n```\r\n```\r\nExample 2:\r\nInput: flowerbed = [1,0,0,0,1], n = 2\r\nOutput: False\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 1207, "title": "Teemo Attacking", "unique_name": "teemo-attacking", "level": 2, "accepted_rate": 51}, {"id": 1001, "title": "Asteroid Collision", "unique_name": "asteroid-collision", "level": 2, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[1,0,0,0,1]\n1", "total_accepted": 309, "total_submissions": 471, "contest": "", "has_followed_by": false}, "non-negative-integers-without-consecutive-ones": {"id": 1142, "unique_name": "non-negative-integers-without-consecutive-ones", "user_status": null, "title": "Non-negative Integers without Consecutive Ones", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 70, "description": "Given a positive integer n, find the number of **non-negative** integers less than or equal to n, whose binary representations do NOT contain **consecutive ones**.", "notice": "1 <= n <= 10^9", "clarification": "", "example": "```\r\nInput: 5\r\nOutput: 5\r\nExplanation: \r\nHere are the non-negative integers <= 5 with their corresponding binary representations:\r\n0 : 0\r\n1 : 1\r\n2 : 10\r\n3 : 11\r\n4 : 100\r\n5 : 101\r\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}], "related_problems": [{"id": 668, "title": "Ones and Zeroes", "unique_name": "ones-and-zeroes", "level": 2, "accepted_rate": 42}, {"id": 534, "title": "House Robber II", "unique_name": "house-robber-ii", "level": 2, "accepted_rate": 28}, {"id": 392, "title": "House Robber", "unique_name": "house-robber", "level": 2, "accepted_rate": 34}], "comment_count": 0, "testcase_sample": "5", "total_accepted": 45, "total_submissions": 64, "contest": "", "has_followed_by": false}, "minimum-index-sum-of-two-lists": {"id": 1143, "unique_name": "minimum-index-sum-of-two-lists", "user_status": null, "title": "Minimum Index Sum of Two Lists", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 59, "description": "Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.\r\n\r\nYou need to help them find out their **common interest** with the least **list index sum**. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.", "notice": "1.The length of both lists will be in the range of [1, 1000].\r\n2.The length of strings in both lists will be in the range of [1, 30].\r\n3.The index is starting from 0 to the list length minus 1.\r\n4.No duplicates in both lists.", "clarification": "", "example": "```\r\nExample 1:\r\nInput:\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\r\nOutput: [\"Shogun\"]\r\nExplanation: The only restaurant they both like is \"Shogun\".\r\n```\r\n```\r\nExample 2:\r\nInput:\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"KFC\", \"Shogun\", \"Burger King\"]\r\nOutput: [\"Shogun\"]\r\nExplanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\r\n```", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]", "total_accepted": 81, "total_submissions": 135, "contest": "", "has_followed_by": false}, "range-addition-ii": {"id": 1144, "unique_name": "range-addition-ii", "user_status": null, "title": "Range Addition II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 58, "description": "Given an m * n matrix M initialized with all 0's and several update operations.\r\n\r\nOperations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0 <= i < a and 0 <= j < b.\r\n\r\nYou need to count and return the number of maximum integers in the matrix after performing all the operations.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \r\nm = 3, n = 3\r\noperations = [[2,2],[3,3]]\r\nOutput: 4\r\nExplanation: \r\nInitially, M = \r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [2,2], M = \r\n[[1, 1, 0],\r\n [1, 1, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [3,3], M = \r\n[[2, 2, 1],\r\n [2, 2, 1],\r\n [1, 1, 1]]\r\n\r\nSo the maximum integer in M is 2, and there are four of it in M. So return 4.\r\n~~~~", "notice": "The range of m and n is [1,40000].\r\nThe range of a is [1,m], and the range of b is [1,n].\r\nThe range of operations size won't exceed 10,000.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}], "related_problems": [], "comment_count": 0, "testcase_sample": "3\n3\n[[2,2],[3,3]]", "total_accepted": 66, "total_submissions": 111, "contest": "", "has_followed_by": false}, "longest-harmonious-subsequence": {"id": 1148, "unique_name": "longest-harmonious-subsequence", "user_status": null, "title": "Longest Harmonious Subsequence", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 54, "description": "We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.\r\n\r\nNow, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.", "notice": "The length of the input array will not exceed 20,000.", "clarification": "", "example": "Input: [1,3,2,2,5,2,3,7]\r\nOutput: 5\r\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].", "challenge": "", "tags": [{"id": 148, "name": "LiveRamp", "cn_name": "LiveRamp", "type": 3, "unique_name": "liveramp", "alias": "", "problem_count": 3}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,2,1]", "total_accepted": 68, "total_submissions": 124, "contest": "", "has_followed_by": false}, "valid-square": {"id": 1149, "unique_name": "valid-square", "user_status": null, "title": "Valid Square", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 77, "description": "Given the coordinates of four points in 2D space, return whether the four points could construct a square.\r\n\r\nThe coordinate (x,y) of a point is represented by an integer array with two integers.", "notice": "1. All the input integers are in the range `[-10000, 10000]`.\r\n2. A valid square has four equal sides with positive length and four equal angles (90-degree angles).\r\n3. Input points have no order.", "clarification": "", "example": "```\r\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\r\nOutput: True\r\n```", "challenge": "", "tags": [{"id": 161, "name": "Pure Storage", "cn_name": "Pure Storage", "type": 3, "unique_name": "pure-storage", "alias": "", "problem_count": 1}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[0,0]\n[1,1]\n[1,0]\n[0,1]", "total_accepted": 59, "total_submissions": 75, "contest": "", "has_followed_by": false}, "fraction-addition-and-subtraction": {"id": 1150, "unique_name": "fraction-addition-and-subtraction", "user_status": null, "title": "Fraction Addition and Subtraction", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be irreducible fraction. If your final result is an integer, say 2, you need to change it to the format of fraction that has denominator 1. So in this case, 2 should be converted to 2/1.", "notice": "The input string only contains '0' to '9', '/', '+' and '-'. So does the output.\r\nEach fraction (input and output) has format \u00c2\u00b1numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.\r\nThe input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.\r\nThe number of given fractions will be in the range [1,10].\r\nThe numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.", "clarification": "", "example": "```\r\nInput:\"-1/2+1/2\"\r\nOutput: \"0/1\"\r\n\r\nInput:\"-1/2+1/2+1/3\"\r\nOutput: \"1/3\"\r\n\r\nInput:\"1/3-1/2\"\r\nOutput: \"-1/6\"\r\n\r\nInput:\"5/3+1/3\"\r\nOutput: \"2/1\"\r\n```", "challenge": "", "tags": [{"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"-10/7+1/9+2/7+2/1-1/3+3/10-1/10+8/7-4/9-3/2\"", "total_accepted": 35, "total_submissions": 59, "contest": "", "has_followed_by": false}, "tag-validator": {"id": 1151, "unique_name": "tag-validator", "user_status": null, "title": "Tag Validator", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 84, "description": "Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:\r\n\r\n1. The code must be wrapped in a **valid closed tag**. Otherwise, the code is invalid.\r\n2. A **closed tag** (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is **valid** if and only if the TAG_NAME and TAG_CONTENT are valid.\r\n3. A **valid** `TAG_NAME` only contain **upper-case letters**, and has length in range [1,9]. Otherwise, the `TAG_NAME` is **invalid**.\r\n4. A **valid** `TAG_CONTENT` may contain other **valid closed tags**, **cdata** and any characters (see note1) **EXCEPT** unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is **invalid**.\r\n5. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\r\n6. A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid).\r\n7. The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the **first subsequent** `]]>`.\r\n8. `CDATA_CONTENT` may contain **any characters**. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as **regular characters**.", "notice": "For simplicity, you could assume the input code (including the **any characters** mentioned above) only contain `letters`, `digits`, `'<'`,`'>'`,`'/'`,`'!'`,`'['`,`']'` and `' '`.", "clarification": "", "example": "Valid Code Examples:\r\n```\r\nInput: \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\r\n\r\nOutput: True\r\n\r\nExplanation: \r\n\r\nThe code is wrapped in a closed tag : <DIV> and </DIV>. \r\n\r\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \r\n\r\nAlthough CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.\r\n\r\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\r\n\r\n\r\nInput: \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\r\n\r\nOutput: True\r\n\r\nExplanation:\r\n\r\nWe first separate the code into : start_tag|tag_content|end_tag.\r\n\r\nstart_tag -> \"<DIV>\"\r\n\r\nend_tag -> \"</DIV>\"\r\n\r\ntag_content could also be separated into : text1|cdata|text2.\r\n\r\ntext1 -> \">>  ![cdata[]] \"\r\n\r\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\r\n\r\ntext2 -> \"]]>>]\"\r\n\r\n\r\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\r\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\r\n```\r\nInvalid Code Examples:\r\n```\r\nInput: \"<A>  <B> </A>   </B>\"\r\nOutput: False\r\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\r\n\r\nInput: \"<DIV>  div tag is not closed  <DIV>\"\r\nOutput: False\r\n\r\nInput: \"<DIV>  unmatched <  </DIV>\"\r\nOutput: False\r\n\r\nInput: \"<DIV> closed tags with invalid tag name  <b>123</b> </DIV>\"\r\nOutput: False\r\n\r\nInput: \"<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>\"\r\nOutput: False\r\n\r\nInput: \"<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>\"\r\nOutput: False\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}], "related_problems": [{"id": 1127, "title": "Add Bold Tag in String", "unique_name": "add-bold-tag-in-string", "level": 2, "accepted_rate": 53}], "comment_count": 0, "testcase_sample": "\"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"", "total_accepted": 43, "total_submissions": 50, "contest": "", "has_followed_by": false}, "delete-operation-for-two-strings": {"id": 1156, "unique_name": "delete-operation-for-two-strings", "user_status": null, "title": "Delete Operation for Two Strings", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 65, "description": "Given two words word1 and word2, find the minimum number of steps required to make word1 and word2 the same, where in each step you can delete one character in either string.", "notice": "The length of given words won't exceed 500.\r\nCharacters in given words can only be lower-case letters.", "clarification": "", "example": "Input: \"sea\", \"eat\"\r\nOutput: 2\r\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"sea\"\n\"eat\"", "total_accepted": 80, "total_submissions": 121, "contest": "", "has_followed_by": false}, "shortest-unsorted-continuous-subarray": {"id": 1157, "unique_name": "shortest-unsorted-continuous-subarray", "user_status": null, "title": "Shortest Unsorted Continuous Subarray", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 47, "description": "Given an integer array, you need to find one **continuous subarray** that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.\r\n\r\nYou need to find the **shortest** such subarray and output its length.", "notice": "1.Then length of the input array is in range [1, 10,000].\r\n2.The input array may contain duplicates, so ascending order here means <=.", "clarification": "", "example": "```\r\nInput: [2, 6, 4, 8, 10, 9, 15]\r\nOutput: 5\r\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\r\n```", "challenge": "", "tags": [{"id": 148, "name": "LiveRamp", "cn_name": "LiveRamp", "type": 3, "unique_name": "liveramp", "alias": "", "problem_count": 3}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[2,6,4,8,10,9,15]", "total_accepted": 176, "total_submissions": 371, "contest": "", "has_followed_by": false}, "distribute-candies": {"id": 1163, "unique_name": "distribute-candies", "user_status": null, "title": "Distribute Candies", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 60, "description": "Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain.", "notice": "The length of the given array is in range [2, 10,000], and will be even.\r\nThe number in given array is in range [-100,000, 100,000].", "clarification": "", "example": "Input: candies = [1,1,2,2,3,3]\r\nOutput: 3\r\nExplanation:\r\nThere are three different kinds of candies (1, 2 and 3), and two candies for each kind.\r\nOptimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. \r\nThe sister has three different kinds of candies. \r\n\r\nInput: candies = [1,1,2,3]\r\nOutput: 2\r\nExplanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. \r\nThe sister has two different kinds of candies, the brother has only one kind of candies. ", "challenge": "", "tags": [{"id": 148, "name": "LiveRamp", "cn_name": "LiveRamp", "type": 3, "unique_name": "liveramp", "alias": "", "problem_count": 3}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,2,2,3,3]", "total_accepted": 70, "total_submissions": 114, "contest": "", "has_followed_by": false}, "wiggle-subsequence": {"id": 1164, "unique_name": "wiggle-subsequence", "user_status": null, "title": "Wiggle Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "A sequence of numbers is called a **wiggle sequence** if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.\r\n\r\nFor example, `[1,7,4,9,2,5]` is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, `[1,4,7,2,5]` and `[1,7,4,5,5]` are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.\r\n\r\nGiven a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.", "notice": "", "clarification": "", "example": "```\r\nInput: [1,7,4,9,2,5]\r\nOutput: 6\r\nThe entire sequence is a wiggle sequence.\r\n\r\nInput: [1,17,5,10,13,15,10,5,16,8]\r\nOutput: 7\r\nThere are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].\r\n\r\nInput: [1,2,3,4,5,6,7,8,9]\r\nOutput: 2\r\n```\r\n", "challenge": "Can you do it in O(n) time?", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,7,4,9,2,5]", "total_accepted": 72, "total_submissions": 124, "contest": "", "has_followed_by": false}, "subtree-of-another-tree": {"id": 1165, "unique_name": "subtree-of-another-tree", "user_status": null, "title": "Subtree of Another Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 54, "description": "Given two non-empty binary trees **s** and **t**, check whether tree **t** has exactly the same structure and node values with a subtree of **s**. A subtree of **s** is a tree consists of a node in **s** and all of this node's descendants. The tree **s** could also be considered as a subtree of itself.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nGiven tree s:\r\n\r\n     3\r\n    / \\\r\n   4   5\r\n  / \\\r\n 1   2\r\nGiven tree t:\r\n   4 \r\n  / \\\r\n 1   2\r\nReturn true, because t has the same structure and node values with a subtree of s.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nGiven tree s:\r\n\r\n     3\r\n    / \\\r\n   4   5\r\n  / \\\r\n 1   2\r\n    /\r\n   0\r\nGiven tree t:\r\n   4\r\n  / \\\r\n 1   2\r\nReturn false.\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 95, "name": "eBay", "cn_name": "eBay", "type": 3, "unique_name": "ebay", "alias": "", "problem_count": 3}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 1198, "title": "Most Frequent Subtree Sum", "unique_name": "most-frequent-subtree-sum", "level": 2, "accepted_rate": 57}, {"id": 921, "title": "Count Univalue Subtrees", "unique_name": "count-univalue-subtrees", "level": 2, "accepted_rate": 48}], "comment_count": 0, "testcase_sample": "{3,4,5,1,2}\n{4,1,2}", "total_accepted": 260, "total_submissions": 478, "contest": "", "has_followed_by": false}, "permutation-in-string": {"id": 1169, "unique_name": "permutation-in-string", "user_status": null, "title": "Permutation in String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "Given two strings `s1` and `s2`, write a function to return true if `s2` contains the permutation of `s1`. In other words, one of the first string's permutations is the `substring` of the second string.", "notice": "1.The input strings only contain lower case letters.\r\n2.The length of both given strings is in range [1, 10,000].", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:s1 = \"ab\" s2 = \"eidbaooo\"\r\nOutput:True\r\nExplanation: s2 contains one permutation of s1 (\"ba\").\r\n```\r\n**Example 2:**\r\n```\r\nInput:s1= \"ab\" s2 = \"eidboaoo\"\r\nOutput: False\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 647, "title": "Find All Anagrams in a String", "unique_name": "find-all-anagrams-in-a-string", "level": 1, "accepted_rate": 25}, {"id": 32, "title": "Minimum Window Substring ", "unique_name": "minimum-window-substring", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"ab\"\n\"eidbaooo\"", "total_accepted": 117, "total_submissions": 226, "contest": "", "has_followed_by": false}, "reshape-the-matrix": {"id": 1170, "unique_name": "reshape-the-matrix", "user_status": null, "title": "Reshape the Matrix", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 64, "description": "In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.\r\n\r\nYou're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.\r\n\r\nThe reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.\r\n\r\nIf the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 1, c = 4\r\nOutput: \r\n[[1,2,3,4]]\r\nExplanation:\r\nThe row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 2, c = 4\r\nOutput: \r\n[[1,2],\r\n [3,4]]\r\nExplanation:\r\nThere is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\r\n~~~~", "notice": "The height and width of the given matrix is in range [1, 100].\r\nThe given r and c are all positive.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 149, "name": "Mathworks", "cn_name": "Mathworks", "type": 3, "unique_name": "mathworks", "alias": "", "problem_count": 2}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,2],[3,4]]\n1\n4", "total_accepted": 75, "total_submissions": 115, "contest": "", "has_followed_by": false}, "find-the-closest-palindrome": {"id": 1171, "unique_name": "find-the-closest-palindrome", "user_status": null, "title": "Find the Closest Palindrome", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 61, "description": "Given an integer n, find the closest integer (not including itself), which is a palindrome.\r\n\r\nThe 'closest' is defined as absolute difference minimized between two integers.", "notice": "1.The input n is a positive integer represented by string, whose length will not exceed 18.\r\n2.If there is a tie, return the smaller one as answer.", "clarification": "", "example": "```\r\nInput: \"123\"\r\nOutput: \"121\"\r\n```", "challenge": "", "tags": [{"id": 85, "name": "Yelp", "cn_name": "Yelp", "type": 3, "unique_name": "yelp", "alias": "", "problem_count": 23}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"123\"", "total_accepted": 47, "total_submissions": 75, "contest": "", "has_followed_by": false}, "binary-tree-tilt": {"id": 1172, "unique_name": "binary-tree-tilt", "user_status": null, "title": "Binary Tree Tilt", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 51, "description": "Given a binary tree, return the tilt of the **whole tree**.\r\n\r\nThe tilt of a **tree node** is defined as the **absolute difference** between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.\r\n\r\nThe tilt of the **whole tree** is defined as the sum of all nodes' tilt.", "notice": "1.The sum of node values in any subtree won't exceed the range of 32-bit integer.\r\n2.All the tilt values won't exceed the range of 32-bit integer.", "clarification": "", "example": "```\r\nInput: \r\n         1\r\n       /   \\\r\n      2     3\r\nOutput: 1\r\nExplanation: \r\nTilt of node 2 : 0\r\nTilt of node 3 : 0\r\nTilt of node 1 : |2-3| = 1\r\nTilt of binary tree : 0 + 0 + 1 = 1\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 143, "name": "Indeed", "cn_name": "Indeed", "type": 3, "unique_name": "indeed", "alias": "", "problem_count": 2}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,2,3}", "total_accepted": 175, "total_submissions": 336, "contest": "", "has_followed_by": false}, "reverse-words-in-a-string-iii": {"id": 1173, "unique_name": "reverse-words-in-a-string-iii", "user_status": null, "title": "Reverse Words in a String III", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 55, "description": "Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.", "notice": "In the string, each word is separated by single space and there will not be any extra space in the string.", "clarification": "", "example": "```\r\nInput: \"Let's take LeetCode contest\"\r\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\r\n```", "challenge": "", "tags": [{"id": 160, "name": "Zappos", "cn_name": "Zappos", "type": 3, "unique_name": "zappos", "alias": "", "problem_count": 1}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"Let's take LeetCode contest\"", "total_accepted": 110, "total_submissions": 195, "contest": "", "has_followed_by": false}, "next-greater-element-iii": {"id": 1174, "unique_name": "next-greater-element-iii", "user_status": null, "title": "Next Greater Element III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "Given a positive **32-bit** integer **n**, you need to find the smallest **32-bit** integer which has exactly the same digits existing in the integer **n** and is greater in value than n. If no such positive **32-bit** integer exists, you need to return -1.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: 12\r\nOutput: 21\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: 21\r\nOutput: -1\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1206, "title": "Next Greater Element I", "unique_name": "next-greater-element-i", "level": 1, "accepted_rate": 57}, {"id": 1201, "title": "Next Greater Element II", "unique_name": "next-greater-element-ii", "level": 2, "accepted_rate": 67}], "comment_count": 0, "testcase_sample": "21", "total_accepted": 73, "total_submissions": 162, "contest": "", "has_followed_by": false}, "optimal-division": {"id": 1176, "unique_name": "optimal-division", "user_status": null, "title": "Optimal Division", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 72, "description": "Given a list of **positive integers**, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.\r\n\r\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the **maximum result**, and return the corresponding expression in string format. **Your expression should NOT contain redundant parenthesis**.", "notice": "1.The length of the input array is [1, 10].\r\n2.Elements in the given array will be in range [2, 1000].\r\n3.There is only one optimal division for each test case.", "clarification": "", "example": "```\r\nInput: [1000,100,10,2]\r\nOutput: \"1000/(100/10/2)\"\r\nExplanation:\r\n1000/(100/10/2) = 1000/((100/10)/2) = 200\r\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, \r\nsince they don't influence the operation priority. So you should return \"1000/(100/10/2)\". \r\n\r\nOther cases:\r\n1000/(100/10)/2 = 50\r\n1000/(100/(10/2)) = 50\r\n1000/100/10/2 = 0.5\r\n1000/100/(10/2) = 2\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1000,100,10,2]", "total_accepted": 98, "total_submissions": 134, "contest": "", "has_followed_by": false}, "student-attendance-record-ii": {"id": 1177, "unique_name": "student-attendance-record-ii", "user_status": null, "title": "Student Attendance Record II", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 52, "description": "Given a positive integer n, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 109 + 7.\r\n\r\nA student attendance record is a string that only contains the following three characters:\r\n\r\n1. 'A' : Absent.\r\n2. 'L' : Late.\r\n3. 'P' : Present.\r\n\r\nA record is regarded as rewardable if it doesn't contain more than one 'A' (absent) or more than two continuous 'L' (late).\r\n\r\nExample 1:\r\n~~~~.\r\nInput: n = 2\r\nOutput: 8 \r\nExplanation:\r\nThere are 8 records with length 2 will be regarded as rewardable:\r\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\r\nOnly \"AA\" won't be regarded as rewardable owing to more than one absent times.\r\n~~~~ ", "notice": "", "clarification": "", "example": "The value of n won't exceed 100,000.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1178, "title": "Student Attendance Record I", "unique_name": "student-attendance-record-i", "level": 1, "accepted_rate": 51}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 53, "total_submissions": 100, "contest": "", "has_followed_by": false}, "student-attendance-record-i": {"id": 1178, "unique_name": "student-attendance-record-i", "user_status": null, "title": "Student Attendance Record I", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 51, "description": "You are given a string representing an attendance record for a student. The record only contains the following three characters:\r\n\r\n* **'A'** : Absent.\r\n* **'L'** : Late.\r\n* **'P'** : Present.\r\n\r\nA student could be rewarded if his attendance record doesn't contain **more than one 'A' (absent)** or **more than two continuous 'L' (late)**.\r\n\r\nYou need to return whether the student could be rewarded according to his attendance record.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: \"PPALLP\"\r\nOutput: True\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: \"PPALLL\"\r\nOutput: False\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1177, "title": "Student Attendance Record II", "unique_name": "student-attendance-record-ii", "level": 3, "accepted_rate": 52}], "comment_count": 0, "testcase_sample": "\"PPALLP\"", "total_accepted": 147, "total_submissions": 281, "contest": "", "has_followed_by": false}, "remove-boxes": {"id": 1180, "unique_name": "remove-boxes", "user_status": null, "title": "Remove Boxes", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 60, "description": "Given several boxes with different colors represented by different positive numbers. \r\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k >= 1), remove them and get k*k points.\r\nFind the maximum points you can get.\r\n\r\nExample 1:\r\n~~~~.\r\nInput:\r\n\r\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\r\nOutput:\r\n23\r\nExplanation:\r\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \r\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \r\n----> [1, 3, 3, 3, 1] (1*1=1 points) \r\n----> [1, 1] (3*3=9 points) \r\n----> [] (2*2=4 points)\r\n~~~~", "notice": "", "clarification": "", "example": "The number of boxes n would not exceed 100.", "challenge": "", "tags": [{"id": 92, "name": "Tencent", "cn_name": "Tencent", "type": 3, "unique_name": "tencent", "alias": "", "problem_count": 2}], "related_problems": [{"id": 1100, "title": "Strange Printer", "unique_name": "strange-printer", "level": 3, "accepted_rate": 61}], "comment_count": 0, "testcase_sample": "[1,3,2,2,2,3,4,3,1]", "total_accepted": 43, "total_submissions": 69, "contest": "", "has_followed_by": false}, "diameter-of-binary-tree": {"id": 1181, "unique_name": "diameter-of-binary-tree", "user_status": null, "title": "Diameter of Binary Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 67, "description": "Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\r\n\r\n", "notice": "The length of path between two nodes is represented by the number of edges between them.", "clarification": "", "example": "```\r\nGiven a binary tree \r\n          1\r\n         / \\\r\n        2   3\r\n       / \\     \r\n      4   5    \r\nReturn 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\r\n```", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3,4,5]", "total_accepted": 287, "total_submissions": 422, "contest": "", "has_followed_by": false}, "single-element-in-a-sorted-array": {"id": 1183, "unique_name": "single-element-in-a-sorted-array", "user_status": null, "title": "Single Element in a Sorted Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 63, "description": "\r\nGiven a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [1,1,2,3,3,4,4,8,8]\r\nOutput: 2\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: [3,3,7,7,10,11,11]\r\nOutput: 10\r\n~~~~", "notice": "", "clarification": "", "example": "Your solution should run in O(log n) time and O(1) space.", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,2]", "total_accepted": 117, "total_submissions": 184, "contest": "", "has_followed_by": false}, "minimum-time-difference": {"id": 1184, "unique_name": "minimum-time-difference", "user_status": null, "title": "Minimum Time Difference", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 55, "description": "Given a list of 24-hour clock time points in \"Hour:Minutes\" format, find the minimum **minutes** difference between any two time points in the list.", "notice": "1.The number of time points in the given list is at least 2 and won't exceed 20000.\r\n2.The input time is legal and ranges from 00:00 to 23:59.", "clarification": "", "example": "```\r\nInput: [\"23:59\",\"00:00\"]\r\nOutput: 1\r\n```", "challenge": "", "tags": [{"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"23:59\",\"00:00\"]", "total_accepted": 56, "total_submissions": 99, "contest": "", "has_followed_by": false}, "complex-number-multiplication": {"id": 1185, "unique_name": "complex-number-multiplication", "user_status": null, "title": "Complex Number Multiplication", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 75, "description": "Given two strings representing two [**complex numbers**](https://en.wikipedia.org/wiki/Complex_number \"\").\r\n\r\nYou need to return a string representing their multiplication. Note i^2 = -1 according to the definition.", "notice": "1.The input strings will not have extra blank.\r\n2.The input strings will be given in the form of **a+bi**, where the integer **a** and **b** will both belong to the range of [-100, 100]. And the **output should be also in this form**.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: \"1+1i\", \"1+1i\"\r\nOutput: \"0+2i\"\r\nExplanation: (1 + i) * (1 + i) = 1 + i^2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\r\n```\r\n```\r\nExample 2:\r\nInput: \"1+-1i\", \"1+-1i\"\r\nOutput: \"0+-2i\"\r\nExplanation: (1 - i) * (1 - i) = 1 + i^2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"1+1i\"\n\"1+1i\"", "total_accepted": 98, "total_submissions": 129, "contest": "", "has_followed_by": false}, "k-diff-pairs-in-an-array": {"id": 1187, "unique_name": "k-diff-pairs-in-an-array", "user_status": null, "title": "K-diff Pairs in an Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 37, "description": "Given an array of integers and an integer **k**, you need to find the number of **unique** k-diff pairs in the array. Here a **k-diff** pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is **k**.", "notice": "1.The pairs (i, j) and (j, i) count as the same pair.\r\n2.The length of the array won't exceed 10,000.\r\n3.All the integers in the given input belong to the range: [-1e7, 1e7].", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [3, 1, 4, 1, 5], k = 2\r\nOutput: 2\r\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\r\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\r\n```\r\n**Example 2:**\r\n```\r\nInput:[1, 2, 3, 4, 5], k = 1\r\nOutput: 4\r\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\r\n```\r\n**Example 3:**\r\n```\r\nInput: [1, 3, 1, 5, 4], k = 0\r\nOutput: 1\r\nExplanation: There is one 0-diff pair in the array, (1, 1).\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 610, "title": "Two Sum - Difference equals to target ", "unique_name": "two-sum-difference-equals-to-target", "level": 2, "accepted_rate": 26}], "comment_count": 0, "testcase_sample": "[3,1,4,1,5]\n2", "total_accepted": 237, "total_submissions": 634, "contest": "", "has_followed_by": false}, "minimum-absolute-difference-in-bst": {"id": 1188, "unique_name": "minimum-absolute-difference-in-bst", "user_status": null, "title": "Minimum Absolute Difference in BST", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 64, "description": "Given a binary search tree with non-negative values, find the minimum [absolute difference](https://en.wikipedia.org/wiki/Absolute_difference \"\") between values of any two nodes.", "notice": "There are at least two nodes in this BST.", "clarification": "", "example": "```\r\nInput:\r\n\r\n   1\r\n    \\\r\n     3\r\n    /\r\n   2\r\n\r\nOutput:\r\n1\r\n\r\nExplanation:\r\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,#,3,2}", "total_accepted": 179, "total_submissions": 278, "contest": "", "has_followed_by": false}, "longest-word-in-dictionary-through-deleting": {"id": 1190, "unique_name": "longest-word-in-dictionary-through-deleting", "user_status": null, "title": "Longest Word in Dictionary through Deleting", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\r\n\r\nExample 1:\r\n~~~~.\r\nInput:\r\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\r\n\r\nOutput: \r\n\"apple\"\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput:\r\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\r\n\r\nOutput: \r\n\"a\"\r\n~~~~", "notice": "", "clarification": "", "example": "All the strings in the input will only contain lower-case letters.\r\nThe size of the dictionary won't exceed 1,000.\r\nThe length of all the strings in the input won't exceed 1,000.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"\"\n[]", "total_accepted": 96, "total_submissions": 200, "contest": "", "has_followed_by": false}, "longest-uncommon-subsequence-ii": {"id": 1191, "unique_name": "longest-uncommon-subsequence-ii", "user_status": null, "title": "Longest Uncommon Subsequence II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 64, "description": "Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\r\n\r\nA subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\r\n\r\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [\"aba\", \"cdc\", \"eae\"]\r\nOutput: 3\r\n~~~~", "notice": "", "clarification": "", "example": "All the given strings' lengths will not exceed 10.\r\nThe length of the given list will be in the range of [2, 50].", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"aaa\",\"acb\"]", "total_accepted": 82, "total_submissions": 126, "contest": "", "has_followed_by": false}, "longest-uncommon-subsequence-i": {"id": 1192, "unique_name": "longest-uncommon-subsequence-i", "user_status": null, "title": "Longest Uncommon Subsequence I ", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 61, "description": "Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\r\n\r\nA subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\r\n\r\nThe input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.", "notice": "Both strings' lengths will not exceed 100.\r\nOnly letters from a ~ z will appear in input strings.", "clarification": "", "example": "Input: \"aba\", \"cdc\"\r\nOutput: 3\r\nExplanation: The longest uncommon subsequence is \"aba\" (or \"cdc\"), \r\nbecause \"aba\" is a subsequence of \"aba\", \r\nbut not a subsequence of any other strings in the group of two strings. ", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"\"\n\"\"", "total_accepted": 111, "total_submissions": 180, "contest": "", "has_followed_by": false}, "detect-capital": {"id": 1193, "unique_name": "detect-capital", "user_status": null, "title": "Detect Capital", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 74, "description": "Given a word, you need to judge whether the usage of capitals in it is right or not.\r\n\r\nWe define the usage of capitals in a word to be right when one of the following cases holds:\r\n\r\nAll letters in this word are capitals, like \"USA\".\r\nAll letters in this word are not capitals, like \"leetcode\".\r\nOnly the first letter in this word is capital if it has more than one letter, like \"Google\".\r\nOtherwise, we define that this word doesn't use capitals in a right way.", "notice": "The input will be a non-empty word consisting of uppercase and lowercase latin letters.", "clarification": "", "example": "Input: \"USA\"\r\nOutput: True\r\n\r\nInput: \"FlaG\"\r\nOutput: False", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"USA\"", "total_accepted": 220, "total_submissions": 294, "contest": "", "has_followed_by": false}, "super-washing-machines": {"id": 1194, "unique_name": "super-washing-machines", "user_status": null, "title": "Super Washing Machines", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 68, "description": "You have **n** super washing machines on a line. Initially, each washing machine has some dresses or is empty.\r\n\r\nFor each **move**, you could choose **any m** (1 \u2264 m \u2264 n) washing machines, and pass **one dress** of each washing machine to one of its adjacent washing machines **at the same time** .\r\n\r\nGiven an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the **minimum number of moves** to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.", "notice": "1. The range of n is `[1, 10000]`.\r\n2. The range of dresses number in a super washing machine is `[0, 1e5]`.", "clarification": "", "example": "**Example1**\r\n```\r\nInput: [1,0,5]\r\n\r\nOutput: 3\r\n\r\nExplanation: \r\n1st move:    1     0 <-- 5    =>    1     1     4\r\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3    \r\n3rd move:    2     1 <-- 3    =>    2     2     2   \r\n```\r\n**Example2**\r\n```\r\nInput: [0,3,0]\r\n\r\nOutput: 2\r\n\r\nExplanation: \r\n1st move:    0 <-- 3     0    =>    1     2     0    \r\n2nd move:    1     2 --> 0    =>    1     1     1     \r\n```\r\n**Example3**\r\n```\r\nInput: [0,2,0]\r\n\r\nOutput: -1\r\n\r\nExplanation: \r\nIt's impossible to make all the three washing machines have the same number of dresses. \r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,0,5]", "total_accepted": 72, "total_submissions": 104, "contest": "", "has_followed_by": false}, "find-largest-value-in-each-tree-row": {"id": 1195, "unique_name": "find-largest-value-in-each-tree-row", "user_status": null, "title": "Find Largest Value in Each Tree Row", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 81, "description": "You need to find the largest value in each row of a binary tree.", "notice": "", "clarification": "", "example": "```\r\nInput: [1,3,2,5,3,#,9]\r\nOutput: [1, 3, 9]\r\n```", "challenge": "", "tags": [{"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,3,2,5,3,#,9]", "total_accepted": 134, "total_submissions": 163, "contest": "", "has_followed_by": false}, "find-bottom-left-tree-value": {"id": 1197, "unique_name": "find-bottom-left-tree-value", "user_status": null, "title": "Find Bottom Left Tree Value", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 69, "description": "Given a binary tree, find the leftmost value in the last row of the tree.\r\n\r\n", "notice": "You may assume the tree (i.e., the given root node) is not NULL.", "clarification": "", "example": "```\r\nInput:[2,1,3]\r\nOutput:1\r\n```\r\n\r\n```\r\ninput:[1,2,3,4,5,6,#,#,7]\r\noutput:7\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3,4,5,6,#,#,7]", "total_accepted": 101, "total_submissions": 143, "contest": "", "has_followed_by": false}, "most-frequent-subtree-sum": {"id": 1198, "unique_name": "most-frequent-subtree-sum", "user_status": null, "title": "Most Frequent Subtree Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.", "notice": "You may assume the sum of values in any subtree is in the range of 32-bit signed integer.", "clarification": "", "example": "**Examples 1**\r\nInput:\r\n```\r\n  5\r\n /  \\\r\n2   -3\r\n```\r\nreturn [2, -3, 4], since all the values happen only once, return all of them in any order.\r\n\r\n**Examples 2**\r\nInput:\r\n```\r\n  5\r\n /  \\\r\n2   -5\r\n```\r\nreturn [2], since 2 happens twice, however -5 only occur once.", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [{"id": 1165, "title": "Subtree of Another Tree", "unique_name": "subtree-of-another-tree", "level": 1, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "{5,2,-3}", "total_accepted": 229, "total_submissions": 400, "contest": "", "has_followed_by": false}, "perfect-number": {"id": 1199, "unique_name": "perfect-number", "user_status": null, "title": "Perfect Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 50, "description": "We define the Perfect Number is a **positive** integer that is equal to the sum of all its **positive** divisors except itself.\r\n\r\nNow, given an **integer** n, write a function that returns true when it is a perfect number and false when it is not.", "notice": "The input number n will not exceed 100,000,000", "clarification": "", "example": "**Example:**\r\n```\r\nInput: 28\r\nOutput: True\r\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\r\n```", "challenge": "", "tags": [{"id": 159, "name": "Fallible", "cn_name": "Fallible", "type": 3, "unique_name": "fallible", "alias": "", "problem_count": 1}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1286, "title": "Self Crossing", "unique_name": "self-crossing", "level": 3, "accepted_rate": 65}], "comment_count": 0, "testcase_sample": "28", "total_accepted": 93, "total_submissions": 181, "contest": "", "has_followed_by": false}, "relative-ranks": {"id": 1200, "unique_name": "relative-ranks", "user_status": null, "title": "Relative Ranks", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 43, "description": "Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\r\n\r\nExample 1:\r\n~~~~.\r\nInput: [5, 4, 3, 2, 1]\r\nOutput: [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\r\nExplanation: The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\". \r\nFor the left two athletes, you just need to output their relative ranks according to their scores.\r\n~~~~", "notice": "", "clarification": "", "example": "N is a positive integer and won't exceed 10,000.\r\nAll the scores of athletes are guaranteed to be unique.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1]", "total_accepted": 108, "total_submissions": 247, "contest": "", "has_followed_by": false}, "next-greater-element-ii": {"id": 1201, "unique_name": "next-greater-element-ii", "user_status": null, "title": "Next Greater Element II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 67, "description": "Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.", "notice": "The length of given array won't exceed 10000.", "clarification": "", "example": "```\r\nInput: [1,2,1]\r\nOutput: [2,-1,2]\r\nExplanation: The first 1's next greater number is 2; \r\nThe number 2 can't find next greater number; \r\nThe second 1's next greater number needs to search circularly, which is also 2.\r\n```", "challenge": "", "tags": [{"id": 13, "name": "Stack", "cn_name": "Stack", "type": 22, "unique_name": "stack", "alias": "", "problem_count": 31}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1206, "title": "Next Greater Element I", "unique_name": "next-greater-element-i", "level": 1, "accepted_rate": 57}, {"id": 1174, "title": "Next Greater Element III", "unique_name": "next-greater-element-iii", "level": 2, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "[1,2,1]", "total_accepted": 135, "total_submissions": 198, "contest": "", "has_followed_by": false}, "ipo": {"id": 1202, "unique_name": "ipo", "user_status": null, "title": "IPO", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 80, "description": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most **k** distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most **k** distinct projects.\r\n\r\nYou are given several projects. For each project i, it has a pure profit **Pi** and a minimum capital of **Ci** is needed to start the corresponding project. Initially, you have **W** capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\r\n\r\nTo sum up, pick a list of at most **k** distinct projects from given projects to maximize your final capital, and output your final maximized capital.", "notice": "1.You may assume all numbers in the input are non-negative integers.\r\n2.The length of Profits array and Capital array will not exceed 50,000.\r\n3.The answer is guaranteed to fit in a 32-bit signed integer.", "clarification": "", "example": "```\r\nInput: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\r\n\r\nOutput: 4\r\n\r\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\r\n             After finishing it you will obtain profit 1 and your capital becomes 1.\r\n             With capital 1, you can either start the project indexed 1 or the project indexed 2.\r\n             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\r\n             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\r\n```", "challenge": "", "tags": [{"id": 29, "name": "Heap", "cn_name": "Heap", "type": 21, "unique_name": "heap", "alias": "", "problem_count": 22}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [], "comment_count": 0, "testcase_sample": "2\n0\n[1,2,3]\n[0,1,1]", "total_accepted": 51, "total_submissions": 62, "contest": "", "has_followed_by": false}, "find-mode-in-binary-search-tree": {"id": 1203, "unique_name": "find-mode-in-binary-search-tree", "user_status": null, "title": "Find Mode in Binary Search Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 29, "description": "Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\r\n\r\nAssume a BST is defined as follows:\r\n\r\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\r\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\r\nBoth the left and right subtrees must also be binary search trees.", "notice": "If a tree has more than one mode, you can return them in any order.", "clarification": "", "example": "Given BST [1,#,2,2],\r\nreturn [2].", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,#,2,2]", "total_accepted": 89, "total_submissions": 296, "contest": "", "has_followed_by": false}, "keyboard-row": {"id": 1204, "unique_name": "keyboard-row", "user_status": null, "title": "Keyboard Row", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 62, "description": "Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below.\r\n\r\n![](http://lintcode-media.s3.amazonaws.com/problem/keyboard.png \"\")", "notice": "You may use one character in the keyboard more than once.\r\nYou may assume the input string will only contain letters of alphabet.", "clarification": "", "example": "Input: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\r\nOutput: [\"Alaska\", \"Dad\"]", "challenge": "", "tags": [{"id": 149, "name": "Mathworks", "cn_name": "Mathworks", "type": 3, "unique_name": "mathworks", "alias": "", "problem_count": 2}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]", "total_accepted": 63, "total_submissions": 99, "contest": "", "has_followed_by": false}, "diagonal-traverse": {"id": 1205, "unique_name": "diagonal-traverse", "user_status": null, "title": "Diagonal Traverse", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 71, "description": "Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.", "notice": "The total number of elements of the given matrix will not exceed 10,000.", "clarification": "", "example": "Input:\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\nOutput:  [1,2,4,7,5,3,6,8,9]", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]]", "total_accepted": 82, "total_submissions": 114, "contest": "", "has_followed_by": false}, "next-greater-element-i": {"id": 1206, "unique_name": "next-greater-element-i", "user_status": null, "title": "Next Greater Element I", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "You are given two arrays **(without duplicates)** `nums1` and `nums2` where `nums1`\u00e2\u20ac\u2122s elements are subset of `nums2`. Find all the next greater numbers for `nums1`'s elements in the corresponding places of `nums2`.\r\n\r\nThe Next Greater Number of a number x in `nums1` is the first greater number to its right in `nums2`. If it does not exist, output -1 for this number.", "notice": "1.All elements in `nums1` and `nums2` are unique.\r\n2.The length of both `nums1` and `nums2` would not exceed 1000.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2].\r\nOutput: [-1,3,-1]\r\nExplanation:\r\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\r\n    For number 1 in the first array, the next greater number for it in the second array is 3.\r\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\r\n```\r\n**Example 2:**\r\n```\r\nInput: nums1 = [2,4], nums2 = [1,2,3,4].\r\nOutput: [3,-1]\r\nExplanation:\r\n    For number 2 in the first array, the next greater number for it in the second array is 3.\r\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\r\n```", "challenge": "", "tags": [], "related_problems": [{"id": 1201, "title": "Next Greater Element II", "unique_name": "next-greater-element-ii", "level": 2, "accepted_rate": 67}, {"id": 1174, "title": "Next Greater Element III", "unique_name": "next-greater-element-iii", "level": 2, "accepted_rate": 44}], "comment_count": 0, "testcase_sample": "[4,1,2]\n[1,3,4,2]", "total_accepted": 101, "total_submissions": 175, "contest": "", "has_followed_by": false}, "teemo-attacking": {"id": 1207, "unique_name": "teemo-attacking", "user_status": null, "title": "Teemo Attacking", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 51, "description": "In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking **ascending** time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.\r\n\r\nYou may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.", "notice": "1. You may assume the length of given time series array won't exceed `10000`.\r\n2. You may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed `10,000,000`.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: [1,4], 2\r\nOutput: 4\r\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. \r\nThis poisoned status will last 2 seconds until the end of time point 2. \r\nAnd at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. \r\nSo you finally need to output 4.\r\n\r\n\r\nExample 2:\r\nInput: [1,2], 2\r\nOutput: 3\r\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. \r\nThis poisoned status will last 2 seconds until the end of time point 2. \r\nHowever, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. \r\nSince the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. \r\nSo you finally need to output 3.\r\n```", "challenge": "", "tags": [{"id": 170, "name": "Riot Games", "cn_name": "Riot Games", "type": 3, "unique_name": "riot-games", "alias": "", "problem_count": 1}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1138, "title": "Can Place Flowers", "unique_name": "can-place-flowers", "level": 1, "accepted_rate": 65}, {"id": 1109, "title": "Dota2 Senate", "unique_name": "dota2-senate", "level": 2, "accepted_rate": 63}, {"id": 156, "title": "Merge Intervals", "unique_name": "merge-intervals", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "[1,4]\n2", "total_accepted": 56, "total_submissions": 107, "contest": "", "has_followed_by": false}, "target-sum": {"id": 1208, "unique_name": "target-sum", "user_status": null, "title": "Target Sum", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 54, "description": "You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols `+` and `-`. For each integer, you should choose one from `+` and `-` as its new symbol.\r\n\r\nFind out how many ways to assign symbols to make sum of integers equal to target S.", "notice": "1. The length of the given array is positive and will not exceed `20`.\r\n2. The sum of elements in the given array will not exceed `1000`.\r\n3. Your output answer is guaranteed to be fitted in a `32-bit` integer.", "clarification": "", "example": "```\r\nInput: nums is [1, 1, 1, 1, 1], S is 3. \r\nOutput: 5\r\nExplanation: \r\n\r\n-1+1+1+1+1 = 3\r\n+1-1+1+1+1 = 3\r\n+1+1-1+1+1 = 3\r\n+1+1+1-1+1 = 3\r\n+1+1+1+1-1 = 3\r\n\r\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 653, "title": "Expression Add Operators", "unique_name": "expression-add-operators", "level": 3, "accepted_rate": 29}], "comment_count": 0, "testcase_sample": "[1, 1, 1, 1, 1]\n3", "total_accepted": 296, "total_submissions": 542, "contest": "", "has_followed_by": false}, "construct-the-rectangle": {"id": 1209, "unique_name": "construct-the-rectangle", "user_status": null, "title": "Construct the Rectangle", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 54, "description": "For a web developer, it is very important to know how to design a web page's size. So, given a specific rectangular web page\u00e2\u20ac\u2122s area, your job by now is to design a rectangular web page, whose length `L` and width `W` satisfy the following requirements:\r\n```\r\n1. The area of the rectangular web page you designed must equal to the given target area.\r\n\r\n2. The width W should not be larger than the length L, which means L >= W.\r\n\r\n3. The difference between length L and width W should be as small as possible.\r\n```\r\nYou need to output the length `L` and the width `W` of the web page you designed in sequence.", "notice": "1.The given area won't exceed `10,000,000` and is a positive integer\r\n2.The web page's `width` and `length` you designed must be positive integers.", "clarification": "", "example": "**Example:**\r\n```\r\nInput: 4\r\nOutput: [2, 2]\r\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \r\nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 820, "title": "Rectangle", "unique_name": "rectangle", "level": 2, "accepted_rate": 30}, {"id": 454, "title": "Rectangle Area", "unique_name": "rectangle-area", "level": 0, "accepted_rate": 37}, {"id": 510, "title": "Maximal Rectangle", "unique_name": "maximal-rectangle", "level": 3, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "4", "total_accepted": 87, "total_submissions": 158, "contest": "", "has_followed_by": false}, "increasing-subsequences": {"id": 1210, "unique_name": "increasing-subsequences", "user_status": null, "title": "Increasing Subsequences", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 40, "description": "Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .", "notice": "1.The length of the given array will not exceed 15.\r\n2.The range of integer in the given array is [-100,100].\r\n3.The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.", "clarification": "", "example": "```\r\nInput: [4, 6, 7, 7]\r\nOutput: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\r\n```", "challenge": "", "tags": [{"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 18, "title": "Subsets II", "unique_name": "subsets-ii", "level": 2, "accepted_rate": 27}, {"id": 17, "title": "Subsets", "unique_name": "subsets", "level": 2, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "[4,6,7,7]", "total_accepted": 252, "total_submissions": 621, "contest": "", "has_followed_by": false}, "zuma-game": {"id": 1211, "unique_name": "zuma-game", "user_status": null, "title": "Zuma Game", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 66, "description": "Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.\r\n\r\nEach time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.\r\n\r\nFind the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.", "notice": "1. You may assume that the initial row of balls on the table won\u00e2\u20ac\u2122t have any `3` or more consecutive balls with the same color.\r\n2. The number of balls on the table won't exceed `20`, and the string represents these balls is called \"board\" in the input.\r\n3. The number of balls in your hand won't exceed `5`, and the string represents these balls is called \"hand\" in the input.\r\n4. Both input strings will be non-empty and only contain characters `'R','Y','B','G','W'`.", "clarification": "", "example": "```\r\nInput: \"WRRBBW\", \"RB\"\r\nOutput: -1\r\nExplanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW\r\n\r\nInput: \"WWRRBBWW\", \"WRBRW\"\r\nOutput: 2\r\nExplanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty\r\n\r\nInput:\"G\", \"GGGGG\"\r\nOutput: 2\r\nExplanation: G -> G[G] -> GG[G] -> empty \r\n\r\nInput: \"RBYYBBRRB\", \"YRBGB\"\r\nOutput: 3\r\nExplanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty \r\n```", "challenge": "", "tags": [{"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"WRRBBW\"\n\"RB\"", "total_accepted": 36, "total_submissions": 53, "contest": "", "has_followed_by": false}, "smallest-good-base": {"id": 1213, "unique_name": "smallest-good-base", "user_status": null, "title": "Smallest Good Base", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 51, "description": "For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.\r\n\r\nNow given a string representing n, you should return the smallest good base of n in string format. \r\n\r\nExample 1:\r\n~~~~.\r\nInput: \"13\"\r\nOutput: \"3\"\r\nExplanation: 13 base 3 is 111.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \"4681\"\r\nOutput: \"8\"\r\nExplanation: 4681 base 8 is 11111.\r\n~~~~\r\nExample 3:\r\n~~~~.\r\nInput: \"1000000000000000000\"\r\nOutput: \"999999999999999999\"\r\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\r\n~~~~", "notice": "", "clarification": "", "example": "The range of n is [3, 10^18].\r\nThe string representing n is always valid and will not have leading zeros.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"3\"", "total_accepted": 48, "total_submissions": 92, "contest": "", "has_followed_by": false}, "license-key-formatting": {"id": 1214, "unique_name": "license-key-formatting", "user_status": null, "title": "License Key Formatting", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 55, "description": "You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\r\n\r\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.\r\n\r\nGiven a non-empty string S and a number K, format the string according to the rules described above.", "notice": "The length of string S will not exceed 12,000, and K is a positive integer.\r\nString S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\r\nString S is non-empty.", "clarification": "", "example": "Input: S = \"5F3Z-2e-9-w\", K = 4\r\n\r\nOutput: \"5F3Z-2E9W\"\r\n\r\nExplanation: The string S has been split into two parts, each part has 4 characters.\r\nNote that the two extra dashes are not needed and can be removed.\r\n\r\nInput: S = \"2-5g-3-J\", K = 2\r\n\r\nOutput: \"2-5G-3J\"\r\n\r\nExplanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"5F3Z-2e-9-w\"\n4", "total_accepted": 141, "total_submissions": 254, "contest": "", "has_followed_by": false}, "magical-string": {"id": 1215, "unique_name": "magical-string", "user_status": null, "title": "Magical String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 73, "description": "A magical string S consists of only '1' and '2' and obeys the following rules:\r\n\r\nThe string **S** is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string **S** itself.\r\n\r\nThe first few elements of string **S** is the following: **S** = \"1221121221221121122\u2026\u2026\"\r\n\r\nIf we group the consecutive '1's and '2's in **S**, it will be:\r\n\r\n1 22 11 2 1 22 1 22 11 2 11 22 ......\r\n\r\nand the occurrences of '1's or '2's in each group are:\r\n\r\n1 2\t2 1 1 2 1 2 2 1 2 2 ......\r\n\r\nYou can see that the occurrence sequence above is the **S** itself.\r\n\r\nGiven an integer N as input, return the number of '1's in the first N number in the magical string **S**.", "notice": "N will not exceed 100,000.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: 6\r\nOutput: 3\r\nExplanation: The first 6 elements of magical string S is \"12211\" and it contains three 1's, so return 3.\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "6", "total_accepted": 66, "total_submissions": 89, "contest": "", "has_followed_by": false}, "largest-palindrome-product": {"id": 1216, "unique_name": "largest-palindrome-product", "user_status": null, "title": "Largest Palindrome Product", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 24, "description": "Find the largest palindrome made from the product of two n-digit numbers.\r\n\r\nSince the result could be very large, you should return the largest palindrome mod 1337.", "notice": "1. The range of n is [1,8].", "clarification": "", "example": "```\r\nInput: 2\r\nOutput: 987\r\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\r\n```", "challenge": "", "tags": [{"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "1", "total_accepted": 47, "total_submissions": 189, "contest": "", "has_followed_by": false}, "total-hamming-distance": {"id": 1217, "unique_name": "total-hamming-distance", "user_status": null, "title": "Total Hamming Distance", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance \"\") between two integers is the number of positions at which the corresponding bits are different.\r\n\r\nNow your job is to find the total Hamming distance between all pairs of the given numbers.", "notice": "1. Elements of the given array are in the range of `0` to `10^9`\r\n2. Length of the array will not exceed `10^4`.", "clarification": "", "example": "```\r\nInput: 4, 14, 2\r\n\r\nOutput: 6\r\n\r\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\r\nshowing the four bits relevant in this case). So the answer will be:\r\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\r\n```", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [{"id": 835, "title": "Hamming Distance", "unique_name": "hamming-distance", "level": 1, "accepted_rate": 67}], "comment_count": 0, "testcase_sample": "[4,14,2]", "total_accepted": 126, "total_submissions": 211, "contest": "", "has_followed_by": false}, "number-complement": {"id": 1218, "unique_name": "number-complement", "user_status": null, "title": "Number Complement", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 74, "description": "Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.", "notice": "1.The given integer is guaranteed to fit within the range of a 32-bit signed integer.\r\n2.You could assume no leading zero bit in the integer\u00e2\u20ac\u2122s binary representation.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: 5\r\nOutput: 2\r\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: 1\r\nOutput: 0\r\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\r\n```", "challenge": "", "tags": [{"id": 168, "name": "Cloudera", "cn_name": "Cloudera", "type": 3, "unique_name": "cloudera", "alias": "", "problem_count": 1}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [], "comment_count": 0, "testcase_sample": "5", "total_accepted": 124, "total_submissions": 165, "contest": "", "has_followed_by": false}, "heaters": {"id": 1219, "unique_name": "heaters", "user_status": null, "title": "Heaters", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 38, "description": "Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.\r\n\r\nNow, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.\r\n\r\nSo, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.", "notice": "1.Numbers of houses and heaters you are given are non-negative and will not exceed 25000.\r\n2.Positions of houses and heaters you are given are non-negative and will not exceed 10^9.\r\n3.As long as a house is in the heaters' warm radius range, it can be warmed.\r\n4.All the heaters follow your radius standard and the warm radius will the same.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [1,2,3],[2]\r\nOutput: 1\r\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\r\n```\r\n**Example 2:**\r\n```\r\nInput: [1,2,3,4],[1,4]\r\nOutput: 1\r\nExplanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\r\n```", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 437, "title": "Copy Books", "unique_name": "copy-books", "level": 3, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[1,2,3]\n[2]", "total_accepted": 204, "total_submissions": 528, "contest": "", "has_followed_by": false}, "matchsticks-to-square": {"id": 1220, "unique_name": "matchsticks-to-square", "user_status": null, "title": "Matchsticks to Square", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 63, "description": "Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used **exactly** one time.\r\n\r\nYour input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.", "notice": "1.The length sum of the given matchsticks is in the range of `0` to `10^9`.\r\n2.The length of the given matchstick array will not exceed `15`.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [1,1,2,2,2]\r\nOutput: true\r\n\r\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: [3,3,3,3,4]\r\nOutput: false\r\n\r\nExplanation: You cannot find a way to form a square with all the matchsticks.\r\n```", "challenge": "", "tags": [{"id": 145, "name": "Rackspace", "cn_name": "Rackspace", "type": 3, "unique_name": "rackspace", "alias": "", "problem_count": 1}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,2,2,2]", "total_accepted": 147, "total_submissions": 230, "contest": "", "has_followed_by": false}, "validate-ip-address": {"id": 1222, "unique_name": "validate-ip-address", "user_status": null, "title": "Validate IP Address", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 56, "description": "Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\r\n\r\n**IPv4** addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\".\"), e.g.,`172.16.254.1`;\r\n\r\nBesides, leading zeros in the IPv4 is invalid. For example, the address `172.16.254.01` is invalid.\r\n\r\nIPv6 addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (\":\"). For example, the address `2001:0db8:85a3:0000:0000:8a2e:0370:7334` is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so `2001:db8:85a3:0:0:8A2E:0370:7334` is also a valid IPv6 address(Omit leading zeros and using upper cases).\r\n\r\nHowever, we don't replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, `2001:0db8:85a3::8A2E:0370:7334` is an invalid IPv6 address.\r\n\r\nBesides, extra leading zeros in the IPv6 is also invalid. For example, the address `02001:0db8:85a3:0000:0000:8a2e:0370:7334` is invalid.", "notice": "You may assume there is no extra space or special characters in the input string.", "clarification": "", "example": "```\r\nInput: \"172.16.254.1\"\r\n\r\nOutput: \"IPv4\"\r\n\r\nExplanation: This is a valid IPv4 address, return \"IPv4\".\r\n\r\nInput: \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\r\n\r\nOutput: \"IPv6\"\r\n\r\nExplanation: This is a valid IPv6 address, return \"IPv6\".\r\n\r\nInput: \"256.256.256.256\"\r\n\r\nOutput: \"Neither\"\r\n\r\nExplanation: This is neither a IPv4 address nor a IPv6 address.\r\n```", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"172.16.254.1\"", "total_accepted": 47, "total_submissions": 82, "contest": "", "has_followed_by": false}, "unique-substrings-in-wraparound-string": {"id": 1223, "unique_name": "unique-substrings-in-wraparound-string", "user_status": null, "title": "Unique Substrings in Wraparound String", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Consider the string `s` to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so `s` will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\r\n\r\nNow we have another string `p`. Your job is to find out how many unique non-empty substrings of `p` are present in `s`. In particular, your input is the string `p` and you need to output the number of different non-empty substrings of `p` in the string `s`.", "notice": "`p` consists of only lowercase English letters and the size of p might be over `10000`.", "clarification": "", "example": "```\r\nExample 1:\r\n\r\nInput: \"a\"\r\nOutput: 1\r\nExplanation: Only the substring \"a\" of string \"a\" is in the string \u0010s.\r\n\r\n\r\nExample 2:\r\n\r\nInput: \"cac\"\r\nOutput: 2\r\nExplanation: There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\r\n\r\n\r\nExample 3:\r\n\r\nInput: \"zab\"\r\nOutput: 6\r\nExplanation: There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\r\n```", "challenge": "", "tags": [{"id": 176, "name": "MAQ Software", "cn_name": "MAQ Software", "type": 3, "unique_name": "maq-software", "alias": "", "problem_count": 1}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"a\"", "total_accepted": 46, "total_submissions": 94, "contest": "", "has_followed_by": false}, "count-the-repetitions": {"id": 1224, "unique_name": "count-the-repetitions", "user_status": null, "title": "Count The Repetitions", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 65, "description": "Define `S = [s,n]` as the string S which consists of n connected strings s. For example, `[\"abc\", 3]` =\"abcabcabc\".\r\n\r\nOn the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, \u201cabc\u201d can be obtained from \u201cabdbec\u201d based on our definition, but it can not be obtained from \u201cacbbe\u201d.\r\n\r\nYou are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 \u2264 n1 \u2264 106 and 1 \u2264 n2 \u2264 106. Now consider the strings S1 and S2, where `S1=[s1,n1]` and `S2=[s2,n2]`. Find the maximum integer M such that `[S2,M]` can be obtained from `S1`.", "notice": "", "clarification": "", "example": "```\r\nGiven:\r\ns1=\"acb\", n1=4\r\ns2=\"ab\", n2=2\r\n\r\nReturn:\r\n2\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"acb\"\n4\n\"ab\"\n2", "total_accepted": 32, "total_submissions": 47, "contest": "", "has_followed_by": false}, "island-perimeter": {"id": 1225, "unique_name": "island-perimeter", "user_status": null, "title": "Island Perimeter", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 69, "description": "You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.", "notice": "", "clarification": "", "example": "```\r\n[[0,1,0,0],\r\n [1,1,1,0],\r\n [0,1,0,0],\r\n [1,1,0,0]]\r\n\r\nAnswer: 16\r\n```\r\nExplanation: The perimeter is the 16 yellow stripes in the image below:\r\n![](https://lintcode-media.s3.amazonaws.com/problem/island.png \"\")", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1080, "title": "Max Area of Island", "unique_name": "max-area-of-island", "level": 1, "accepted_rate": 52}, {"id": 1062, "title": "Flood Fill", "unique_name": "flood-fill", "level": 1, "accepted_rate": 68}], "comment_count": 0, "testcase_sample": "[[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]", "total_accepted": 310, "total_submissions": 445, "contest": "", "has_followed_by": false}, "minimum-moves-to-equal-array-elements-ii": {"id": 1226, "unique_name": "minimum-moves-to-equal-array-elements-ii", "user_status": null, "title": "Minimum Moves to Equal Array Elements II", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 71, "description": "Given a **non-empty** integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.\r\n\r\nYou may assume the array's length is at most 10,000.", "notice": "", "clarification": "", "example": "```\r\nInput:\r\n[1,2,3]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nOnly two moves are needed (remember each move increments or decrements one element):\r\n\r\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3]", "total_accepted": 46, "total_submissions": 63, "contest": "", "has_followed_by": false}, "repeated-substring-pattern": {"id": 1227, "unique_name": "repeated-substring-pattern", "user_status": null, "title": "Repeated Substring Pattern", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 54, "description": "Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \"abab\"\r\n\r\nOutput: True\r\n\r\nExplanation: It's the substring \"ab\" twice.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \"aba\"\r\n\r\nOutput: False\r\n~~~~\r\nExample 3:\r\n~~~~.\r\nInput: \"abcabcabcabc\"\r\n\r\nOutput: True\r\n\r\nExplanation: It's the substring \"abc\" four times. (And the substring \"abcabc\" twice.)\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"abab\"", "total_accepted": 267, "total_submissions": 489, "contest": "", "has_followed_by": false}, "poor-pigs": {"id": 1228, "unique_name": "poor-pigs", "user_status": null, "title": "Poor Pigs", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 49, "description": "There are 1000 buckets, one and only one of them contains poison, the rest are filled with water. They all look the same. If a pig drinks that poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket contains the poison within one hour.\r\n\r\nAnswer this question, and write an algorithm for the follow-up general case.", "notice": "", "clarification": "", "example": "", "challenge": "If there are n buckets and a pig drinking poison will die within m minutes, how many pigs (x) you need to figure out the \"poison\" bucket within p minutes? There is exact one bucket with poison.", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "1000\n15\n60", "total_accepted": 111, "total_submissions": 223, "contest": "", "has_followed_by": false}, "circular-array-loop": {"id": 1229, "unique_name": "circular-array-loop", "user_status": null, "title": "Circular Array Loop", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "You are given an array of positive and negative integers. If a number n at an index is positive, then move forward n steps. Conversely, if it's negative (-n), move backward n steps. Assume the first element of the array is forward next to the last element, and the last element is backward next to the first element. Determine if there is a loop in this array. A loop starts and ends at a particular index with more than 1 element along the loop. The loop must be \"forward\" or \"backward'.", "notice": "The given array is guaranteed to contain no element \"0\".", "clarification": "", "example": "**Example 1:** \r\nGiven the array [2, -1, 1, 2, 2], there is a loop, from index 0 -> 2 -> 3 -> 0.\r\n\r\n**Example 2:**\r\nGiven the array [-1, 2], there is no loop.", "challenge": "Can you do it in **O(n)** time complexity and **O(1)** space complexity?", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 103, "title": "Linked List Cycle II ", "unique_name": "linked-list-cycle-ii", "level": 3, "accepted_rate": 37}, {"id": 102, "title": "Linked List Cycle ", "unique_name": "linked-list-cycle", "level": 2, "accepted_rate": 46}], "comment_count": 0, "testcase_sample": "[2,-1,1,2,2]", "total_accepted": 118, "total_submissions": 406, "contest": "", "has_followed_by": false}, "assign-cookies": {"id": 1230, "unique_name": "assign-cookies", "user_status": null, "title": "Assign Cookies", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 45, "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.", "notice": "1.You may assume the greed factor is always positive. \r\n2.You cannot assign more than one cookie to one child.", "clarification": "", "example": "```\r\nExample 1:\r\nInput: [1,2,3], [1,1]\r\n\r\nOutput: 1\r\n\r\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \r\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\r\nYou need to output 1.\r\n```\r\n```\r\nExample 2:\r\nInput: [1,2], [1,2,3]\r\n\r\nOutput: 2\r\n\r\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \r\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \r\nYou need to output 2.\r\n```", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3]\n[1,1]", "total_accepted": 142, "total_submissions": 313, "contest": "", "has_followed_by": false}, "minimum-moves-to-equal-array-elements": {"id": 1231, "unique_name": "minimum-moves-to-equal-array-elements", "user_status": null, "title": "Minimum Moves to Equal Array Elements", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 55, "description": "Given a **non-empty** integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.", "notice": "", "clarification": "", "example": "```\r\nInput:\r\n[1,2,3]\r\n\r\nOutput:\r\n3\r\n\r\nExplanation:\r\nOnly three moves are needed (remember each move increments two elements):\r\n\r\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\r\n```", "challenge": "", "tags": [{"id": 143, "name": "Indeed", "cn_name": "Indeed", "type": 3, "unique_name": "indeed", "alias": "", "problem_count": 2}, {"id": 144, "name": "Coursera", "cn_name": "Coursera", "type": 3, "unique_name": "coursera", "alias": "", "problem_count": 3}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,2,3]", "total_accepted": 131, "total_submissions": 233, "contest": "", "has_followed_by": false}, "minimum-number-of-arrows-to-burst-balloons": {"id": 1232, "unique_name": "minimum-number-of-arrows-to-burst-balloons", "user_status": null, "title": "Minimum Number of Arrows to Burst Balloons", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 10^4 balloons.\r\n\r\nAn arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart \u2264 x \u2264 xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons.\r\n\r\n", "notice": "", "clarification": "", "example": "```\r\nInput:\r\n[[10,16], [2,8], [1,6], [7,12]]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nOne way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [{"id": 1242, "title": "Non-overlapping Intervals", "unique_name": "non-overlapping-intervals", "level": 2, "accepted_rate": 57}], "comment_count": 0, "testcase_sample": "[[10,16], [2,8], [1,6], [7,12]]", "total_accepted": 59, "total_submissions": 136, "contest": "", "has_followed_by": false}, "find-all-numbers-disappeared-in-an-array": {"id": 1236, "unique_name": "find-all-numbers-disappeared-in-an-array", "user_status": null, "title": "Find All Numbers Disappeared in an Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 62, "description": "Given an array of integers where 1 \u2264 a[i] \u2264 n (n = size of array), some elements appear twice and others appear once.\r\n\r\nFind all the elements of [1, n] inclusive that do not appear in this array.\r\n\r\nCould you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.", "notice": "", "clarification": "", "example": "Input:\r\n[4,3,2,7,8,2,3,1]\r\n\r\nOutput:\r\n[5,6]", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4,3,2,7,8,3,2,1]", "total_accepted": 199, "total_submissions": 317, "contest": "", "has_followed_by": false}, "number-of-boomerangs": {"id": 1237, "unique_name": "number-of-boomerangs", "user_status": null, "title": "Number of Boomerangs", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "Given n points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**.\r\n\r\nFind the number of boomerangs. You may assume that n will be at most **500** and coordinates of points are all in the range **[-10000, 10000]** (inclusive).", "notice": "", "clarification": "", "example": "```\r\nInput:\r\n[[0,0],[1,0],[2,0]]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nThe two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]\r\n```", "challenge": "", "tags": [{"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 908, "title": "Line Reflection", "unique_name": "line-reflection", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[[0,0],[1,0],[2,0]]", "total_accepted": 160, "total_submissions": 278, "contest": "", "has_followed_by": false}, "find-all-duplicates-in-an-array": {"id": 1238, "unique_name": "find-all-duplicates-in-an-array", "user_status": null, "title": "Find All Duplicates in an Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 64, "description": "Given an array of integers, 1 \u2264 a[i] \u2264 n (n = size of array), some elements appear twice and others appear once.\r\n\r\nFind all the elements that appear twice in this array.\r\n\r\nCould you do it without extra space and in O(n) runtime?", "notice": "", "clarification": "", "example": "Input:\r\n[4,3,2,7,8,2,3,1]\r\n\r\nOutput:\r\n[2,3]", "challenge": "", "tags": [{"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4,3,2,7,8,3,2,1]", "total_accepted": 73, "total_submissions": 112, "contest": "", "has_followed_by": false}, "k-th-smallest-in-lexicographical-order": {"id": 1239, "unique_name": "k-th-smallest-in-lexicographical-order", "user_status": null, "title": "K-th Smallest in Lexicographical Order", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 61, "description": "Given integers n and k, find the lexicographically k-th smallest integer in the range from 1 to n.", "notice": "1 \u2264 k \u2264 n \u2264 1e9.", "clarification": "", "example": "Input:\r\nn: 13   k: 2\r\n\r\nOutput:\r\n10\r\n\r\nExplanation:\r\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.", "challenge": "", "tags": [{"id": 113, "name": "Hulu", "cn_name": "Hulu", "type": 3, "unique_name": "hulu", "alias": "", "problem_count": 11}], "related_problems": [], "comment_count": 0, "testcase_sample": "200\n18", "total_accepted": 34, "total_submissions": 54, "contest": "", "has_followed_by": false}, "non-overlapping-intervals": {"id": 1242, "unique_name": "non-overlapping-intervals", "user_status": null, "title": "Non-overlapping Intervals", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.", "notice": "1.You may assume the interval's end point is always bigger than its start point.\r\n2.Intervals like [1,2] and [2,3] have borders \"touching\" but they don't overlap each other.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [ [1,2], [2,3], [3,4], [1,3] ]\r\n\r\nOutput: 1\r\n\r\nExplanation: [1,3] can be removed and the rest of intervals are non-overlapping.\r\n```\r\n**Example 2:**\r\n```\r\nInput: [ [1,2], [1,2], [1,2] ]\r\n\r\nOutput: 2\r\n\r\nExplanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.\r\n```\r\n**Example 3:**\r\n```\r\nInput: [ [1,2], [2,3] ]\r\n\r\nOutput: 0\r\n\r\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\r\n```", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}], "related_problems": [{"id": 1232, "title": "Minimum Number of Arrows to Burst Balloons", "unique_name": "minimum-number-of-arrows-to-burst-balloons", "level": 2, "accepted_rate": 42}], "comment_count": 0, "testcase_sample": "[(1,2),(2,3),(3,4),(1,3)]", "total_accepted": 56, "total_submissions": 96, "contest": "", "has_followed_by": false}, "number-of-segments-in-a-string": {"id": 1243, "unique_name": "number-of-segments-in-a-string", "user_status": null, "title": "Number of Segments in a String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 39, "description": "Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.\r\n", "notice": "the string does not contain any **non-printable** characters.", "clarification": "", "example": "**Example:**\r\n```\r\nInput: \"Hello, my name is John\"\r\nOutput: 5\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"Hello, my name is John\"", "total_accepted": 90, "total_submissions": 227, "contest": "", "has_followed_by": false}, "minimum-genetic-mutation": {"id": 1244, "unique_name": "minimum-genetic-mutation", "user_status": null, "title": "Minimum Genetic Mutation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "A gene string can be represented by an 8-character long string, with choices from `\"A\"`, `\"C\"`, `\"G\"`, `\"T\"`.\r\n\r\nSuppose we need to investigate about a mutation (mutation from \"start\" to \"end\"), where ONE mutation is defined as ONE single character changed in the gene string.\r\n\r\nFor example, `\"AACCGGTT\"` -> `\"AACCGGTA\"` is 1 mutation.\r\n\r\nAlso, there is a given gene \"bank\", which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.\r\n\r\nNow, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from \"start\" to \"end\". If there is no such a mutation, return -1.", "notice": "1.Starting point is assumed to be valid, so it might not be included in the bank.\r\n2.If multiple mutations are needed, all mutations during in the sequence must be valid.\r\n3.You may assume start and end string is not the same.", "clarification": "", "example": "**Example 1:**\r\n```\r\nstart: \"AACCGGTT\"\r\nend:   \"AACCGGTA\"\r\nbank: [\"AACCGGTA\"]\r\n\r\nreturn: 1\r\n```\r\n**Example 2:**\r\n```\r\nstart: \"AACCGGTT\"\r\nend:   \"AAACGGTA\"\r\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\r\n\r\nreturn: 2\r\n```\r\n**Example 3:**\r\n```\r\nstart: \"AAAAACCC\"\r\nend:   \"AACCCCCC\"\r\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\r\n\r\nreturn: 3\r\n```", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"AACCGGTT\"\n\"AACCGGTA\"\n[\"AACCGGTA\"]", "total_accepted": 71, "total_submissions": 156, "contest": "", "has_followed_by": false}, "all-oone-data-structure": {"id": 1245, "unique_name": "all-oone-data-structure", "user_status": null, "title": "All O`one Data Structure", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 49, "description": "Implement a data structure supporting the following operations:\r\n\r\n* Inc(Key) - Inserts a new key with value 1. Or increments an existing key by 1. Key is guaranteed to be a non-empty string.\r\n* Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.\r\n* GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string \"\".\r\n* GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string \"\".", "notice": "", "clarification": "", "example": "", "challenge": "Perform all these in O(1) time complexity.", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 57, "name": "Data Structure Design", "cn_name": "Data Structure Design", "type": 2, "unique_name": "data-structure-design", "alias": "", "problem_count": 11}], "related_problems": [], "comment_count": 0, "testcase_sample": "AllOne()\ninc(\"hello\")\ngetMaxKey()\ngetMinKey()", "total_accepted": 101, "total_submissions": 204, "contest": "", "has_followed_by": false}, "longest-repeating-character-replacement": {"id": 1246, "unique_name": "longest-repeating-character-replacement", "user_status": null, "title": "Longest Repeating Character Replacement", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 69, "description": "Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.", "notice": "Both the string's length and k will not exceed 10^4.", "clarification": "", "example": "Input:\r\ns = \"ABAB\", k = 2\r\nOutput:\r\n4\r\nExplanation:\r\nReplace the two 'A's with two 'B's or vice versa.\r\n\r\nInput:\r\ns = \"AABABBA\", k = 1\r\nOutput:\r\n4\r\nExplanation:\r\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\r\nThe substring \"BBBB\" has the longest repeating letters, which is 4.", "challenge": "", "tags": [{"id": 99, "name": "Pocket Gems", "cn_name": "Pocket Gems", "type": 3, "unique_name": "pocket-gems", "alias": "", "problem_count": 15}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"\"\n2", "total_accepted": 59, "total_submissions": 83, "contest": "", "has_followed_by": false}, "reconstruct-original-digits-from-english": {"id": 1247, "unique_name": "reconstruct-original-digits-from-english", "user_status": null, "title": "Reconstruct Original Digits from English", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "Given a non-empty string containing an out-of-order English representation of digits 0-9, output the digits in ascending order.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \"owoztneoer\"\r\n\r\nOutput: \"012\"\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \"fviefuro\"\r\n\r\nOutput: \"45\"\r\n~~~~", "notice": "Input contains only lowercase English letters.\r\nInput is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as \"abc\" or \"zerone\" are not permitted.\r\nInput length is less than 50,000.", "clarification": "", "example": "", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "\"owoztneoer\"", "total_accepted": 31, "total_submissions": 52, "contest": "", "has_followed_by": false}, "maximum-xor-of-two-numbers-in-an-array": {"id": 1248, "unique_name": "maximum-xor-of-two-numbers-in-an-array", "user_status": null, "title": "Maximum XOR of Two Numbers in an Array", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 63, "description": "Given a **non-empty** array of numbers, a0, a1, a2, \u2026 , an-1, where 0 \u2264 ai < 2^31.\r\n\r\nFind the maximum result of ai XOR aj, where 0 \u2264 i, j < n.", "notice": "", "clarification": "", "example": "```\r\nInput: [3, 10, 5, 25, 2, 8]\r\n\r\nOutput: 28\r\n\r\nExplanation: The maximum result is 5 ^ 25 = 28\r\n```", "challenge": "Could you do this in O(n) runtime?", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[3,10,5,25,2,8]", "total_accepted": 105, "total_submissions": 163, "contest": "", "has_followed_by": false}, "strong-password-checker": {"id": 1249, "unique_name": "strong-password-checker", "user_status": null, "title": "Strong Password Checker", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 29, "description": "A password is considered strong if below conditions are all met:\r\n\r\n1. It has at least 6 characters and at most 20 characters.\r\n2. It must contain at least one lowercase letter, at least one uppercase letter, and at least one digit.\r\n3. It must NOT contain three repeating characters in a row (\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met).\r\n\r\nWrite a function strongPasswordChecker(s), that takes a string s as input, and return the MINIMUM change required to make s a strong password. If s is already strong, return 0.\r\n\r\nInsertion, deletion or replace of any one character are all considered as one change.", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "\"\"", "total_accepted": 45, "total_submissions": 155, "contest": "", "has_followed_by": false}, "split-array-largest-sum": {"id": 1251, "unique_name": "split-array-largest-sum", "user_status": null, "title": "Split Array Largest Sum", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 39, "description": "Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.\r\n\r\nExamples:\r\n~~~~.\r\nInput:\r\nnums = [7,2,5,10,8]\r\nm = 2\r\n\r\nOutput:\r\n18\r\n\r\nExplanation:\r\nThere are four ways to split nums into two subarrays.\r\nThe best way is to split it into [7,2,5] and [10,8],\r\nwhere the largest sum among the two subarrays is only 18.\r\n~~~~", "notice": "", "clarification": "", "example": "If n is the length of array, assume the following constraints are satisfied:\r\n\r\n1 \u2264 n \u2264 1000\r\n1 \u2264 m \u2264 min(50, n)", "challenge": "", "tags": [{"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "[7,2,5,10,8]\n2", "total_accepted": 108, "total_submissions": 270, "contest": "", "has_followed_by": false}, "queue-reconstruction-by-height": {"id": 1252, "unique_name": "queue-reconstruction-by-height", "user_status": null, "title": "Queue Reconstruction by Height", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 74, "description": "Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers `(h, k)`, where `h` is the height of the person and `k` is the number of people in front of this person who have a height greater than or equal to `h`. Write an algorithm to reconstruct the queue.", "notice": "The number of people is less than 1,100.", "clarification": "", "example": "```\r\nInput:\r\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\r\n\r\nOutput:\r\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\r\n```", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1297, "title": "Count of Smaller Numbers After Self", "unique_name": "count-of-smaller-numbers-after-self", "level": 3, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]", "total_accepted": 96, "total_submissions": 128, "contest": "", "has_followed_by": false}, "convert-a-number-to-hexadecimal": {"id": 1253, "unique_name": "convert-a-number-to-hexadecimal", "user_status": null, "title": "Convert a Number to Hexadecimal", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 53, "description": "Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, [**two\u00e2\u20ac\u2122s complement**](https://en.wikipedia.org/wiki/Two%27s_complement \"\") method is used.", "notice": "1.All letters in hexadecimal `(a-f)` must be in lowercase.\r\n2.The hexadecimal string must not contain extra leading `0`s. If the number is zero, it is represented by a single zero character `'0'`; otherwise, the first character in the hexadecimal string will not be the zero character.\r\n3.The given number is guaranteed to fit within the range of a 32-bit signed integer.\r\n4.You **must not use any method provided by the library** which converts/formats the number to hex directly.", "clarification": "", "example": "```\r\nExample 1:\r\n\r\nInput:\r\n26\r\n\r\nOutput:\r\n\"1a\"\r\n```\r\n```\r\nExample 2:\r\n\r\nInput:\r\n-1\r\n\r\nOutput:\r\n\"ffffffff\"\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "26", "total_accepted": 88, "total_submissions": 163, "contest": "", "has_followed_by": false}, "sum-of-left-leaves": {"id": 1254, "unique_name": "sum-of-left-leaves", "user_status": null, "title": "Sum of Left Leaves", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 58, "description": "Find the sum of all left leaves in a given binary tree.", "notice": "", "clarification": "", "example": "```\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\r\nThere are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "{3,9,20,#,#,15,7}", "total_accepted": 276, "total_submissions": 470, "contest": "", "has_followed_by": false}, "remove-k-digits": {"id": 1255, "unique_name": "remove-k-digits", "user_status": null, "title": "Remove K Digits", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 32, "description": "Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\r\n\r\nExample 1:\r\n\r\n~~~~.\r\nInput: num = \"1432219\", k = 3\r\nOutput: \"1219\"\r\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\r\n~~~~\r\nExample 2:\r\n\r\n~~~~.\r\nInput: num = \"10200\", k = 1\r\nOutput: \"200\"\r\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\r\n~~~~\r\nExample 3:\r\n\r\n~~~~.\r\nInput: num = \"10\", k = 2\r\nOutput: \"0\"\r\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\r\n~~~~", "notice": "The length of num is less than 10002 and will be \u00e2\u2030\u00a5 k.\r\nThe given num does not contain any leading zero.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 73, "name": "Snapchat", "cn_name": "Snapchat", "type": 3, "unique_name": "snapchat", "alias": "", "problem_count": 32}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"1432219\"\n3", "total_accepted": 132, "total_submissions": 404, "contest": "", "has_followed_by": false}, "nth-digit": {"id": 1256, "unique_name": "nth-digit", "user_status": null, "title": "Nth Digit", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 35, "description": "Find the `nth` digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...", "notice": "- n is positive and will fit within the range of a 32-bit signed integer (n < 2^31).", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\n3\r\n\r\nOutput:\r\n3\r\n```\r\n**Example 2:**\r\n```\r\nInput:\r\n11\r\n\r\nOutput:\r\n0\r\n\r\nExplanation:\r\nThe 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "11", "total_accepted": 190, "total_submissions": 539, "contest": "", "has_followed_by": false}, "integer-replacement": {"id": 1259, "unique_name": "integer-replacement", "user_status": null, "title": "Integer Replacement", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 42, "description": "Given a positive integer n and you can do operations as follow:\r\n\r\n1.If `n` is even, replace `n` with `n/2`.\r\n2.If `n` is odd, you can replace `n` with either `n + 1` or `n - 1`.\r\n\r\nWhat is the minimum number of replacements needed for n to become 1?", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\n8\r\n\r\nOutput:\r\n3\r\n\r\nExplanation:\r\n8 -> 4 -> 2 -> 1\r\n```\r\n**Example 2:**\r\n```\r\nInput:\r\n7\r\n\r\nOutput:\r\n4\r\n\r\nExplanation:\r\n7 -> 8 -> 4 -> 2 -> 1\r\nor\r\n7 -> 6 -> 3 -> 2 -> 1\r\n```", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "8", "total_accepted": 144, "total_submissions": 334, "contest": "", "has_followed_by": false}, "rotate-function": {"id": 1260, "unique_name": "rotate-function", "user_status": null, "title": "Rotate Function", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 53, "description": "Given an array of integers `A` and let n to be its length.\r\n\r\nAssume `Bk` to be an array obtained by rotating the array `A` k positions clock-wise, we define a \"rotation function\" `F` on `A` as follow:\r\n\r\n`F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]`.\r\n\r\nCalculate the maximum value of `F(0), F(1), ..., F(n-1)`.", "notice": "n is guaranteed to be less than 10^5.", "clarification": "", "example": "```\r\nA = [4, 3, 2, 6]\r\n\r\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\r\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\r\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\r\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\r\n\r\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\r\n```", "challenge": "", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "[4, 3, 2, 6]", "total_accepted": 118, "total_submissions": 219, "contest": "", "has_followed_by": false}, "longest-substring-with-at-least-k-repeating-characters": {"id": 1261, "unique_name": "longest-substring-with-at-least-k-repeating-characters", "user_status": null, "title": "Longest Substring with At Least K Repeating Characters", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.\r\n\r\nExample 1:\r\n\r\nInput:\r\n~~~~.\r\ns = \"aaabb\", k = 3\r\n\r\nOutput:\r\n3\r\n\r\nThe longest substring is \"aaa\", as 'a' is repeated 3 times.\r\n~~~~\r\nExample 2:\r\n\r\nInput:\r\n~~~~.\r\ns = \"ababbc\", k = 2\r\n\r\nOutput:\r\n5\r\n\r\nThe longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 116, "name": "Baidu", "cn_name": "Baidu", "type": 3, "unique_name": "baidu", "alias": "", "problem_count": 9}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"ababbc\"\n2", "total_accepted": 98, "total_submissions": 194, "contest": "", "has_followed_by": false}, "utf-8-validation": {"id": 1262, "unique_name": "utf-8-validation", "user_status": null, "title": "UTF-8 Validation", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 39, "description": "A character in UTF8 can be from **1 to 4 bytes** long, subjected to the following rules:\r\n\r\n1. For 1-byte character, the first bit is a 0, followed by its unicode code.\r\n2. For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.\r\nThis is how the UTF-8 encoding would work:\r\n```\r\n   Char. number range  |        UTF-8 octet sequence\r\n      (hexadecimal)    |              (binary)\r\n   --------------------+---------------------------------------------\r\n   0000 0000-0000 007F | 0xxxxxxx\r\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\r\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\r\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n```\r\nGiven an array of integers representing the data, return whether it is a valid utf-8 encoding.", "notice": "The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.", "clarification": "", "example": "```\r\ndata = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.\r\nReturn true.\r\n\r\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\r\n\r\n\r\n\r\ndata = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.\r\nReturn false.\r\n\r\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\r\nThe next byte is a continuation byte which starts with 10 and that's correct.\r\nBut the second continuation byte does not start with 10, so it is invalid.\r\n```", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[197, 130, 1]", "total_accepted": 65, "total_submissions": 162, "contest": "", "has_followed_by": false}, "is-subsequence": {"id": 1263, "unique_name": "is-subsequence", "user_status": null, "title": "Is Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 49, "description": "Given a string `s` and a string `t`, check if `s` is subsequence of `t`.\r\n\r\nYou may assume that there is only lower case English letters in both `s` and `t`. `t` is potentially a very long (`length ~= 500,000`) string, and `s` is a short string (`<=100`).\r\n\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not).", "notice": "", "clarification": "", "example": "**Example 1:**\r\ns = `\"abc\"`, t = `\"ahbgdc\"`\r\n\r\nReturn `true`.\r\n\r\n**Example 2:**\r\ns = `\"axc\"`, t = `\"ahbgdc\"`\r\n\r\nReturn `false`.", "challenge": "If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 147, "name": "Pinterest", "cn_name": "Pinterest", "type": 3, "unique_name": "pinterest", "alias": "", "problem_count": 3}], "related_problems": [{"id": 1024, "title": "Number of Matching Subsequences", "unique_name": "number-of-matching-subsequences", "level": 2, "accepted_rate": 61}], "comment_count": 0, "testcase_sample": "\"abc\"\n\"ahbgdc\"", "total_accepted": 114, "total_submissions": 229, "contest": "", "has_followed_by": false}, "perfect-rectangle": {"id": 1264, "unique_name": "perfect-rectangle", "user_status": null, "title": "Perfect Rectangle", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 65, "description": "Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region.\r\n\r\nEach rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2))", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [3,2,4,4],\r\n  [1,3,2,4],\r\n  [2,3,3,4]\r\n]\r\n\r\nReturn true. All 5 rectangles together form an exact cover of a rectangular region.\r\n\r\n```\r\n**Example 2:**\r\n```\r\nrectangles = [\r\n  [1,1,2,3],\r\n  [1,3,2,4],\r\n  [3,1,4,2],\r\n  [3,2,4,4]\r\n]\r\n\r\nReturn false. Because there is a gap between the two rectangular regions.\r\n```\r\n\r\n**Example 3:**\r\n```\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [1,3,2,4],\r\n  [3,2,4,4]\r\n]\r\n\r\nReturn false. Because there is a gap in the top center.\r\n```\r\n\r\n**Example 4:**\r\n```\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [1,3,2,4],\r\n  [2,2,4,4]\r\n]\r\n\r\nReturn false. Because two of the rectangles overlap with each other.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]", "total_accepted": 51, "total_submissions": 76, "contest": "", "has_followed_by": false}, "elimination-game": {"id": 1265, "unique_name": "elimination-game", "user_status": null, "title": "Elimination Game", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "There is a list of sorted integers from 1 to n. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\r\n\r\nRepeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.\r\n\r\nWe keep repeating the steps again, alternating left to right and right to left, until a single number remains.\r\n\r\nFind the last number that remains starting with a list of length n.", "notice": "", "clarification": "", "example": "Input:\r\nn = 9,\r\n1 2 3 4 5 6 7 8 9\r\n2 4 6 8\r\n2 6\r\n6\r\n\r\nOutput:\r\n6", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "9", "total_accepted": 44, "total_submissions": 74, "contest": "", "has_followed_by": false}, "find-the-difference": {"id": 1266, "unique_name": "find-the-difference", "user_status": null, "title": "Find the Difference", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 59, "description": "Given two strings **s** and **t** which consist of only lowercase letters.\r\n\r\nString **t** is generated by random shuffling string **s** and then add one more letter at a random position.\r\n\r\nFind the letter that was added in **t**.", "notice": "", "clarification": "", "example": "```\r\nInput:\r\ns = \"abcd\"\r\nt = \"abcde\"\r\n\r\nOutput:\r\ne\r\n\r\nExplanation:\r\n'e' is the letter that was added.\r\n```", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"abcd\"\n\"abcde\"", "total_accepted": 323, "total_submissions": 537, "contest": "", "has_followed_by": false}, "ransom-note": {"id": 1270, "unique_name": "ransom-note", "user_status": null, "title": "Ransom Note", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\r\n\r\nEach letter in the magazine string can only be used once in your ransom note.", "notice": "You may assume that both strings contain only lowercase letters.", "clarification": "", "example": "```\r\ncanConstruct(\"a\", \"b\") -> false\r\ncanConstruct(\"aa\", \"ab\") -> false\r\ncanConstruct(\"aa\", \"aab\") -> true\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [{"id": 1081, "title": "Stickers to Spell Word", "unique_name": "stickers-to-spell-word", "level": 3, "accepted_rate": 65}], "comment_count": 0, "testcase_sample": "\"aa\"\n\"ab\"", "total_accepted": 117, "total_submissions": 201, "contest": "", "has_followed_by": false}, "kth-smallest-element-in-a-sorted-matrix": {"id": 1272, "unique_name": "kth-smallest-element-in-a-sorted-matrix", "user_status": null, "title": "Kth Smallest Element in a Sorted Matrix", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 25, "description": "Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\r\n\r\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.", "notice": "You may assume k is always valid, 1 \u2264 k \u2264 n2.", "clarification": "", "example": "matrix = [\r\n   [ 1,  5,  9],\r\n   [10, 11, 13],\r\n   [12, 13, 15]\r\n],\r\nk = 8,\r\n\r\nreturn 13.", "challenge": "", "tags": [{"id": 66, "name": "Twitter", "cn_name": "Twitter", "type": 3, "unique_name": "twitter", "alias": "", "problem_count": 35}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,3,5,7,9],[2,4,6,8,10],[11,13,15,17,19],[12,14,16,18,20],[21,22,23,24,25]]\n8", "total_accepted": 135, "total_submissions": 518, "contest": "", "has_followed_by": false}, "super-pow": {"id": 1275, "unique_name": "super-pow", "user_status": null, "title": "Super Pow", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Your task is to calculate a^b mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.", "notice": "* The length of b is in range [1, 1100]", "clarification": "", "example": "**Example1:**\r\n```\r\na = 2\r\nb = [3]\r\n\r\nResult: 8\r\n```\r\n\r\n**Example2:**\r\n```\r\na = 2\r\nb = [1,0]\r\n\r\nResult: 1024\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 428, "title": "Pow(x, n) ", "unique_name": "powx-n", "level": 2, "accepted_rate": 32}], "comment_count": 0, "testcase_sample": "2\n[3]", "total_accepted": 70, "total_submissions": 146, "contest": "", "has_followed_by": false}, "water-and-jug-problem": {"id": 1277, "unique_name": "water-and-jug-problem", "user_status": null, "title": "Water and Jug Problem", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 65, "description": "You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.\r\n\r\nIf z liters of water is measurable, you must have z liters of water contained within **one or both buckets** by the end.\r\n\r\nOperations allowed:\r\n\r\n* Fill any of the jugs completely with water.\r\n* Empty any of the jugs.\r\n* Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.", "notice": "", "clarification": "", "example": "```\r\nInput: x = 3, y = 5, z = 4\r\nOutput: True\r\n\r\nInput: x = 2, y = 6, z = 5\r\nOutput: False\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "3\n5\n4", "total_accepted": 60, "total_submissions": 91, "contest": "", "has_followed_by": false}, "max-sum-of-rectangle-no-larger-than-k": {"id": 1278, "unique_name": "max-sum-of-rectangle-no-larger-than-k", "user_status": null, "title": "Max Sum of Rectangle No Larger Than K", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 45, "description": "Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.", "notice": "1.The rectangle inside the matrix must have an area > 0.\r\n2.What if the number of rows is much larger than the number of columns?", "clarification": "", "example": "```\r\nGiven matrix = [\r\n  [1,  0, 1],\r\n  [0, -2, 3]\r\n]\r\nk = 2\r\n```\r\nThe answer is `2`. Because the sum of rectangle `[[0, 1], [-2, 3]]` is 2 and 2 is the max number no larger than k (k = 2).", "challenge": "", "tags": [{"id": 16, "name": "Queue", "cn_name": "Queue", "type": 22, "unique_name": "queue", "alias": "", "problem_count": 15}, {"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}, {"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[1,0,1],[0,-2,3]]\n2", "total_accepted": 100, "total_submissions": 219, "contest": "", "has_followed_by": false}, "count-numbers-with-unique-digits": {"id": 1279, "unique_name": "count-numbers-with-unique-digits", "user_status": null, "title": "Count Numbers with Unique Digits", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 57, "description": "Given a **non-negative** integer n, count all numbers with unique digits, x, where 0 \u2264 x < 10^n.", "notice": "", "clarification": "", "example": "Given n = `2`, return `91`. (The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding `[11,22,33,44,55,66,77,88,99]`)", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 33, "name": "Backtracking", "cn_name": "Backtracking", "type": 13, "unique_name": "backtracking", "alias": "", "problem_count": 26}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "2", "total_accepted": 127, "total_submissions": 221, "contest": "", "has_followed_by": false}, "reverse-vowels-of-a-string": {"id": 1282, "unique_name": "reverse-vowels-of-a-string", "user_status": null, "title": "Reverse Vowels of a String", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 46, "description": "Write a function that takes a string as input and reverse only the vowels of a string.", "notice": "The vowels does not include the letter \"y\".\r\n\r\n", "clarification": "", "example": "**Example 1:**\r\nGiven s = \"hello\", return \"holle\".\r\n\r\n**Example 2:**\r\nGiven s = \"lintcode\", return \"lentcodi\".", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 53, "title": "Reverse Words in a String", "unique_name": "reverse-words-in-a-string", "level": 1, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "\"hello\"", "total_accepted": 264, "total_submissions": 570, "contest": "", "has_followed_by": false}, "integer-break": {"id": 1284, "unique_name": "integer-break", "user_status": null, "title": "Integer Break", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 62, "description": "Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.", "notice": "You may assume that n is not less than 2 and not larger than 58.", "clarification": "", "example": "given n = `2`, return `1 (2 = 1 + 1)`; given n = `10`, return `36 (10 = 3 + 3 + 4)`.", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [], "comment_count": 0, "testcase_sample": "2", "total_accepted": 76, "total_submissions": 120, "contest": "", "has_followed_by": false}, "power-of-four": {"id": 1285, "unique_name": "power-of-four", "user_status": null, "title": "Power of Four", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 54, "description": "Given an integer (signed 32 bits), write a function to check whether it is a power of 4.", "notice": "", "clarification": "", "example": "**Example1:**\r\n```\r\nGiven num = 16, \r\nreturn true.\r\n```\r\n**Example2:**\r\n```\r\nGiven num = 5, \r\nreturn false.\r\n```", "challenge": "Could you solve it without loops/recursion?", "tags": [{"id": 103, "name": "Two Sigma", "cn_name": "Two Sigma", "type": 3, "unique_name": "two-sigma", "alias": "", "problem_count": 5}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}], "related_problems": [{"id": 1314, "title": "Power of Two", "unique_name": "power-of-two", "level": 1, "accepted_rate": 69}, {"id": 1294, "title": "Power of Three", "unique_name": "power-of-three", "level": 1, "accepted_rate": 59}], "comment_count": 0, "testcase_sample": "16", "total_accepted": 131, "total_submissions": 239, "contest": "", "has_followed_by": false}, "self-crossing": {"id": 1286, "unique_name": "self-crossing", "user_status": null, "title": "Self Crossing", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 65, "description": "You are given an array x of `n` positive numbers. You start at point `(0,0)` and moves `x[0]` metres to the north, then `x[1]` metres to the west, `x[2]` metres to the south, `x[3]` metres to the east and so on. In other words, after each move your direction changes counter-clockwise.\r\n\r\nWrite a one-pass algorithm with `O(1)` extra space to determine, if your path crosses itself, or not.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nGiven x = [2, 1, 1, 2],\r\n?????\r\n?   ?\r\n???????>\r\n    ?\r\n\r\nReturn true (self crossing)\r\n```\r\n**Example 2:**\r\n```\r\nGiven x = [1, 2, 3, 4],\r\n????????\r\n?      ?\r\n?\r\n?\r\n?????????????>\r\n\r\nReturn false (not self crossing)\r\n```\r\n**Example 3:**\r\n```\r\nGiven x = [1, 1, 1, 1],\r\n?????\r\n?   ?\r\n?????>\r\n\r\nReturn true (self crossing)\r\n```", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1199, "title": "Perfect Number", "unique_name": "perfect-number", "level": 1, "accepted_rate": 50}], "comment_count": 0, "testcase_sample": "[2,1,1,2]", "total_accepted": 28, "total_submissions": 41, "contest": "", "has_followed_by": false}, "increasing-triplet-subsequence": {"id": 1287, "unique_name": "increasing-triplet-subsequence", "user_status": null, "title": "Increasing Triplet Subsequence", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 70, "description": "Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\r\n\r\nFormally the function should:\r\nReturn true if there exists i, j, k \r\nsuch that arr[i] < arr[j] < arr[k] given 0 \u2264 i < j < k \u2264 n-1 else return false.\r\nYour algorithm should run in O(n) time complexity and O(1) space complexity.", "notice": "", "clarification": "", "example": "Given [1, 2, 3, 4, 5],\r\nreturn true.\r\n\r\nGiven [5, 4, 3, 2, 1],\r\nreturn false.", "challenge": "", "tags": [{"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1, 2, 3, 4, 5]", "total_accepted": 151, "total_submissions": 212, "contest": "", "has_followed_by": false}, "number-of-atoms": {"id": 1289, "unique_name": "number-of-atoms", "user_status": null, "title": "Number of Atoms", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 50, "description": "Given a chemical formula (given as a string), return the count of each atom.\r\n\r\nAn atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\r\n\r\n1 or more digits representing the count of that element may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.\r\n\r\nTwo formulas concatenated together produce another formula. For example, H2O2He3Mg4 is also a formula.\r\n\r\nA formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.\r\n\r\nGiven a formula, output the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\r\n\r\nExample 1:\r\n~~~~.\r\nInput: \r\nformula = \"H2O\"\r\nOutput: \"H2O\"\r\nExplanation: \r\nThe count of elements are {'H': 2, 'O': 1}.\r\n~~~~\r\nExample 2:\r\n~~~~.\r\nInput: \r\nformula = \"Mg(OH)2\"\r\nOutput: \"H2MgO2\"\r\nExplanation: \r\nThe count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\r\n~~~~\r\nExample 3:\r\n~~~~.\r\nInput: \r\nformula = \"K4(ON(SO3)2)2\"\r\nOutput: \"K4N2O14S4\"\r\nExplanation: \r\nThe count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\r\n~~~~", "notice": "", "clarification": "", "example": "All atom names consist of lowercase letters, except for the first character which is uppercase.\r\nThe length of formula will be in the range [1, 1000].\r\nformula will only consist of letters, digits, and round parentheses, and is a valid formula as defined in the problem.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"H2O\"", "total_accepted": 107, "total_submissions": 214, "contest": "", "has_followed_by": false}, "patching-array": {"id": 1290, "unique_name": "patching-array", "user_status": null, "title": "Patching Array", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 60, "description": "Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range `[1, n]` inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nnums = [1, 3], n = 6\r\nReturn 1.\r\n\r\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\r\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\r\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\r\nSo we only need 1 patch.\r\n```\r\n\r\n**Example 2:**\r\n```\r\nnums = [1, 5, 10], n = 20\r\nReturn 2.\r\nThe two patches can be [2, 4].\r\n```\r\n\r\n**Example 3:**\r\n```\r\nnums = [1, 2, 2], n = 5\r\nReturn 0.\r\n```", "challenge": "", "tags": [{"id": 3, "name": "Greedy", "cn_name": "Greedy", "type": 1, "unique_name": "greedy", "alias": "", "problem_count": 43}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,3]\n6", "total_accepted": 64, "total_submissions": 105, "contest": "", "has_followed_by": false}, "longest-increasing-path-in-a-matrix": {"id": 1291, "unique_name": "longest-increasing-path-in-a-matrix", "user_status": null, "title": "Longest Increasing Path in a Matrix", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 58, "description": "Given an integer matrix, find the length of the longest increasing path.\r\n\r\nFrom each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).", "notice": "", "clarification": "", "example": "**Example 1:**\r\n\r\nnums = [\r\n&nbsp;&nbsp;[<font color=\"red\">9</font>,9,4],\r\n&nbsp;&nbsp;[<font color=\"red\">6</font>,6,8],\r\n&nbsp;&nbsp;[<font color=\"red\">2</font>,<font color=\"red\">1</font>,1]\r\n]\r\nReturn `4`\r\nThe longest increasing path is `[1, 2, 6, 9]`.\r\n\r\n**Example 2:**\r\n\r\nnums = [\r\n&nbsp;&nbsp;[<font color=\"red\">3</font>,<font color=\"red\">4</font>,<font color=\"red\">5</font>],\r\n&nbsp;&nbsp;[3,2,<font color=\"red\">6</font>],\r\n&nbsp;&nbsp;[2,2,1]\r\n]\r\nReturn `4`\r\nThe longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed.", "challenge": "", "tags": [{"id": 80, "name": "Topological Sort", "cn_name": "Topological Sort", "type": 1, "unique_name": "topological-sort", "alias": "", "problem_count": 7}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[[9,9,4],[6,6,8],[2,1,1]]", "total_accepted": 138, "total_submissions": 236, "contest": "", "has_followed_by": false}, "odd-even-linked-list": {"id": 1292, "unique_name": "odd-even-linked-list", "user_status": null, "title": "Odd Even Linked List", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 59, "description": "Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.", "notice": "The relative order inside both the even and odd groups should remain as it was in the input. \r\nThe first node is considered odd, the second node even and so on ...", "clarification": "", "example": "**Example:**\r\nGiven `1->2->3->4->5->NULL`,\r\nreturn `1->3->5->2->4->NULL`.", "challenge": "", "tags": [{"id": 6, "name": "Linked List", "cn_name": "Linked List", "type": 22, "unique_name": "linked-list", "alias": "", "problem_count": 49}], "related_problems": [{"id": 99, "title": "Reorder List ", "unique_name": "reorder-list", "level": 2, "accepted_rate": 24}, {"id": 96, "title": "Partition List", "unique_name": "partition-list", "level": 1, "accepted_rate": 31}], "comment_count": 0, "testcase_sample": "1->2->3->4->5->null", "total_accepted": 127, "total_submissions": 213, "contest": "", "has_followed_by": false}, "count-of-range-sum": {"id": 1293, "unique_name": "count-of-range-sum", "user_status": null, "title": "Count of Range Sum", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 32, "description": "Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.\r\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i \u00e2\u2030\u00a4 j), inclusive.", "notice": "A naive algorithm of O(n2) is trivial. You MUST do better than that.", "clarification": "", "example": "Given nums = [-2, 5, -1], lower = -2, upper = 2,\r\nReturn 3.\r\nThe three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2.", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[-2,5,-1]\n-2\n2", "total_accepted": 137, "total_submissions": 425, "contest": "", "has_followed_by": false}, "power-of-three": {"id": 1294, "unique_name": "power-of-three", "user_status": null, "title": "Power of Three", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 59, "description": "Given an integer, write a function to determine if it is a power of three.", "notice": "", "clarification": "", "example": "", "challenge": "Could you do it without using any loop / recursion?", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1314, "title": "Power of Two", "unique_name": "power-of-two", "level": 1, "accepted_rate": 69}, {"id": 1285, "title": "Power of Four", "unique_name": "power-of-four", "level": 1, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "0", "total_accepted": 297, "total_submissions": 494, "contest": "", "has_followed_by": false}, "maximum-product-of-word-lengths": {"id": 1296, "unique_name": "maximum-product-of-word-lengths", "user_status": null, "title": "Maximum Product of Word Lengths", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 68, "description": "Given a string array `words`, find the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.", "notice": "", "clarification": "", "example": "**Example 1:**\r\nGiven `[\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"]`\r\nReturn `16`\r\nThe two words can be `\"abcw\", \"xtfn\"`.\r\n\r\n**Example 2:**\r\nGiven `[\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]`\r\nReturn `4`\r\nThe two words can be `\"ab\", \"cd\"`.\r\n\r\n**Example 3:**\r\nGiven `[\"a\", \"aa\", \"aaa\", \"aaaa\"]`\r\nReturn `0`\r\nNo such pair of words.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]", "total_accepted": 138, "total_submissions": 200, "contest": "", "has_followed_by": false}, "count-of-smaller-numbers-after-self": {"id": 1297, "unique_name": "count-of-smaller-numbers-after-self", "user_status": null, "title": "Count of Smaller Numbers After Self", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 36, "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].", "notice": "", "clarification": "", "example": "Given nums = [5, 2, 6, 1]\r\n\r\nTo the right of 5 there are 2 smaller elements (2 and 1).\r\nTo the right of 2 there is only 1 smaller element (1).\r\nTo the right of 6 there is 1 smaller element (1).\r\nTo the right of 1 there is 0 smaller element.\r\nReturn the array [2, 1, 1, 0].\r\n\r\n", "challenge": "", "tags": [{"id": 88, "name": "Binary Indexed Tree", "cn_name": "Binary Indexed Tree", "type": 1, "unique_name": "binary-indexed-tree", "alias": "Fenwick Tree", "problem_count": 4}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1252, "title": "Queue Reconstruction by Height", "unique_name": "queue-reconstruction-by-height", "level": 2, "accepted_rate": 74}], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 241, "total_submissions": 658, "contest": "", "has_followed_by": false}, "minimum-height-trees": {"id": 1298, "unique_name": "minimum-height-trees", "user_status": null, "title": "Minimum Height Trees", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 28, "description": "For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.\r\n\r\n**Format**\r\nThe graph contains `n` nodes which are labeled from `0` to `n - 1`. You will be given the number n and a list of undirected `edges` (each edge is a pair of labels).\r\n\r\nYou can assume that no duplicate edges will appear in `edges`. Since all edges are undirected, `[0, 1]` is the same as `[1, 0]`and thus will not appear together in edges.", "notice": "(1) According to the [definition of tree on Wikipedia](https://en.wikipedia.org/wiki/Tree_(graph_theory) \"\"): \u201ca tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\u201d\r\n\r\n(2) The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.", "clarification": "", "example": "**Example 1:**\r\n\r\nGiven `n = 4`, edges = `[[1, 0], [1, 2], [1, 3]]`\r\n```\r\n        0\r\n        |\r\n        1\r\n       / \\\r\n      2   3\r\n```\r\nreturn `[1]`\r\n\r\n**Example 2:**\r\n\r\nGiven `n = 6`, edges = `[[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]`\r\n```\r\n     0  1  2\r\n      \\ | /\r\n        3\r\n        |\r\n        4\r\n        |\r\n        5\r\n```\r\nreturn `[3, 4]`", "challenge": "", "tags": [{"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "4\n[[1,0],[1,2],[1,3]]", "total_accepted": 174, "total_submissions": 615, "contest": "", "has_followed_by": false}, "nim-game": {"id": 1300, "unique_name": "nim-game", "user_status": null, "title": "Nim Game", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 63, "description": "You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.\r\n\r\nBoth of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.\r\n\r\nFor example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.", "notice": "", "clarification": "", "example": "```\r\nInput:\r\nn=4\r\nOutput:\r\nfalse\r\n```", "challenge": "", "tags": [{"id": 100, "name": "Adobe", "cn_name": "Adobe", "type": 3, "unique_name": "adobe", "alias": "", "problem_count": 14}], "related_problems": [], "comment_count": 0, "testcase_sample": "4", "total_accepted": 91, "total_submissions": 141, "contest": "", "has_followed_by": false}, "h-index": {"id": 1304, "unique_name": "h-index", "user_status": null, "title": "H-Index", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 41, "description": "Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.\r\n\r\nAccording to the definition of h-index on Wikipedia: \"A scientist has index h if h of his/her N papers have at least h citations each, and the other N \u00e2\u02c6\u2019 h papers have no more than h citations each.\"\r\n\r\n", "notice": "If there are several possible values for h, the maximum one is taken as the h-index.", "clarification": "", "example": "given citations = [3, 0, 6, 1, 5], which means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, his h-index is 3.", "challenge": "", "tags": [{"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "[0]", "total_accepted": 306, "total_submissions": 741, "contest": "", "has_followed_by": false}, "integer-to-english-words": {"id": 1305, "unique_name": "integer-to-english-words", "user_status": null, "title": "Integer to English Words", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 39, "description": "Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than `2^31 - 1`.", "notice": "", "clarification": "", "example": "```\r\n123 -> \"One Hundred Twenty Three\"\r\n12345 -> \"Twelve Thousand Three Hundred Forty Five\"\r\n1234567 -> \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 418, "title": "Integer to Roman", "unique_name": "integer-to-roman", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "123", "total_accepted": 231, "total_submissions": 580, "contest": "", "has_followed_by": false}, "verify-preorder-sequence-in-binary-search-tree": {"id": 1307, "unique_name": "verify-preorder-sequence-in-binary-search-tree", "user_status": null, "title": "Verify Preorder Sequence in Binary Search Tree", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 44, "description": "Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.\r\n\r\nYou may assume each number in the sequence is unique.\r\n\r\nFollow up:\r\nCould you do it using only constant space complexity?", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}], "related_problems": [], "comment_count": 0, "testcase_sample": "[]", "total_accepted": 105, "total_submissions": 235, "contest": "", "has_followed_by": false}, "factor-combinations": {"id": 1308, "unique_name": "factor-combinations", "user_status": null, "title": "Factor Combinations", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 60, "description": "Numbers can be regarded as product of its factors. For example,\r\n\r\n~~~~.\r\n8 = 2 x 2 x 2;\r\n  = 2 x 4.\r\n~~~~\r\nWrite a function that takes an integer n and return all possible combinations of its factors.", "notice": "You may assume that n is always positive.\r\nFactors should be greater than 1 and less than n.", "clarification": "", "example": "input: 1\r\noutput: \r\n[]\r\n\r\ninput: 37\r\noutput: \r\n[]\r\n\r\ninput: 12\r\noutput:\r\n[\r\n  [2, 6],\r\n  [2, 2, 3],\r\n  [3, 4]\r\n]\r\n\r\ninput: 32\r\noutput:\r\n[\r\n  [2, 16],\r\n  [2, 2, 8],\r\n  [2, 2, 2, 4],\r\n  [2, 2, 2, 2, 2],\r\n  [2, 4, 4],\r\n  [4, 8]\r\n]", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "32", "total_accepted": 162, "total_submissions": 265, "contest": "", "has_followed_by": false}, "different-ways-to-add-parentheses": {"id": 1309, "unique_name": "different-ways-to-add-parentheses", "user_status": null, "title": "Different Ways to Add Parentheses", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 72, "description": "Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.\r\n\r\n\r\nExample 1\r\n~~~~.\r\nInput: \"2-1-1\".\r\n\r\n((2-1)-1) = 0\r\n(2-(1-1)) = 2\r\nOutput: [0, 2]\r\n~~~~\r\n\r\n\r\nExample 2\r\n~~~~.\r\nInput: \"2*3-4*5\"\r\n\r\n(2*(3-(4*5))) = -34\r\n((2*3)-(4*5)) = -14\r\n((2*(3-4))*5) = -10\r\n(2*((3-4)*5)) = -10\r\n(((2*3)-4)*5) = 10\r\nOutput: [-34, -14, -10, -10, 10]\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "\"2-1-1\"", "total_accepted": 49, "total_submissions": 66, "contest": "", "has_followed_by": false}, "product-of-array-except-self": {"id": 1310, "unique_name": "product-of-array-except-self", "user_status": null, "title": "Product of Array Except Self", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 68, "description": "Given an array of n integers where n > 1, `nums`, return an array output such that `output[i]` is equal to the product of all the elements of `nums` except `nums[i]`.", "notice": "Solve it **without division** and in O(n).", "clarification": "", "example": "For example, given `[1,2,3,4]`, return `[24,12,8,6]`.", "challenge": "Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [{"id": 515, "title": "Paint House", "unique_name": "paint-house", "level": 2, "accepted_rate": 36}, {"id": 363, "title": "Trapping Rain Water", "unique_name": "trapping-rain-water", "level": 2, "accepted_rate": 39}, {"id": 191, "title": "Maximum Product Subarray ", "unique_name": "maximum-product-subarray", "level": 2, "accepted_rate": 30}], "comment_count": 0, "testcase_sample": "[1,2,3,4]", "total_accepted": 325, "total_submissions": 472, "contest": "", "has_followed_by": false}, "number-of-digit-one": {"id": 1312, "unique_name": "number-of-digit-one", "user_status": null, "title": "Number of Digit One", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 58, "description": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.", "notice": "", "clarification": "", "example": "For example:\r\nGiven n = `13`,\r\nReturn `6`\r\nBecause digit 1 occurred in the following numbers: `1, 10, 11, 12, 13`.", "challenge": "", "tags": [{"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}], "related_problems": [{"id": 2, "title": "Trailing Zeros", "unique_name": "trailing-zeros", "level": 1, "accepted_rate": 23}], "comment_count": 0, "testcase_sample": "13", "total_accepted": 48, "total_submissions": 80, "contest": "", "has_followed_by": false}, "power-of-two": {"id": 1314, "unique_name": "power-of-two", "user_status": null, "title": "Power of Two", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 69, "description": "Given an integer, write a function to determine if it is a power of two.", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 10, "name": "Mathematics", "cn_name": "Mathematics", "type": 14, "unique_name": "mathematics", "alias": "", "problem_count": 77}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 1332, "title": "Number of 1 Bits", "unique_name": "number-of-1-bits", "level": 1, "accepted_rate": 79}, {"id": 1294, "title": "Power of Three", "unique_name": "power-of-three", "level": 1, "accepted_rate": 59}, {"id": 1285, "title": "Power of Four", "unique_name": "power-of-four", "level": 1, "accepted_rate": 54}], "comment_count": 0, "testcase_sample": "3", "total_accepted": 413, "total_submissions": 597, "contest": "", "has_followed_by": false}, "summary-ranges": {"id": 1315, "unique_name": "summary-ranges", "user_status": null, "title": "Summary Ranges", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 62, "description": "Given a sorted integer array without duplicates, return the summary of its ranges.", "notice": "* The result is in ascending order", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [0,1,2,4,5,7]\r\nOutput: [\"0->2\",\"4->5\",\"7\"]\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: [0,2,3,4,6,8,9]\r\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\r\n```", "challenge": "", "tags": [{"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [{"id": 641, "title": "Missing Ranges", "unique_name": "missing-ranges", "level": 2, "accepted_rate": 21}], "comment_count": 0, "testcase_sample": "[0,1,2,4,5,7]", "total_accepted": 164, "total_submissions": 261, "contest": "", "has_followed_by": false}, "count-complete-tree-nodes": {"id": 1317, "unique_name": "count-complete-tree-nodes", "user_status": null, "title": "Count Complete Tree Nodes", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 80, "description": "Given a **complete** binary tree, count the number of nodes.", "notice": "In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level h.", "clarification": "", "example": "```\r\nInput: \r\n    1\r\n   / \\\r\n  2   3\r\n / \\  /\r\n4  5 6\r\n\r\nOutput: 6\r\n```", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}], "related_problems": [{"id": 942, "title": "Complete Binary Search Tree", "unique_name": "complete-binary-search-tree", "level": 2, "accepted_rate": 30}, {"id": 467, "title": "Complete Binary Tree", "unique_name": "complete-binary-tree", "level": 1, "accepted_rate": 27}], "comment_count": 0, "testcase_sample": "{1,2,3,4,5,6}", "total_accepted": 121, "total_submissions": 149, "contest": "", "has_followed_by": false}, "contains-duplicate-iii": {"id": 1318, "unique_name": "contains-duplicate-iii", "user_status": null, "title": "Contains Duplicate III", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Given an array of integers, find out whether there are two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is at most `t` and the absolute difference between `i` and `j` is at most `k`.", "notice": "", "clarification": "", "example": "Given nums = `[1,3,1]`, k = `1`, t = `1`, return `false`.", "challenge": "", "tags": [{"id": 31, "name": "Binary Search Tree", "cn_name": "Binary Search Tree", "type": 21, "unique_name": "binary-search-tree", "alias": "BST", "problem_count": 20}, {"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}], "related_problems": [{"id": 1320, "title": "Contains Duplicate", "unique_name": "contains-duplicate", "level": 1, "accepted_rate": 73}, {"id": 1319, "title": "Contains Duplicate II", "unique_name": "contains-duplicate-ii", "level": 1, "accepted_rate": 36}], "comment_count": 0, "testcase_sample": "[1,3,1]\n1\n1", "total_accepted": 102, "total_submissions": 212, "contest": "", "has_followed_by": false}, "contains-duplicate-ii": {"id": 1319, "unique_name": "contains-duplicate-ii", "user_status": null, "title": "Contains Duplicate II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 36, "description": "Given an `array` of integers and an integer `k`, find out whether there are two distinct indices `i` and `j` in the array such that `nums[i] = nums[j]` and the **absolute** difference between `i` and `j` is at most `k`.", "notice": "", "clarification": "", "example": "Given nums = `[1,2,1]`, k = `0`, return `false`.", "challenge": "", "tags": [{"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1320, "title": "Contains Duplicate", "unique_name": "contains-duplicate", "level": 1, "accepted_rate": 73}, {"id": 1318, "title": "Contains Duplicate III", "unique_name": "contains-duplicate-iii", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "[1,2,1]\n0", "total_accepted": 271, "total_submissions": 740, "contest": "", "has_followed_by": false}, "contains-duplicate": {"id": 1320, "unique_name": "contains-duplicate", "user_status": null, "title": "Contains Duplicate", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 73, "description": "Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.", "notice": "", "clarification": "", "example": "Given nums = `[1,1]`, return `ture`.", "challenge": "", "tags": [{"id": 96, "name": "Palantir", "cn_name": "Palantir", "type": 3, "unique_name": "palantir", "alias": "", "problem_count": 8}, {"id": 67, "name": "Yahoo", "cn_name": "Yahoo", "type": 3, "unique_name": "yahoo", "alias": "", "problem_count": 17}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 1319, "title": "Contains Duplicate II", "unique_name": "contains-duplicate-ii", "level": 1, "accepted_rate": 36}, {"id": 1318, "title": "Contains Duplicate III", "unique_name": "contains-duplicate-iii", "level": 2, "accepted_rate": 47}], "comment_count": 0, "testcase_sample": "[1,1]", "total_accepted": 239, "total_submissions": 324, "contest": "", "has_followed_by": false}, "count-primes": {"id": 1324, "unique_name": "count-primes", "user_status": null, "title": "Count Primes", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 41, "description": "Count the number of prime numbers less than a non-negative number, n.", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}], "related_problems": [], "comment_count": 0, "testcase_sample": "2", "total_accepted": 596, "total_submissions": 1441, "contest": "", "has_followed_by": false}, "bitwise-and-of-numbers-range": {"id": 1325, "unique_name": "bitwise-and-of-numbers-range", "user_status": null, "title": "Bitwise AND of Numbers Range", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 70, "description": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\r\n\r\nFor example, given the range [5, 7], you should return 4.", "notice": "", "clarification": "", "example": "```\r\nInput:\r\nm=5\r\nn=7\r\nOutput:\r\n4\r\n```", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "5\n7", "total_accepted": 105, "total_submissions": 148, "contest": "", "has_followed_by": false}, "number-of-1-bits": {"id": 1332, "unique_name": "number-of-1-bits", "user_status": null, "title": "Number of 1 Bits", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 79, "description": "Write a function that takes an unsigned integer and returns the number of \u00e2\u20ac\u21221' bits it has (also known as the Hamming weight).\r\n\r\n", "notice": "", "clarification": "", "example": "For example, the 32-bit integer `11` has binary representation `00000000000000000000000000001011`, so the function should return 3.", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 43, "name": "Bit Manipulation", "cn_name": "Bit Manipulation", "type": 1, "unique_name": "bit-manipulation", "alias": "", "problem_count": 23}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [{"id": 1314, "title": "Power of Two", "unique_name": "power-of-two", "level": 1, "accepted_rate": 69}, {"id": 1046, "title": "Prime Number of Set Bits in Binary Representation", "unique_name": "prime-number-of-set-bits-in-binary-representation", "level": 1, "accepted_rate": 65}], "comment_count": 0, "testcase_sample": "11", "total_accepted": 187, "total_submissions": 233, "contest": "", "has_followed_by": false}, "rotate-array": {"id": 1334, "unique_name": "rotate-array", "user_status": null, "title": "Rotate Array", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 45, "description": "Given an array, rotate the array to the right by k steps, where k is non-negative.", "notice": "1.Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\r\n2.Could you do it in-place with O(1) extra space?", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput: [1,2,3,4,5,6,7] and k = 3\r\nOutput: [5,6,7,1,2,3,4]\r\nExplanation:\r\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\r\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\r\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\r\n```\r\n\r\n**Example 2:**\r\n```\r\nInput: [-1,-100,3,99] and k = 2\r\nOutput: [3,99,-1,-100]\r\nExplanation: \r\nrotate 1 steps to the right: [99,-1,-100,3]\r\nrotate 2 steps to the right: [3,99,-1,-100]\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 927, "title": "Reverse Words in a String II", "unique_name": "reverse-words-in-a-string-ii", "level": 2, "accepted_rate": 64}, {"id": 170, "title": "Rotate List", "unique_name": "rotate-list", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "[1,2,3,4,5,6,7]\n3", "total_accepted": 311, "total_submissions": 676, "contest": "", "has_followed_by": false}, "repeated-dna-sequences": {"id": 1335, "unique_name": "repeated-dna-sequences", "user_status": null, "title": "Repeated DNA Sequences", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 45, "description": "All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.\r\n\r\nWrite a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.\r\n\r\nExample:\r\n\r\n~~~~.\r\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\r\n\r\nOutput: [\"AAAAACCCCC\", \"CCCCCAAAAA\"]\r\n~~~~", "notice": "", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"A\"", "total_accepted": 92, "total_submissions": 202, "contest": "", "has_followed_by": false}, "dungeon-game": {"id": 1346, "unique_name": "dungeon-game", "user_status": null, "title": "Dungeon Game", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 70, "description": "The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.\r\n\r\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\r\n\r\nSome of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).\r\n\r\nIn order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\r\n\r\n \r\n\r\nWrite a function to determine the knight's minimum initial health so that he is able to rescue the princess.\r\n\r\n \r\n\r\nFor example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.\r\n\r\n| header | header | header |\r\n| ------ | ------ | ------ |\r\n| -2(K)   | -3   | 3   |\r\n| -5   | -10   | 1   |\r\n| 10   | 30   | -5(P)   |\r\n", "notice": "The knight's health has no upper bound.\r\nAny room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.", "clarification": "", "example": "Input:[[-2,-3,3],[-5,-10,1],[10,30,-5]]\r\nOutput:7", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [{"id": 1058, "title": "Cherry Pickup", "unique_name": "cherry-pickup", "level": 3, "accepted_rate": 35}], "comment_count": 0, "testcase_sample": "[[-2,-3,3],[-5,-10,1],[10,30,-5]]", "total_accepted": 101, "total_submissions": 142, "contest": "", "has_followed_by": false}, "factorial-trailing-zeroes": {"id": 1347, "unique_name": "factorial-trailing-zeroes", "user_status": null, "title": "Factorial Trailing Zeroes", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 47, "description": "Given an integer n, return the number of trailing zeroes in n!.", "notice": "Your solution should be in logarithmic time complexity.", "clarification": "", "example": "", "challenge": "", "tags": [{"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}], "related_problems": [{"id": 1023, "title": "Preimage Size of Factorial Zeroes Function", "unique_name": "preimage-size-of-factorial-zeroes-function", "level": 3, "accepted_rate": 70}], "comment_count": 0, "testcase_sample": "5", "total_accepted": 275, "total_submissions": 577, "contest": "", "has_followed_by": false}, "excel-sheet-column-number": {"id": 1348, "unique_name": "excel-sheet-column-number", "user_status": null, "title": "Excel Sheet Column Number", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 64, "description": "Related to question Excel Sheet Column Title\r\n\r\nGiven a column title as appear in an Excel sheet, return its corresponding column number.", "notice": "", "clarification": "", "example": "    A -> 1\r\n    B -> 2\r\n    C -> 3\r\n    ...\r\n    Z -> 26\r\n    AA -> 27\r\n    AB -> 28 ", "challenge": "", "tags": [{"id": 62, "name": "Uber", "cn_name": "Uber", "type": 3, "unique_name": "uber", "alias": "", "problem_count": 62}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"A\"", "total_accepted": 191, "total_submissions": 293, "contest": "", "has_followed_by": false}, "excel-sheet-column-title": {"id": 1350, "unique_name": "excel-sheet-column-title", "user_status": null, "title": "Excel Sheet Column Title", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 59, "description": "Given a positive integer, return its corresponding column title as appear in an Excel sheet.", "notice": "", "clarification": "", "example": " 1 -> A\r\n    2 -> B\r\n    3 -> C\r\n    ...\r\n    26 -> Z\r\n    27 -> AA\r\n    28 -> AB ", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 76, "name": "Zenefits", "cn_name": "Zenefits", "type": 3, "unique_name": "zenefits", "alias": "", "problem_count": 22}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}], "related_problems": [], "comment_count": 0, "testcase_sample": "10", "total_accepted": 577, "total_submissions": 970, "contest": "", "has_followed_by": false}, "fraction-to-recurring-decimal": {"id": 1351, "unique_name": "fraction-to-recurring-decimal", "user_status": null, "title": "Fraction to Recurring Decimal", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 56, "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\r\n\r\nIf the fractional part is repeating, enclose the repeating part in parentheses.", "notice": "", "clarification": "", "example": "```\r\nGiven numerator = 1, denominator = 2, return \"0.5\".\r\nGiven numerator = 2, denominator = 1, return \"2\".\r\nGiven numerator = 2, denominator = 3, return \"0.(6)\".\r\n```", "challenge": "", "tags": [{"id": 93, "name": "IXL", "cn_name": "IXL", "type": 3, "unique_name": "ixl", "alias": "", "problem_count": 7}, {"id": 63, "name": "Google", "cn_name": "Google", "type": 3, "unique_name": "google", "alias": "", "problem_count": 250}], "related_problems": [], "comment_count": 0, "testcase_sample": "2\n3", "total_accepted": 88, "total_submissions": 153, "contest": "", "has_followed_by": false}, "compare-version-numbers": {"id": 1352, "unique_name": "compare-version-numbers", "user_status": null, "title": "Compare Version Numbers", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 47, "description": "Compare two version numbers `version1` and `version2`.\r\nIf `version1 > version2` return `1`, if `version1 < version2` return `-1`, otherwise return `0`.\r\n\r\nYou may assume that the version strings are `non-empty` and contain only `digits` and the `.` character.\r\nThe `.` character does not represent a decimal point and is used to separate number sequences.\r\nFor instance, `2.5` is not \"two and a half\" or \"half way to version three\", it is the fifth second-level revision of the second first-level revision.\r\n\r\n", "notice": "", "clarification": "", "example": "Here is an example of version numbers ordering:\r\n```\r\n0.1 < 1.1 < 1.2 < 13.37\r\n```", "challenge": "", "tags": [{"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 64, "name": "Apple", "cn_name": "Apple", "type": 3, "unique_name": "apple", "alias": "", "problem_count": 31}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"0.1\"\n\"1.1\"", "total_accepted": 131, "total_submissions": 276, "contest": "", "has_followed_by": false}, "sum-root-to-leaf-numbers": {"id": 1353, "unique_name": "sum-root-to-leaf-numbers", "user_status": null, "title": "Sum Root to Leaf Numbers", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 60, "description": "Given a binary tree containing digits from `0-9` only, each root-to-leaf path could represent a number.\r\n\r\nAn example is the root-to-leaf path `1->2->3` which represents the number `123`.\r\n\r\nFind the total sum of all root-to-leaf numbers.", "notice": "A leaf is a node with no children.", "clarification": "", "example": "**Example:**\r\n```\r\nInput: [1,2,3]\r\n    1\r\n   / \\\r\n  2   3\r\nOutput: 25\r\nExplanation:\r\nThe root-to-leaf path 1->2 represents the number 12.\r\nThe root-to-leaf path 1->3 represents the number 13.\r\nTherefore, sum = 12 + 13 = 25.\r\n```\r\n**Example 2:**\r\n```\r\nInput: [4,9,0,5,1]\r\n    4\r\n   / \\\r\n  9   0\r\n / \\\r\n5   1\r\nOutput: 1026\r\nExplanation:\r\nThe root-to-leaf path 4->9->5 represents the number 495.\r\nThe root-to-leaf path 4->9->1 represents the number 491.\r\nThe root-to-leaf path 4->0 represents the number 40.\r\nTherefore, sum = 495 + 491 + 40 = 1026.\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}], "related_problems": [{"id": 376, "title": "Binary Tree Path Sum", "unique_name": "binary-tree-path-sum", "level": 1, "accepted_rate": 22}, {"id": 94, "title": "Binary Tree Maximum Path Sum ", "unique_name": "binary-tree-maximum-path-sum", "level": 2, "accepted_rate": 25}], "comment_count": 0, "testcase_sample": "{1,2,3}", "total_accepted": 135, "total_submissions": 220, "contest": "", "has_followed_by": false}, "pascals-triangle-ii": {"id": 1354, "unique_name": "pascals-triangle-ii", "user_status": null, "title": "Pascal's Triangle II", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 61, "description": "Given a non-negative index k where k \u00e2\u2030\u00a4 33, return the kth index row of the Pascal's triangle.", "notice": "1.Note that the row index starts from 0.\r\n2.In Pascal's triangle, each number is the sum of the two numbers directly above it.", "clarification": "", "example": "**Example:**\r\n```\r\nInput: 3\r\nOutput: [1,3,3,1]\r\n```", "challenge": "Could you optimize your algorithm to use only O(k) extra space?", "tags": [{"id": 71, "name": "Amazon", "cn_name": "Amazon", "type": 3, "unique_name": "amazon", "alias": "", "problem_count": 112}, {"id": 7, "name": "Array", "cn_name": "Array", "type": 22, "unique_name": "array", "alias": "", "problem_count": 132}], "related_problems": [{"id": 768, "title": "Yang Hui Triangle", "unique_name": "yang-hui-triangle", "level": 1, "accepted_rate": 45}], "comment_count": 0, "testcase_sample": "1", "total_accepted": 238, "total_submissions": 384, "contest": "", "has_followed_by": false}, "symmetric-tree": {"id": 1360, "unique_name": "symmetric-tree", "user_status": null, "title": "Symmetric Tree", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 55, "description": "Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).", "notice": "Bonus points if you could solve it both recursively and iteratively.", "clarification": "", "example": "For example, this binary tree `{1,2,2,3,4,4,3}` is symmetric:\r\n```\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n```\r\nBut the following `{1,2,2,#,3,#,3}` is not:\r\n```\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n```", "challenge": "", "tags": [{"id": 25, "name": "Binary Tree", "cn_name": "Binary Tree", "type": 21, "unique_name": "binary-tree", "alias": "", "problem_count": 72}, {"id": 77, "name": "Microsoft", "cn_name": "Microsoft", "type": 3, "unique_name": "microsoft", "alias": "", "problem_count": 105}, {"id": 28, "name": "Breadth-first Search", "cn_name": "Breadth-first Search", "type": 13, "unique_name": "breadth-first-search", "alias": "BFS", "problem_count": 37}, {"id": 84, "name": "Bloomberg", "cn_name": "Bloomberg", "type": 3, "unique_name": "bloomberg", "alias": "", "problem_count": 77}, {"id": 32, "name": "Depth-first Search", "cn_name": "Depth-first Search", "type": 13, "unique_name": "depth-first-search", "alias": "DFS", "problem_count": 57}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "{1,2,2,#,3,#,3}", "total_accepted": 442, "total_submissions": 788, "contest": "", "has_followed_by": false}, "text-justification": {"id": 1361, "unique_name": "text-justification", "user_status": null, "title": "Text Justification", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 45, "description": "Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\r\n\r\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly maxWidth characters.\r\n\r\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\r\n\r\nFor the last line of text, it should be left justified and no **extra** space is inserted between words.", "notice": "\u00b7 A word is defined as a character sequence consisting of non-space characters only.\r\n\u00b7 Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.\r\n\u00b7 The input array `words` contains at least one word.", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\nwords = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\r\nmaxWidth = 16\r\nOutput:\r\n[\r\n   \"This    is    an\",\r\n   \"example  of text\",\r\n   \"justification.  \"\r\n]\r\n```\r\n**Example 2:**\r\n```\r\nInput:\r\nwords = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\r\nmaxWidth = 16\r\nOutput:\r\n[\r\n  \"What   must   be\",\r\n  \"acknowledgment  \",\r\n  \"shall be        \"\r\n]\r\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\",\r\n             because the last line must be left-justified instead of fully-justified.\r\n             Note that the second line is also left-justified becase it contains only one word.\r\n```\r\n**Example 3:**\r\n```\r\nInput:\r\nwords = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\r\n         \"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\r\nmaxWidth = 20\r\nOutput:\r\n[\r\n  \"Science  is  what we\",\r\n  \"understand      well\",\r\n  \"enough to explain to\",\r\n  \"a  computer.  Art is\",\r\n  \"everything  else  we\",\r\n  \"do                  \"\r\n]\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 70, "name": "Airbnb", "cn_name": "Airbnb", "type": 3, "unique_name": "airbnb", "alias": "", "problem_count": 38}, {"id": 72, "name": "Facebook", "cn_name": "Facebook", "type": 3, "unique_name": "facebook", "alias": "", "problem_count": 136}, {"id": 68, "name": "LinkedIn", "cn_name": "LinkedIn", "type": 3, "unique_name": "linkedin", "alias": "", "problem_count": 59}], "related_problems": [], "comment_count": 0, "testcase_sample": "[\"This\",\"is\",\"an\",\"example\",\"of\",\"text\",\"justification.\"]\n16", "total_accepted": 150, "total_submissions": 326, "contest": "", "has_followed_by": false}, "substring-with-concatenation-of-all-words": {"id": 1362, "unique_name": "substring-with-concatenation-of-all-words", "user_status": null, "title": "Substring with Concatenation of All Words", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 52, "description": "You are given a string, s, and a list of words, **words**, that are all of the same length. Find all starting indices of substring(s) in **s** that is a concatenation of each word in **words** exactly once and without any intervening characters.", "notice": "", "clarification": "", "example": "**Example 1:**\r\n```\r\nInput:\r\n  s = \"barfoothefoobarman\",\r\n  words = [\"foo\",\"bar\"]\r\nOutput: [0,9]\r\nExplanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\r\nThe output order does not matter, returning [9,0] is fine too.\r\n```\r\n**Example 2:**\r\n```\r\nInput:\r\n  s = \"wordgoodstudentgoodword\",\r\n  words = [\"word\",\"student\"]\r\nOutput: []\r\n```", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}, {"id": 5, "name": "Hash Table", "cn_name": "Hash Table", "type": 22, "unique_name": "hash-table", "alias": "", "problem_count": 80}, {"id": 18, "name": "Two Pointers", "cn_name": "Two Pointers", "type": 1, "unique_name": "two-pointers", "alias": "", "problem_count": 53}], "related_problems": [{"id": 32, "title": "Minimum Window Substring ", "unique_name": "minimum-window-substring", "level": 2, "accepted_rate": 24}], "comment_count": 0, "testcase_sample": "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]", "total_accepted": 57, "total_submissions": 106, "contest": "", "has_followed_by": false}, "zigzag-conversion": {"id": 1363, "unique_name": "zigzag-conversion", "user_status": null, "title": "ZigZag Conversion", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 52, "description": "The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\r\n```\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n```\r\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\r\nWrite the code that will take a string and make this conversion given a number of rows:\r\n```\r\nString convert(String s, int numRows);\r\n```\r\n`convert(\"PAYPALISHIRING\", 3)` should return `\"PAHNAPLSIIGYIR\"`.\r\n", "notice": "", "clarification": "", "example": "Given s = `\"PAYPALISHIRING\"`, numRows = `3`, return `\"PAHNAPLSIIGYIR\"`.", "challenge": "", "tags": [{"id": 12, "name": "String", "cn_name": "String", "type": 1, "unique_name": "string", "alias": "", "problem_count": 97}], "related_problems": [], "comment_count": 0, "testcase_sample": "\"PAYPALISHIRING\"\n3", "total_accepted": 164, "total_submissions": 312, "contest": "", "has_followed_by": false}, "minimum-cycle-section": {"id": 1365, "title": "Minimum Cycle Section", "unique_name": "minimum-cycle-section", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "directed-graph-loop": {"id": 1366, "title": "Directed Graph Loop", "unique_name": "directed-graph-loop", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 48, "title": "\u7b2c 35 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-08-05T01:30:00Z"}], "no_permission": true}, "police-distance": {"id": 1367, "title": "Police Distance", "unique_name": "police-distance", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "same-number": {"id": 1368, "title": "Same Number", "unique_name": "same-number", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 25, "title": "Weekly Mock Interview Contest #14 (For Google Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/google.png", "start_at": "2018-04-21T01:30:00Z"}], "no_permission": true}, "shortest-distance-in-3d-space": {"id": 1374, "title": "Shortest Distance in 3D Space", "unique_name": "shortest-distance-in-3d-space", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 38, "title": "\u7b2c 34 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-06-17T01:30:00Z"}, {"id": 27, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #2", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-04-21T04:00:00Z"}], "no_permission": true}, "substring-with-at-least-k-distinct-characters": {"id": 1375, "title": "Substring With At Least K Distinct Characters", "unique_name": "substring-with-at-least-k-distinct-characters", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 38, "title": "\u7b2c 34 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-06-17T01:30:00Z"}, {"id": 27, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #2", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-04-21T04:00:00Z"}], "no_permission": true}, "equivalent-strings": {"id": 1376, "title": "Equivalent Strings", "unique_name": "equivalent-strings", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 38, "title": "\u7b2c 34 \u671f\u4e5d\u7ae0\u7b97\u6cd5\u73ed\u671f\u672b\u8003\u8bd5", "cover": "https://lintcode-media.s3.amazonaws.com/suanfa-exam.png", "start_at": "2018-06-17T01:30:00Z"}, {"id": 27, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #2", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-04-21T04:00:00Z"}], "no_permission": true}, "find-substring": {"id": 1377, "title": "Find Substring", "unique_name": "find-substring", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "minimum-string-array-coverage": {"id": 1378, "title": "Minimum String Array Coverage", "unique_name": "minimum-string-array-coverage", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "the-longest-scene": {"id": 1379, "title": "The Longest Scene", "unique_name": "the-longest-scene", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "log-sorting": {"id": 1380, "title": "Log Sorting", "unique_name": "log-sorting", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 15, "title": "Amazon", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}, {"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [{"id": 28, "title": "Weekly Mock Interview Contest #15 (For Amazon Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/amazon_1.png", "start_at": "2018-04-28T01:30:00Z"}], "no_permission": true}, "maximum-line-coverage": {"id": 1381, "unique_name": "maximum-line-coverage", "user_status": null, "title": "Maximum Line Coverage", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 16, "description": "Given `n` line segments on a number axis, ask to select no more than `k` line segments so that the `k` number of segments covers the largest number.", "notice": "* `0 <= k <= n`\r\n* `1 <= n <= 2000`\r\n* The left and right endpoints of the line segment are greater than `0`, not more than `2000`.", "clarification": "", "example": "Given intervals = `[(1,2),(2,3),(3,4)]`, k = `2`, return `4`.\r\n```\r\nExplanation:\r\nSelect the line segment (1,2), (3,4), which can cover the 4 numbers of 1,2,3,4.\r\n```\r\n\r\nGiven intervals = `[(1,2),(2,3),(1,7)]`, k = `2`, return `7`.\r\n```\r\nExplanation:\r\nSelecting the line segment (1,7) ,which can cover the 7 numbers of 1,2,3,4,5,6,7.\r\n```\r\n", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}, {"id": 150, "name": "NetEase", "cn_name": "NetEase", "type": 3, "unique_name": "netease", "alias": "", "problem_count": 15}], "related_problems": [], "comment_count": 0, "testcase_sample": "[(1,2),(2,3),(3,4)]\n2", "total_accepted": 95, "total_submissions": 561, "contest": "", "has_followed_by": false}, "high-capacity-backpack": {"id": 1382, "unique_name": "high-capacity-backpack", "user_status": null, "title": "High Capacity Backpack", "is_favorited": false, "version": "v2", "level": 2, "accepted_rate": 16, "description": "Given a backpack capacity `s`, giving `n` items, the value of the i-th item is `vi`, the volume of the i-th item is `ci`, ask how much worth of the item the backpack can hold, and output this maximum value. (Each item can only be used once)", "notice": "* `1 <= s, vi, ci <= 10^13`\r\n* `1 <= n <= 31`", "clarification": "", "example": "Given s = `10`, v = `[1,2,3]`, c = `[3,5,7]`, return `4`.\r\n```\r\nExplanation:\r\nPut the 0th item and the 2nd item in the backpack.\r\n```\r\n\r\nGiven s = `10`, v = `[1,5,3]`, c = `[4,5,7]`, return `6`.\r\n```\r\nExplanation:\r\nPut the 0th item and the 1st item in the backpack.\r\n```\r\n", "challenge": "", "tags": [{"id": 1, "name": "Binary Search", "cn_name": "Binary Search", "type": 1, "unique_name": "binary-search", "alias": "", "problem_count": 47}], "related_problems": [], "comment_count": 0, "testcase_sample": "10\n[1,2,3]\n[3,5,7]", "total_accepted": 121, "total_submissions": 727, "contest": "", "has_followed_by": false}, "subtree-count": {"id": 1383, "unique_name": "subtree-count", "user_status": null, "title": "Subtree Count", "is_favorited": false, "version": "v2", "level": 3, "accepted_rate": 35, "description": "There is a multi-branch tree whose `n` nodes are rooted at `1`. Find the number of connected subgraphs of this tree. Since the middle part of the calculation and the answer may exceed the range of long, the answer is modulo `10000007`. (Connected subgraph: optional `x` points (`1 <= x <= n`), any two points can reach each other)", "notice": "* `1 <= |start|,|end|,n <= 10^5`\r\n* `1 <= start[i],end[i] <= n`", "clarification": "", "example": "Given start = `[1]`, end = `[2]`, return `3`.\r\n```\r\nExplanation:\r\nThere are 3 connected subgraphs [1], [2], [1\u21922].\r\n```\r\n\r\nGiven start = `[1,1]`, end = `[2,3]`, return `6`.\r\n```\r\nExplanation:\r\nThere are 6 connected subgraphs [1], [2], [3], [1\u21922], [1\u21923], [1\u21922,1\u21923].\r\n```\r\n\r\nGiven start = `[1,1,2]`, end = `[2,3,4]`, return `10`.\r\n```\r\nExplanation:\r\nThere are 10 connected subgraphs [1], [2], [3], [4], [1\u21922], [1\u21923], [2\u21924], [1\u21922,1\u21923], [1\u21922,2\u21924], [1\u21923,1\u21922,2\u21924] .\r\n```\r\n", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "[1,1,1]\n[2,3,4]", "total_accepted": 114, "total_submissions": 314, "contest": "", "has_followed_by": false}, "segment-stones-merge": {"id": 1384, "unique_name": "segment-stones-merge", "user_status": null, "title": "Segment Stones Merge", "is_favorited": false, "version": "v2", "level": 4, "accepted_rate": 27, "description": "There is a game of stone merging. At the beginning, there were `n` piles of stones arranged in a row. The goal was to combine all the stones into a pile. The consolidation rules are as follows:\r\n\r\n1. Each time you can merge consecutive `x` piles, `left <= x <= right`.\r\n2. The cost of each merger is the sum of the weight of the combined `x` piles.\r\n\r\nFind the minimum merge cost, if you cannot complete the merge return `0`.\r\n", "notice": "* `1 <= n <= 100`\u00ef\u00bc\u0152`2 <= left <= right <= n`\r\n* `1 <= weight[i] <= 1000`", "clarification": "", "example": "Given n = `4`, left = `3`, right = `3`, weight = `[1,2,3,4]`, return `0`.\r\n```\r\nExplanation:\r\nUnable to complete the merge.\r\n```\r\n\r\nGiven n = `3`, left = `2`, right = `3`, weight = `[1,2,3]`, return `6`.\r\n```\r\nExplanation:\r\nMerge 1,2,3, the merger cost is 1 + 2 + 3 = 6.\r\n```", "challenge": "", "tags": [{"id": 14, "name": "Dynamic Programming", "cn_name": "Dynamic Programming", "type": 11, "unique_name": "dynamic-programming", "alias": "DP", "problem_count": 125}], "related_problems": [], "comment_count": 0, "testcase_sample": "8\n7\n8\n[19,324,706,357,944,105,718,174]", "total_accepted": 89, "total_submissions": 318, "contest": "", "has_followed_by": false}, "lucky-number-eight": {"id": 1385, "unique_name": "lucky-number-eight", "user_status": null, "title": "Lucky Number Eight", "is_favorited": false, "version": "v2", "level": 1, "accepted_rate": 57, "description": "\r\n`8` is the lucky number of Xiaojiu. Xiaojiu wants to know how many numbers in the numbers `1~n` contain `8`.\r\n", "notice": "* `1 <= n <= 1000000`", "clarification": "", "example": "Given n = `20`, return `2`.\r\n```\r\nExplanation:\r\nOnly 8,18 contains 8.\r\n```\r\n\r\nGiven  n = `100`, return `19`.\r\n```\r\nExplanation:\r\n8,18,28,38,48,58,68,78,80,81,82,83,84,85,86,87,88,89,98 contains 8.\r\n```\r\n", "challenge": "", "tags": [], "related_problems": [], "comment_count": 0, "testcase_sample": "20", "total_accepted": 289, "total_submissions": 503, "contest": "", "has_followed_by": false}, "cable-car-ride": {"id": 1386, "title": "Cable Car Ride", "unique_name": "cable-car-ride", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 30, "title": "Quarter Contest", "cover": "https://lintcode-media.s3.amazonaws.com/quarter.png", "start_at": "2018-04-28T00:00:00Z"}], "no_permission": true}, "the-barycentre-of-the-trees": {"id": 1395, "title": "The Barycentre Of The Trees", "unique_name": "the-barycentre-of-the-trees", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "set-union": {"id": 1396, "title": "Set Union", "unique_name": "set-union", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "digital-coverage": {"id": 1397, "title": "Digital Coverage", "unique_name": "digital-coverage", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "k-decimal-addition": {"id": 1398, "title": "K Decimal Addition", "unique_name": "k-decimal-addition", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 29, "title": "Facebook", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/facebook.png", "privacy": "Password required"}], "contest_set": [{"id": 29, "title": "Weekly Mock Interview Contest #16 (For Facebook Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/fb.png", "start_at": "2018-05-05T01:30:00Z"}], "no_permission": true}, "take-coins": {"id": 1399, "title": "Take Coins", "unique_name": "take-coins", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "fermat-point-of-graphs": {"id": 1400, "title": "Fermat Point Of Graphs", "unique_name": "fermat-point-of-graphs", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "twitch-words": {"id": 1401, "title": "Twitch Words", "unique_name": "twitch-words", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 31, "title": "Weekly Mock Interview Contest #17 (For Google Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/google.png", "start_at": "2018-05-12T01:30:00Z"}], "no_permission": true}, "recommend-friends": {"id": 1402, "title": "Recommend Friends", "unique_name": "recommend-friends", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "maximum-product-path": {"id": 1403, "title": "Maximum Product Path", "unique_name": "maximum-product-path", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "gas-station-ii": {"id": 1408, "title": "Gas Station II", "unique_name": "gas-station-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "matrix-finding-number": {"id": 1409, "title": "Matrix Finding Number", "unique_name": "matrix-finding-number", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "matrix-water-injection": {"id": 1410, "title": "Matrix Water Injection", "unique_name": "matrix-water-injection", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 21, "title": "Microsoft", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/microsoft.png", "privacy": "Password required"}], "contest_set": [{"id": 32, "title": "Weekly Mock Interview Contest #18 (For Microsoft Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/microsoft.png", "start_at": "2018-05-20T01:30:00Z"}], "no_permission": true}, "edit-distance-replace-edition": {"id": 1411, "title": "Edit Distance - Replace Edition", "unique_name": "edit-distance-replace-edition", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 33, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #3", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-05-19T04:00:00Z"}], "no_permission": true}, "pick-three-numbers": {"id": 1412, "title": "Pick Three Numbers", "unique_name": "pick-three-numbers", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 46, "title": "Silicon Valley Job Hunting Algorithm Training Camp", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "privacy": "Use your jiuzhang account to join"}], "contest_set": [{"id": 33, "title": "Silicon Valley Job Hunting Algorithm Training Camp Monthly Exam #3", "cover": "https://lintcode-media.s3.amazonaws.com/Screen_Shot_2018-02-10_at_8.30.36_PM.png", "start_at": "2018-05-19T04:00:00Z"}], "no_permission": true}, "tree": {"id": 1413, "title": "Tree", "unique_name": "tree", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "eat-the-beans": {"id": 1414, "title": "Eat The Beans", "unique_name": "eat-the-beans", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "residual-product": {"id": 1415, "title": "Residual Product", "unique_name": "residual-product", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 34, "title": "Weekly Mock Interview Contest #19 (For Twitter Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/twitter.png", "start_at": "2018-05-26T01:30:00Z"}], "no_permission": true}, "the-previous-number": {"id": 1416, "title": "The Previous Number", "unique_name": "the-previous-number", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "weighing-problem": {"id": 1417, "title": "Weighing Problem", "unique_name": "weighing-problem", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 35, "title": "Weekly Mock Interview Contest #20 (For Hulu Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/hulu.png", "start_at": "2018-06-02T01:30:00Z"}], "no_permission": true}, "four-numbers-multiply-problem": {"id": 1441, "title": "Four Numbers Multiply Problem", "unique_name": "four-numbers-multiply-problem", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "order-problem": {"id": 1442, "title": "Order Problem", "unique_name": "order-problem", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "longest-ab-substring": {"id": 1443, "title": "Longest AB Substring", "unique_name": "longest-ab-substring", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}], "contest_set": [{"id": 36, "title": "Weekly Mock Interview Contest #21 (For Alibaba Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/%E9%98%BF%E9%87%8C.png", "start_at": "2018-06-09T01:30:00Z"}], "no_permission": true}, "dyeing-problem": {"id": 1444, "title": "Dyeing Problem", "unique_name": "dyeing-problem", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "delete-characters": {"id": 1445, "title": "Delete Characters", "unique_name": "delete-characters", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 37, "title": "Weekly Mock Interview Contest #22 (For Google Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/google.png", "start_at": "2018-06-16T01:30:00Z"}], "no_permission": true}, "01-matrix-walking-problem": {"id": 1446, "title": "01 Matrix Walking Problem", "unique_name": "01-matrix-walking-problem", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "calculation-the-sum-of-path": {"id": 1447, "title": "Calculation The Sum Of Path", "unique_name": "calculation-the-sum-of-path", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "card-game": {"id": 1448, "title": "Card Game", "unique_name": "card-game", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "word-frequency-count": {"id": 1454, "title": "Word Frequency Count", "unique_name": "word-frequency-count", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "valid-array": {"id": 1455, "title": "Valid Array", "unique_name": "valid-array", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 39, "title": "Weekly Mock Interview Contest #23 (For Amazon OA)", "cover": "https://lintcode-media.s3.amazonaws.com/amazon_1.png", "start_at": "2018-06-23T01:30:00Z"}], "no_permission": true}, "word-synthesis-problem": {"id": 1456, "title": "Word Synthesis Problem", "unique_name": "word-synthesis-problem", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "search-subarray": {"id": 1457, "title": "Search Subarray", "unique_name": "search-subarray", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "minimum-submatrix": {"id": 1458, "title": "Minimum Submatrix", "unique_name": "minimum-submatrix", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 40, "title": "Weekly Mock Interview Contest #24 (For Quora Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/quora.png", "start_at": "2018-06-30T01:30:00Z"}], "no_permission": true}, "judge-the-last-number": {"id": 1459, "title": "Judge the last number", "unique_name": "judge-the-last-number", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "paper-review": {"id": 1463, "title": "Paper Review", "unique_name": "paper-review", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 44, "title": "Quarter Contest#2", "cover": "https://lintcode-media.s3.amazonaws.com/quarter.png", "start_at": "2018-07-13T00:00:00Z"}], "no_permission": true}, "the-k-th-combination": {"id": 1464, "title": "The K-th Combination", "unique_name": "the-k-th-combination", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 44, "title": "Quarter Contest#2", "cover": "https://lintcode-media.s3.amazonaws.com/quarter.png", "start_at": "2018-07-13T00:00:00Z"}], "no_permission": true}, "order-of-tasks": {"id": 1465, "title": "Order Of Tasks", "unique_name": "order-of-tasks", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 44, "title": "Quarter Contest#2", "cover": "https://lintcode-media.s3.amazonaws.com/quarter.png", "start_at": "2018-07-13T00:00:00Z"}], "no_permission": true}, "best-shopping-plan": {"id": 1466, "title": "Best Shopping Plan", "unique_name": "best-shopping-plan", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 44, "title": "Quarter Contest#2", "cover": "https://lintcode-media.s3.amazonaws.com/quarter.png", "start_at": "2018-07-13T00:00:00Z"}], "no_permission": true}, "ask-for-cooling-time": {"id": 1467, "title": "Ask For Cooling Time", "unique_name": "ask-for-cooling-time", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 44, "title": "Quarter Contest#2", "cover": "https://lintcode-media.s3.amazonaws.com/quarter.png", "start_at": "2018-07-13T00:00:00Z"}], "no_permission": true}, "two-numbers-that-are-not-repeated": {"id": 1468, "title": "Two Numbers That Are Not Repeated", "unique_name": "two-numbers-that-are-not-repeated", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "longest-path-on-the-tree": {"id": 1469, "title": "Longest Path On The Tree", "unique_name": "longest-path-on-the-tree", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 52, "title": "Alibaba", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/alibaba.jpeg", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "the-game-of-take-numbers": {"id": 1470, "title": "The Game Of Take Numbers", "unique_name": "the-game-of-take-numbers", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "set-operation": {"id": 1471, "title": "Set Operation", "unique_name": "set-operation", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 43, "title": "Weekly Mock Interview Contest #26 (For Microsoft Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/microsoft.png", "start_at": "2018-07-14T01:30:00Z"}], "no_permission": true}, "twins-strings": {"id": 1472, "title": "Twins Strings", "unique_name": "twins-strings", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 45, "title": "Weekly Mock Interview Contest #27 (For Twitter Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/twitter.png", "start_at": "2018-07-21T01:30:00Z"}], "no_permission": true}, "find-the-sum-of-the-array": {"id": 1473, "title": "Find The Sum Of The Array", "unique_name": "find-the-sum-of-the-array", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "shortest-phrase": {"id": 1474, "title": "Shortest Phrase", "unique_name": "shortest-phrase", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "minimum-legal-bracket-sequence": {"id": 1475, "title": "Minimum Legal Bracket Sequence", "unique_name": "minimum-legal-bracket-sequence", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "closest-target-value": {"id": 1478, "title": "Closest Target Value", "unique_name": "closest-target-value", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "can-reach-the-endpoint": {"id": 1479, "title": "Can Reach The Endpoint", "unique_name": "can-reach-the-endpoint", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "dot-product": {"id": 1480, "title": "Dot Product", "unique_name": "dot-product", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "unique-substring": {"id": 1481, "title": "Unique Substring", "unique_name": "unique-substring", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "minimum-sum-path": {"id": 1482, "title": "Minimum Sum Path", "unique_name": "minimum-sum-path", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 59, "title": "Amazon 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/amazon1.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "function-runtime": {"id": 1486, "title": "Function Runtime", "unique_name": "function-runtime", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [{"id": 46, "title": "Weekly Mock Interview Contest #28 (For Linkedin Onsite)", "cover": "https://lintcode-media.s3.amazonaws.com/linkedin.png", "start_at": "2018-07-28T01:30:00Z"}], "no_permission": true}, "judging-triangle": {"id": 1487, "title": "Judging Triangle", "unique_name": "judging-triangle", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "longest-sequence": {"id": 1488, "title": "Longest Sequence", "unique_name": "longest-sequence", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "the-largest-sum-of-the-matrix-boundary-elements": {"id": 1489, "title": "The Largest Sum Of The Matrix Boundary Elements", "unique_name": "the-largest-sum-of-the-matrix-boundary-elements", "is_ladder": true, "is_contest": false, "private_ladders": [], "contest_set": [], "no_permission": true}, "card-game-ii": {"id": 1538, "title": "Card Game II", "unique_name": "card-game-ii", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "flipped-the-pixel": {"id": 1539, "title": "Flipped the Pixel", "unique_name": "flipped-the-pixel", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "can-convert": {"id": 1540, "title": "Can Convert", "unique_name": "can-convert", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "put-box": {"id": 1541, "title": "Put Box", "unique_name": "put-box", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "nexttime-norepeat": {"id": 1542, "title": "NextTime  Norepeat ", "unique_name": "nexttime-norepeat", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "unique-path-iv": {"id": 1543, "title": "Unique Path IV", "unique_name": "unique-path-iv", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "magic-square": {"id": 1544, "title": "Magic Square", "unique_name": "magic-square", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "last-closest-time": {"id": 1545, "title": "Last Closest Time", "unique_name": "last-closest-time", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "lasttime-norepeat": {"id": 1554, "title": "LastTime Norepeat", "unique_name": "lasttime-norepeat", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}, "flower-problem": {"id": 1555, "title": "Flower Problem", "unique_name": "flower-problem", "is_ladder": true, "is_contest": false, "private_ladders": [{"id": 61, "title": "Google 18\u5e746\u6708OA\u771f\u9898", "cover": "https://lintcode-media.s3.amazonaws.com/ladder/google4.png", "privacy": "Password required"}], "contest_set": [], "no_permission": true}}